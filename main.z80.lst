0000                          .ENGINE   mycomputer   
0000                TESTMODE:   EQU   0   
0000                MC6850_ACIA:   EQU   0   
0000                Z80_PIO:   EQU   1   
0000                MEM_SIZE:   EQU   $10000   ; MEM is 64K
0000                ROM_SIZE:   EQU   $8000   ; ROM is 32K
0000                RAM_SIZE:   EQU   MEM_SIZE - ROM_SIZE   ; RAM is 64K - 32K
0000                BM:       EQU   0   ; bottom of ROM memory
0000                EM:       EQU   BM + MEM_SIZE   
0000                START_ROM:   EQU   BM   ; inclusive
0000                END_ROM:   EQU   BM + ROM_SIZE   ; exclusive
0000                START_RAM:   EQU   BM + ROM_SIZE   ; inclusive
0000                END_RAM:   EQU   START_RAM + RAM_SIZE   ; exclusive
0000                RET_STACK_SIZE:   EQU   $100   ; return stack
0000                DATA_STACK_SIZE:   EQU   $100   ; data stack
0000                PAD_SIZE:   EQU   $100   ; user scratch pad
0000                SER_BUFSIZE:   EQU   3FH   
0000                SER_FULLSIZE:   EQU   30H   
0000                SER_EMPTYSIZE:   EQU   5   
0000                LINE_BUFSIZE:   EQU   128   
0000                          IF   MC6850_ACIA   
                    IO_DATA:   EQU   $81   
                    IO_CTRL:   EQU   $80   
0000                          ELSE   if Z80_SIO   
0000                IO_DATA:   EQU   $80   
0000                IO_CTRL:   EQU   $82   
0000                          ENDIF      
0000                IMMED:    EQU   $80   
0000                HIDE:     EQU   $40   
0000                LENMASK:   EQU   $3f   ; length mask
0000                CALL_OPCODE:   EQU   $CD   
0000                JP_OPCODE:   EQU   $C3   
0000                LD_HL_OPCODE:   EQU   $21   
0000                POP_HL_OPCODE:   EQU   $E1   
0000                RET_OPCODE:   EQU   $C9   
0000                RST08_OPCODE:   EQU   $CF   ; call enter
0000                          IF   MC6850_ACIA   
                                 ; 1------- rx intr enabled
                                 ; -10----- rts hi, tx intr disabled
                                 ; -00----- rts lo, tx intr disabled
                                 ; ---101-- 8+1
                                 ; ------10 64x clock
                    RTS_HIGH:   EQU   0D6H   ; 11010110
                    RTS_LOW:   EQU   096H   ; 10010110
0000                          ENDIF      
0000                             ; STORE the chain of links.
0000                LINK:     .SET   0   
0000                .macro CODE,name,namelen,flags,label
0000                             ; 
0000                HEADER_label:
0000                 DW link		            ; link
0000                link: .set HEADER_label
0000                 DB flags + namelen	; flags + length byte
0000                 DB name		    ; the name
0000                label:
0000                .endm
0000                 
0000                .macro MVAR,name,namelen,flags,label,var_label
0000                             ; 
0000                CODE name,namelen,flags,label
0000                 PDUP
0000                 ld BC, var_label
0000                 NEXT
0000                .endm
0000                 
0000                .macro MCONST,name,namelen,flags,label,value
0000                             ; 
0000                CODE name,namelen,flags,label
0000                 PDUP
0000                 ld BC, value
0000                 NEXT
0000                .endm
0000                 
0000                             ;-------------------------------------------------------------------------------
0000                             ; 
0000                             ; Assembler Structured Control-flow Macros
0000                             ; by John Hardy @ 2019 ALL WRONGS RESERVED
0000                             ; https://github.com/jhlagado/struct-z80
0000                             ; 
0000                             ; Inspired by the work of Garth Wilson and Dave Keenan
0000                             ; http://wilsonminesco.com/StructureMacros/
0000                             ; http://dkeenan.com/AddingStructuredControlFlowToAnyAssembler.htm
0000                             ; 
0000                             ;-------------------------------------------------------------------------------
0000                STRUC_COUNT:   .SET   0   
0000                STRUC_12:   .SET   0   
0000                STRUC_11:   .SET   0   
0000                STRUC_10:   .SET   0   
0000                STRUC_9:   .SET   0   
0000                STRUC_8:   .SET   0   
0000                STRUC_7:   .SET   0   
0000                STRUC_6:   .SET   0   
0000                STRUC_5:   .SET   0   
0000                STRUC_4:   .SET   0   
0000                STRUC_3:   .SET   0   
0000                STRUC_2:   .SET   0   
0000                STRUC_TOP:   .SET   0   
0000                .macro STRUC_PUSH,arg
0000                             ; 
0000                 STRUC_COUNT .set STRUC_COUNT + 1
0000                 STRUC_12 .set STRUC_11
0000                 STRUC_11 .set STRUC_10
0000                 STRUC_10 .set STRUC_9
0000                 STRUC_9 .set STRUC_8
0000                 STRUC_8 .set STRUC_7
0000                 STRUC_7 .set STRUC_6
0000                 STRUC_6 .set STRUC_5
0000                 STRUC_5 .set STRUC_4
0000                 STRUC_4 .set STRUC_3
0000                 STRUC_3 .set STRUC_2
0000                 STRUC_2 .set STRUC_TOP
0000                 STRUC_TOP .set arg
0000                .endm
0000                 
0000                .macro STRUC_POP,
0000                             ; 
0000                 STRUC_COUNT .set STRUC_COUNT - 1
0000                 STRUC_TOP .set STRUC_2
0000                 STRUC_2 .set STRUC_3
0000                 STRUC_3 .set STRUC_4
0000                 STRUC_4 .set STRUC_5
0000                 STRUC_5 .set STRUC_6
0000                 STRUC_6 .set STRUC_7
0000                 STRUC_7 .set STRUC_8
0000                 STRUC_8 .set STRUC_9
0000                 STRUC_9 .set STRUC_10
0000                 STRUC_10 .set STRUC_11
0000                 STRUC_11 .set STRUC_12
0000                 STRUC_12 .set 0
0000                .endm
0000                 
0000                .macro STRUC_FWD,
0000                             ; 
0000                 CUR_ADR .set $
0000                 org STRUC_TOP - 2
0000                 dw CUR_ADR
0000                 org CUR_ADR
0000                .endm
0000                 
0000                             ; if
0000                .macro _IF,flag
0000                             ; 
0000                 jp flag, L_%%M
0000                 jp $              ; placeholder jump to _else or _endif
0000                 STRUC_PUSH $
0000                L_%%M:
0000                .endm
0000                 
0000                .macro _ELSE,
0000                             ; 
0000                 jp $              ; placeholder jump to _endif
0000                 STRUC_FWD
0000                 STRUC_TOP .set $  ;reuse top of stack
0000                .endm
0000                 
0000                .macro _ENDIF,
0000                             ; 
0000                 STRUC_FWD
0000                 STRUC_POP
0000                .endm
0000                 
0000                             ; switch
0000                .macro _SWITCH,
0000                             ; 
0000                 jr L_%%M
0000                 jp $            ; placeholder jump to endswitch
0000                 STRUC_PUSH $
0000                L_%%M:
0000                .endm
0000                 
0000                .macro _CASE,flag
0000                             ; 
0000                 jp flag, L_%%M
0000                 jp $            ; placeholder jump to endcase
0000                 STRUC_PUSH $
0000                L_%%M:
0000                .endm
0000                 
0000                .macro _ENDCASE,
0000                             ; 
0000                 jp STRUC_2 - 3  ; jump to placeholder jump to endswitch
0000                 STRUC_FWD
0000                 STRUC_POP
0000                .endm
0000                 
0000                .macro _ENDSWITCH,
0000                             ; 
0000                 STRUC_FWD
0000                 STRUC_POP
0000                .endm
0000                 
0000                             ; skip
0000                .macro _SKIP,
0000                             ; 
0000                 jp $              ; placeholder jump to _else or _endif
0000                 STRUC_PUSH $
0000                .endm
0000                 
0000                .macro _ENDSKIP,
0000                             ; 
0000                 STRUC_FWD
0000                 STRUC_POP
0000                .endm
0000                 
0000                             ;-------------------------------------------------------------------------------
0000                             ; 
0000                             ; Assembler Structured Looping Macros
0000                             ; by John Hardy @ 2019 ALL WRONGS RESERVED
0000                             ; https://github.com/jhlagado/struct-z80
0000                             ; 
0000                             ; Inspired by the work of Garth Wilson and Dave Keenan
0000                             ; http://wilsonminesco.com/StructureMacros/
0000                             ; http://dkeenan.com/AddingStructuredControlFlowToAnyAssembler.htm
0000                             ; 
0000                             ;-------------------------------------------------------------------------------
0000                DLOOP_COUNT:   .SET   0   
0000                DLOOP_12:   .SET   0   
0000                DLOOP_11:   .SET   0   
0000                DLOOP_10:   .SET   0   
0000                DLOOP_9:   .SET   0   
0000                DLOOP_8:   .SET   0   
0000                DLOOP_7:   .SET   0   
0000                DLOOP_6:   .SET   0   
0000                DLOOP_5:   .SET   0   
0000                DLOOP_4:   .SET   0   
0000                DLOOP_3:   .SET   0   
0000                DLOOP_2:   .SET   0   
0000                DLOOP_TOP:   .SET   0   
0000                .macro DLOOP_PUSH,arg
0000                             ; 
0000                 DLOOP_COUNT .set DLOOP_COUNT + 1
0000                 DLOOP_12 .set DLOOP_11
0000                 DLOOP_11 .set DLOOP_10
0000                 DLOOP_10 .set DLOOP_9
0000                 DLOOP_9 .set DLOOP_8
0000                 DLOOP_8 .set DLOOP_7
0000                 DLOOP_7 .set DLOOP_6
0000                 DLOOP_6 .set DLOOP_5
0000                 DLOOP_5 .set DLOOP_4
0000                 DLOOP_4 .set DLOOP_3
0000                 DLOOP_3 .set DLOOP_2
0000                 DLOOP_2 .set DLOOP_TOP
0000                 DLOOP_TOP .set arg
0000                .endm
0000                 
0000                .macro DLOOP_POP,
0000                             ; 
0000                 DLOOP_COUNT .set DLOOP_COUNT - 1
0000                 DLOOP_TOP .set DLOOP_2
0000                 DLOOP_2 .set DLOOP_3
0000                 DLOOP_3 .set DLOOP_4
0000                 DLOOP_4 .set DLOOP_5
0000                 DLOOP_5 .set DLOOP_6
0000                 DLOOP_6 .set DLOOP_7
0000                 DLOOP_7 .set DLOOP_8
0000                 DLOOP_8 .set DLOOP_9
0000                 DLOOP_9 .set DLOOP_10
0000                 DLOOP_10 .set DLOOP_11
0000                 DLOOP_11 .set DLOOP_12
0000                 DLOOP_12 .set 0
0000                .endm
0000                 
0000                .macro DLOOP_FWD,
0000                             ; 
0000                 CUR_ADR .set $
0000                 org DLOOP_TOP - 2
0000                 dw CUR_ADR
0000                 org CUR_ADR
0000                .endm
0000                 
0000                .macro _DO,
0000                             ; 
0000                 jr L_%%M
0000                 jp $                    ; placeholder jump to enddo
0000                 DLOOP_PUSH $
0000                L_%%M:
0000                .endm
0000                 
0000                .macro _WHILE,flag
0000                             ; 
0000                 jr flag, L_%%M
0000                 jp DLOOP_TOP - 3         ; jump to jump to enddo
0000                 DLOOP_FWD                ; needed?
0000                L_%%M:
0000                .endm
0000                 
0000                .macro _UNTIL,flag
0000                             ; 
0000                 jp flag, DLOOP_TOP - 3  ; jump to jump to enddo
0000                 DLOOP_FWD               ; needed?
0000                .endm
0000                 
0000                .macro _BREAK,
0000                             ; 
0000                 jp DLOOP_TOP - 3        ; start of loop
0000                .endm
0000                 
0000                .macro _CONTINUE,
0000                             ; 
0000                 jp DLOOP_TOP            ; start of loop
0000                .endm
0000                 
0000                .macro _ENDDO,
0000                             ; 
0000                 jp DLOOP_TOP
0000                 DLOOP_FWD
0000                 DLOOP_POP
0000                .endm
0000                 
0000                .macro _DJNZ,
0000                             ; 
0000                 djnz DLOOP_TOP
0000                 DLOOP_FWD
0000                 DLOOP_POP
0000                .endm
0000                 
0000                .macro NEXT,
0000                             ; 
0000                 jp enter
0000                .endm
0000                 
0000                .macro NEXT1,
0000                             ; 
0000                 jp enter1
0000                .endm
0000                 
0000                .macro ENTER,
0000                             ; 
0000                 rst $08                             ; enter forth
0000                .endm
0000                 
0000                .macro EXIT,
0000                             ; 
0000                 dw exit
0000                 jp enter
0000                .endm
0000                 
0000                .macro INTERPRET,
0000                             ; 
0000                 ENTER
0000                 dw interpret
0000                 dw exit_forth
0000                .endm
0000                 
0000                             ; Macros to deal with the param stack.
0000                .macro PTUCK,regHI,regLO
0000                             ; 
0000                 ld (IX+0), regLO     ; POP register pair from ret stk
0000                 inc IX
0000                 ld (IX+0), regHI
0000                 inc IX
0000                .endm
0000                 
0000                .macro PNIP,regHI,regLO
0000                             ; 
0000                 dec IX              ; PUSH register pair on ret stack
0000                 ld regHI, (IX+0)
0000                 dec IX
0000                 ld regLO, (IX+0)
0000                .endm
0000                 
0000                .macro PDUP,
0000                             ; 
0000                 PTUCK B,C
0000                .endm
0000                 
0000                .macro PDROP,
0000                             ; 
0000                 PNIP B,C
0000                .endm
0000                 
0000                             ; Macros to deal with the param stack with TOS in BC
0000                .macro PPUSH,regHI,regLO
0000                             ; 
0000                 PDUP             ; push TOS reg pair
0000                 setTOS regHI,regLO
0000                .endm
0000                 
0000                .macro PPOP,regHI,regLO
0000                             ; 
0000                 getTOS regHI,regLO
0000                 PDROP
0000                .endm
0000                 
0000                .macro PPUSHVALUE,val
0000                             ; 
0000                 PDUP
0000                 ld BC, val
0000                .endm
0000                 
0000                .macro PPUSHTEXT,s1,len
0000                             ; 
0000                 ppushValue tpt_text%%M
0000                 ppushValue len
0000                 _skip
0000                tpt_text%%M:
0000                 db s1
0000                 _endskip
0000                .endm
0000                 
0000                .macro PPUSHPTEXT,s1
0000                             ; 
0000                 ppushValue tpt_text%%M
0000                 ld BC, tpt_text%%M
0000                 _skip
0000                tpt_text%%M:
0000                 .pstr s1
0000                 _endskip
0000                .endm
0000                 
0000                             ; Macros to deal with the return stack.
0000                .macro PUSH_RET,regHI,regLO
0000                             ; 
0000                 push regHIregLO
0000                .endm
0000                 
0000                .macro POP_RET,regHI,regLO
0000                             ; 
0000                 pop regHIregLO
0000                .endm
0000                 
0000                .macro SAVE_REGS,regHI,regLO
0000                             ; 
0000                 PDUP             ; only use if word doesn't execute other words
0000                 exx
0000                 PNIP regHI, regLO
0000                .endm
0000                 
0000                .macro RESTORE_REGS,regHI,regLO
0000                             ; 
0000                 PTUCK regHI, regLO         ; only use if word doesn't execute other words
0000                 exx
0000                 PDROP
0000                .endm
0000                 
0000                .macro SETTOS,regHI,regLO
0000                             ; 
0000                 ld C, regLO
0000                 ld B, regHI
0000                .endm
0000                 
0000                .macro GETTOS,regHI,regLO
0000                             ; 
0000                 ld regLO, C
0000                 ld regHI, B
0000                .endm
0000                 
0000                             ; works with HL, IX+d, IY+d
0000                .macro READWORD,ptr,regHI,regLO
0000                             ; 
0000                 ld regLO, (ptr)
0000                 inc ptr
0000                 ld regHI, (ptr)
0000                 inc ptr
0000                .endm
0000                 
0000                             ; works with HL, IX+d, IY+d
0000                .macro WRITEWORD,ptr,regHI,regLO
0000                             ; 
0000                 writeByte ptr, regLO
0000                 writeByte ptr, regHI
0000                .endm
0000                 
0000                             ; works with HL, IX+d, IY+d
0000                .macro WRITEBYTE,ptr,reg
0000                             ; 
0000                 ld (ptr), reg
0000                 inc ptr
0000                .endm
0000                 
0000                             ; result: sets Z if zero
0000                             ; destroys: A
0000                .macro CHECKZEROWORD,regHI,regLO
0000                             ; 
0000                 ld A, regLO
0000                 or regHI
0000                .endm
0000                 
0000                .macro PRINT_STR,addr
0000                             ; 
0000                 PTUCK D,E
0000                 ld DE, addr
0000                 call printPStr
0000                 PNIP D,E
0000                .endm
0000                 
0000                .macro CMP16,val
0000                             ; 
0000                 ld DE, val
0000                 or A
0000                 sbc HL, DE
0000                 checkZeroWord H,L
0000                .endm
0000                 
0000                          .ORG   START_ROM   
0000                RST00:       ; Reset
0000   F3                     DI      ; Disable interrupts
0001   C3 67 00               JP   start   
0008                          .ORG   $0008   
0008                RST08:       ; Check serial status
0008   C3 4A 0F               JP   enter   
0038                          .ORG   $0038   
0038                RST38:       ; rst 38 - INTERRUPT VECTOR [ for IM 1 ]
0038   C3 2C 11               JP   serialIn   
0066                          .ORG   $0066   ; rst 66 - NON-MASKABLE INTERRUPT
0066                RST66:       
0066   C9                     RET      ; do nothing
0067                START:       
0067   31 00 81               LD   SP,RET_STACK   ; Initialise the return stack.
006A   CD E3 10               CALL   initSerial   
006D   CD 13 0F               CALL   initForth   
0070                          IF   TESTMODE   
                              JP   TESTS_START   
0070                          ELSE      
0070                          ;*Macro unroll:  PRINT_STR TXT_INTRO
0070                          ;*Macro unroll:  PTUCK D,E
0070   DD 73 00               LD   (IX+0),E   
0073   DD 23                  INC   IX   
0075   DD 72 00               LD   (IX+0),D   
0078   DD 23                  INC   IX   
007A   11 9F 10               LD   DE,TXT_INTRO   
007D   CD 7D 12               CALL   printPStr   
0080                          ;*Macro unroll:  PNIP D,E
0080   DD 2B                  DEC   IX   
0082   DD 56 00               LD   D,(IX+0)   
0085   DD 2B                  DEC   IX   
0087   DD 5E 00               LD   E,(IX+0)   
008A   C3 AD 0C               JP   QUIT   
008D                          ENDIF      
008D                             ;   0<          ( n -- t )
008D                             ;               Return true if n is negative.
008D                          ;*Macro unroll: CODE '0<',2,0,ZLESS
008D                HEADER_ZLESS:      
008D   00 00                  DW   link   
008F                LINK:     .SET   HEADER_ZLESS   
008F   02                     DB   0 + 2   
0090   30 3C                  DB   "0<"   
0092                ZLESS:       
0092   CB 20                  SLA   B   ; sign bit -> cy flag
0094   9F                     SBC   A,A   ; propagate cy through A
0095   47                     LD   B,A   ; put 0000 or FFFF in TOS
0096   4F                     LD   C,A   
0097                          ;*Macro unroll: 	NEXT
0097   C3 4A 0F               JP   enter   
009A                             ; and    x1 x2 -- x3            logical and
009A                          ;*Macro unroll: CODE "and",3,0,ANDD	        ; bitwise and
009A                HEADER_ANDD:      ; bitwise and
009A   8D 00                  DW   link   
009C                LINK:     .SET   HEADER_ANDD   
009C   03                     DB   0 + 3   
009D   61 6E 64               DB   "and"   
00A0                ANDD:        
00A0                          ;*Macro unroll:  PNIP H,L
00A0   DD 2B                  DEC   IX   
00A2   DD 66 00               LD   H,(IX+0)   
00A5   DD 2B                  DEC   IX   
00A7   DD 6E 00               LD   L,(IX+0)   
00AA   78                     LD   A,B   
00AB   A4                     AND   H   
00AC   47                     LD   B,A   
00AD   79                     LD   A,C   
00AE   A5                     AND   L   
00AF   4F                     LD   C,A   
00B0                          ;*Macro unroll:  NEXT
00B0   C3 4A 0F               JP   enter   
00B3                             ; OR    x1 x2 -- x3             logical OR
00B3                          ;*Macro unroll: CODE "or",2,0,ORR	            ; bitwise OR
00B3                HEADER_ORR:      ; bitwise OR
00B3   9A 00                  DW   link   
00B5                LINK:     .SET   HEADER_ORR   
00B5   02                     DB   0 + 2   
00B6   6F 72                  DB   "or"   
00B8                ORR:         
00B8                          ;*Macro unroll:  PNIP H,L
00B8   DD 2B                  DEC   IX   
00BA   DD 66 00               LD   H,(IX+0)   
00BD   DD 2B                  DEC   IX   
00BF   DD 6E 00               LD   L,(IX+0)   
00C2   78                     LD   A,B   
00C3   B4                     OR   H   
00C4   47                     LD   B,A   
00C5   79                     LD   A,C   
00C6   B5                     OR   L   
00C7   4F                     LD   C,A   
00C8                          ;*Macro unroll:  NEXT
00C8   C3 4A 0F               JP   enter   
00CB                             ; xor    x1 x2 -- x3            logical xor
00CB                          ;*Macro unroll: CODE "xor",3,0,XORR	        ; bitwise xor
00CB                HEADER_XORR:      ; bitwise xor
00CB   B3 00                  DW   link   
00CD                LINK:     .SET   HEADER_XORR   
00CD   03                     DB   0 + 3   
00CE   78 6F 72               DB   "xor"   
00D1                XORR:        
00D1                          ;*Macro unroll:  PNIP H,L
00D1   DD 2B                  DEC   IX   
00D3   DD 66 00               LD   H,(IX+0)   
00D6   DD 2B                  DEC   IX   
00D8   DD 6E 00               LD   L,(IX+0)   
00DB   78                     LD   A,B   
00DC   AC                     XOR   H   
00DD   47                     LD   B,A   
00DE   79                     LD   A,C   
00DF   AD                     XOR   L   
00E0   4F                     LD   C,A   
00E1                          ;*Macro unroll:  NEXT
00E1   C3 4A 0F               JP   enter   
00E4                             ; +       n1/u1 n2/u2 -- n3/u3     add n1+n2
00E4                          ;*Macro unroll: CODE "+",1,0,PLUS
00E4                HEADER_PLUS:      
00E4   CB 00                  DW   link   
00E6                LINK:     .SET   HEADER_PLUS   
00E6   01                     DB   0 + 1   
00E7   2B                     DB   "+"   
00E8                PLUS:        
00E8                          ;*Macro unroll:  PNIP H,L
00E8   DD 2B                  DEC   IX   
00EA   DD 66 00               LD   H,(IX+0)   
00ED   DD 2B                  DEC   IX   
00EF   DD 6E 00               LD   L,(IX+0)   
00F2   09                     ADD   HL,BC   
00F3                          ;*Macro unroll:  setTOS H,L
00F3   4D                     LD   C,L   
00F4   44                     LD   B,H   
00F5                          ;*Macro unroll:  NEXT
00F5   C3 4A 0F               JP   enter   
00F8                             ; INVERT x1 -- x2               ; bitwise complement
00F8                          ;*Macro unroll: CODE "not",6,0,INVER
00F8                HEADER_INVER:      
00F8   E4 00                  DW   link   
00FA                LINK:     .SET   HEADER_INVER   
00FA   06                     DB   0 + 6   
00FB   6E 6F 74               DB   "not"   
00FE                INVER:       
00FE                          ;*Macro unroll:  ENTER
00FE   CF                     RST   $08   
00FF   AD 12 FF FF D1 00 5B 0F DW   LIT,-1,XORR,EXIT   
0107                             ; negate  n1 -- n2                      negate n1
0107                          ;*Macro unroll: CODE "negate",6,0,NEGAT
0107                HEADER_NEGAT:      
0107   F8 00                  DW   link   
0109                LINK:     .SET   HEADER_NEGAT   
0109   06                     DB   0 + 6   
010A   6E 65 67 61 74 65      DB   "negate"   
0110                NEGAT:       
0110                          ;*Macro unroll:  ENTER
0110   CF                     RST   $08   
0111   FE 00 9A 03 5B 0F      DW   INVER,ONEP,EXIT   
0117                             ; negate  n1 -- n2                      negate n1
0117                          ;*Macro unroll: CODE "dnegate",7,0,DNEGA
0117                HEADER_DNEGA:      
0117   07 01                  DW   link   
0119                LINK:     .SET   HEADER_DNEGA   
0119   07                     DB   0 + 7   
011A   64 6E 65 67 61 74 65   DB   "dnegate"   
0121                DNEGA:       
0121                          ;*Macro unroll:  ENTER
0121   CF                     RST   $08   
0122   FE 00 9E 13 FE 00      DW   INVER,TOR,INVER   
0128   AD 12 01 00 08 02      DW   LIT,1,UPLUS   
012E   B3 13 E8 00 5B 0F      DW   RFROM,PLUS,EXIT   
0134                          ;*Macro unroll: CODE "-",1,0,SUBB
0134                HEADER_SUBB:      
0134   17 01                  DW   link   
0136                LINK:     .SET   HEADER_SUBB   
0136   01                     DB   0 + 1   
0137   2D                     DB   "-"   
0138                SUBB:        
0138                          ;*Macro unroll:  ENTER
0138   CF                     RST   $08   
0139   10 01 E8 00 5B 0F      DW   NEGAT,Plus,EXIT   
013F                             ; abs   n -- u                          absolute value
013F                          ;*Macro unroll: CODE "abs",3,0,ABS                   ; case sensitive for ABS label for some reason
013F                HEADER_ABS:      ; case sensitive for ABS label for some reason
013F   34 01                  DW   link   
0141                LINK:     .SET   HEADER_ABS   
0141   03                     DB   0 + 3   
0142   61 62 73               DB   "abs"   
0145                ABS:         
0145                          ;*Macro unroll:  ENTER
0145   CF                     RST   $08   
0146   2E 13 92 00 12 08 50 01 DW   DUPP,ZLESS,QBRAN,ABS1   
014E   10 01                  DW   NEGAT   
0150                ABS1:        
0150   5B 0F                  DW   EXIT   
0152                             ; =      x1 x2 -- flag         test x1=x2
0152                          ;*Macro unroll: CODE "=",1,0,EQUAL
0152                HEADER_EQUAL:      
0152   3F 01                  DW   link   
0154                LINK:     .SET   HEADER_EQUAL   
0154   01                     DB   0 + 1   
0155   3D                     DB   "="   
0156                EQUAL:       
0156                          ;*Macro unroll:  ENTER
0156   CF                     RST   $08   
0157   D1 00                  DW   XORR   
0159   12 08 63 01            DW   QBRAN,EQU1   
015D   AD 12 00 00 5B 0F      DW   LIT,0,EXIT   ;false flag
0163                EQU1:        
0163   AD 12 FF FF 5B 0F      DW   LIT,-1,EXIT   ;true flag
0169                             ;   U<          ( u u -- t )
0169                             ;               Unsigned compare of top two items.
0169                          ;*Macro unroll: CODE "U<",2,0,ULESS	        ; less than
0169                HEADER_ULESS:      ; less than
0169   52 01                  DW   link   
016B                LINK:     .SET   HEADER_ULESS   
016B   02                     DB   0 + 2   
016C   55 3C                  DB   "U<"   
016E                ULESS:       
016E                          ;*Macro unroll:  ENTER
016E   CF                     RST   $08   
016F   D9 13 D1 00 92 00      DW   DDUP,XORR,ZLESS   
0175   12 08 81 01            DW   QBRAN,ULES1   
0179   42 13 62 13 92 00 5B 0F DW   SWAP,DROP,ZLESS,EXIT   
0181                ULES1:       
0181   38 01 92 00 5B 0F      DW   SUBB,ZLESS,EXIT   
0187                             ;   <           ( n1 n2 -- t )
0187                             ;               is less than
0187                          ;*Macro unroll: CODE "<",1,0,LESS	        ; less than
0187                HEADER_LESS:      ; less than
0187   69 01                  DW   link   
0189                LINK:     .SET   HEADER_LESS   
0189   01                     DB   0 + 1   
018A   3C                     DB   "<"   
018B                LESS:        
018B                          ;*Macro unroll:  ENTER
018B   CF                     RST   $08   
018C   D9 13 D1 00 92 00 12 08 9C 01 DW   DDUP,XORR,ZLESS,QBRAN,LESS1   
0196   62 13 92 00 5B 0F      DW   DROP,ZLESS,EXIT   
019C                LESS1:       
019C   38 01 92 00 5B 0F      DW   SUBB,ZLESS,EXIT   
01A2                             ; >      n1 n2 -- flag          test n1 > n2
01A2                          ;*Macro unroll: CODE ">",1,0,GREATR	        ; less than
01A2                HEADER_GREATR:      ; less than
01A2   87 01                  DW   link   
01A4                LINK:     .SET   HEADER_GREATR   
01A4   01                     DB   0 + 1   
01A5   3E                     DB   ">"   
01A6                GREATR:      
01A6                          ;*Macro unroll:  PNIP H,L                  ; swap operands
01A6   DD 2B                  DEC   IX   ; swap operands
01A8   DD 66 00               LD   H,(IX+0)   
01AB   DD 2B                  DEC   IX   
01AD   DD 6E 00               LD   L,(IX+0)   
01B0                          ;*Macro unroll:  PPUSH H,L
01B0                          ;*Macro unroll:  PDUP             ; push TOS reg pair
01B0                          ;*Macro unroll:  PTUCK B,C
01B0   DD 71 00               LD   (IX+0),C   
01B3   DD 23                  INC   IX   
01B5   DD 70 00               LD   (IX+0),B   
01B8   DD 23                  INC   IX   
01BA                          ;*Macro unroll:  setTOS H,L
01BA   4D                     LD   C,L   
01BB   44                     LD   B,H   
01BC   18 CD                  JR   LESS   
01BE                             ; max   n1 n2 -- u                      maximum
01BE                          ;*Macro unroll: CODE "max",3,0,MAX
01BE                HEADER_MAX:      
01BE   A2 01                  DW   link   
01C0                LINK:     .SET   HEADER_MAX   
01C0   03                     DB   0 + 3   
01C1   6D 61 78               DB   "max"   
01C4                MAX:         
01C4                          ;*Macro unroll:  ENTER
01C4   CF                     RST   $08   
01C5   D9 13 8B 01 12 08 CF 01 DW   DDUP,LESS,QBRAN,MAX1   
01CD   42 13                  DW   SWAP   
01CF                MAX1:        
01CF   62 13 5B 0F            DW   DROP,EXIT   
01D3                             ; min   n1 n2 -- u                      minimum
01D3                          ;*Macro unroll: CODE "min",3,0,MIN
01D3                HEADER_MIN:      
01D3   BE 01                  DW   link   
01D5                LINK:     .SET   HEADER_MIN   
01D5   03                     DB   0 + 3   
01D6   6D 69 6E               DB   "min"   
01D9                MIN:         
01D9                          ;*Macro unroll:  ENTER
01D9   CF                     RST   $08   
01DA   D9 13 42 13 8B 01      DW   DDUP,SWAP,LESS   
01E0   12 08 E6 01            DW   QBRAN,MIN1   
01E4   42 13                  DW   SWAP   
01E6                MIN1:        
01E6   62 13 5B 0F            DW   DROP,EXIT   
01EA                             ;   WITHIN      ( u ul uh -- t )
01EA                             ;               Return true if u is within the range of ul and uh.
01EA                          ;*Macro unroll: CODE 'WITHIN',6,0,WITHI
01EA                HEADER_WITHI:      
01EA   D3 01                  DW   link   
01EC                LINK:     .SET   HEADER_WITHI   
01EC   06                     DB   0 + 6   
01ED   57 49 54 48 49 4E      DB   "WITHIN"   
01F3                WITHI:       
01F3                          ;*Macro unroll: 	ENTER
01F3   CF                     RST   $08   
01F4   76 13 38 01 9E 13      DW   OVER,SUBB,TOR   ;ul <= u < uh
01FA   38 01 B3 13 6E 01 5B 0F DW   SUBB,RFROM,ULESS,EXIT   
0202                             ;   UM+         ( w w -- w cy )
0202                             ;               Add two numbers, return the sum and carry flag.
0202                          ;*Macro unroll: CODE "UM+",6,0,UPLUS
0202                HEADER_UPLUS:      
0202   EA 01                  DW   link   
0204                LINK:     .SET   HEADER_UPLUS   
0204   06                     DB   0 + 6   
0205   55 4D 2B               DB   "UM+"   
0208                UPLUS:       
0208                          ;*Macro unroll:  PNIP H,L
0208   DD 2B                  DEC   IX   
020A   DD 66 00               LD   H,(IX+0)   
020D   DD 2B                  DEC   IX   
020F   DD 6E 00               LD   L,(IX+0)   
0212   09                     ADD   HL,BC   ;11t
0213                          ;*Macro unroll:  PTUCK H,L
0213   DD 75 00               LD   (IX+0),L   
0216   DD 23                  INC   IX   
0218   DD 74 00               LD   (IX+0),H   
021B   DD 23                  INC   IX   
021D   01 00 00               LD   BC,0   ;10t
0220   30 01                  JR   NC,UMP1   ;12/7t
0222                UMP2:        
0222   03                     INC   BC   ; 6t
0223                UMP1:        
0223                          ;*Macro unroll:  NEXT
0223   C3 4A 0F               JP   enter   
0226                             ;   UM/MOD      ( udl udh u -- ur uq )
0226                             ;               Unsigned divide of a double by a single. Return mod and quotient.
0226                          ;*Macro unroll: CODE  'UM/MOD',6,0,UMMOD
0226                HEADER_UMMOD:      
0226   02 02                  DW   link   
0228                LINK:     .SET   HEADER_UMMOD   
0228   06                     DB   0 + 6   
0229   55 4D 2F 4D 4F 44      DB   "UM/MOD"   
022F                UMMOD:       
022F                          ;*Macro unroll:  ENTER
022F   CF                     RST   $08   
0230   D9 13 6E 01            DW   DDUP,ULESS   
0234   12 08 84 02            DW   QBRAN,UMM4   
0238   10 01 AD 12 0F 00 9E 13 DW   NEGAT,LIT,15,TOR   
0240                UMM1:        
0240   9E 13 2E 13 08 02      DW   TOR,DUPP,UPLUS   
0246   9E 13 9E 13 2E 13 08 02 DW   TOR,TOR,DUPP,UPLUS   
024E   B3 13 E8 00 2E 13      DW   RFROM,PLUS,DUPP   
0254   B3 13 C7 0F 42 13 9E 13 DW   RFROM,RAT,SWAP,TOR   
025C   08 02 B3 13 B8 00      DW   UPLUS,RFROM,ORR   
0262   12 08 76 02            DW   QBRAN,UMM2   
0266   9E 13 62 13 AD 12 01 00 E8 00 B3 13 DW   TOR,DROP,LIT,1,PLUS,RFROM   
0272   2F 08 78 02            DW   BRAN,UMM3   
0276                UMM2:        
0276   62 13                  DW   DROP   
0278                UMM3:        
0278   B3 13                  DW   RFROM   
027A   3E 08 40 02            DW   DONXT,UMM1   
027E   62 13 42 13 5B 0F      DW   DROP,SWAP,EXIT   
0284                UMM4:        
0284   62 13 CB 13            DW   DROP,DDROP   
0288   AD 12 FF FF 2E 13 5B 0F DW   LIT,-1,DUPP,EXIT   ;overflow, return max
0290                             ; U/MOD   u1 u2 -- u1 u2    unsigned 16 / 16 -> r q
0290                          ;*Macro unroll: CODE "u/mod",5,0,USLASHMOD
0290                HEADER_USLASHMOD:      
0290   26 02                  DW   link   
0292                LINK:     .SET   HEADER_USLASHMOD   
0292   05                     DB   0 + 5   
0293   75 2F 6D 6F 64         DB   "u/mod"   
0298                USLASHMOD:      
0298                          ;*Macro unroll:  PPOP D,E                ; DE = divisor
0298                          ;*Macro unroll:  getTOS D,E
0298   59                     LD   E,C   
0299   50                     LD   D,B   
029A                          ;*Macro unroll:  PDROP
029A                          ;*Macro unroll:  PNIP B,C
029A   DD 2B                  DEC   IX   
029C   DD 46 00               LD   B,(IX+0)   
029F   DD 2B                  DEC   IX   
02A1   DD 4E 00               LD   C,(IX+0)   
02A4                             ; BC = dividend
02A4   CD FC 03               CALL   divideWordByWord   
02A7                          ;*Macro unroll:  PTUCK H,L           ; PUSH remainder,
02A7   DD 75 00               LD   (IX+0),L   ; PUSH remainder,
02AA   DD 23                  INC   IX   
02AC   DD 74 00               LD   (IX+0),H   
02AF   DD 23                  INC   IX   
02B1                          ;*Macro unroll:  NEXT
02B1   C3 4A 0F               JP   enter   
02B4                          ;*Macro unroll: CODE "/mod",4,0,slashmod             ; dvend dvisr -- rem quot
02B4                HEADER_SLASHMOD:      ; dvend dvisr -- rem quot
02B4   90 02                  DW   link   
02B6                LINK:     .SET   HEADER_slashmod   
02B6   04                     DB   0 + 4   
02B7   2F 6D 6F 64            DB   "/mod"   
02BB                SLASHMOD:      
02BB                          ;*Macro unroll:  ENTER
02BB   CF                     RST   $08   
02BC   76 13 76 13            DW   over,over   ;       u1 u2 -- u1 u2 u1 u2  dupe both args
02C0   D1 00                  DW   XORR   ; u1 u2 u1 u2 -- u1 u2 b1     xor hi bits
02C2   92 00                  DW   ZLESS   ; true if high bit still set
02C4   F9 12                  DW   nrot   ;    u1 u2 b1 -- b1 u1 u2     move to bottom
02C6   76 13                  DW   over   ;    b1 u1 u2 -- b1 u1 u2 u1  dupe dividend
02C8   92 00                  DW   ZLESS   ; b1 u1 u2 u1 -- b1 u1 u2 b2  zero if signs are the same
02CA   F9 12                  DW   nrot   ; b1 u1 u2 b2 -- b1 b2 u1 u2  move to bottom
02CC   45 01 42 13 45 01 42 13 DW   ABS,swap,ABS,swap   ; remove sign from both args
02D4   98 02                  DW   uslashmod   ; b1 b2 u1 u2 -- b1 b2 r q    unsigned divide (remainder, quotient)
02D6   42 13                  DW   swap   ; b1 b2 u1 u2 -- b1 b2 q r
02D8   C5 12                  DW   rot   ; b1 b2 q r -- b1 q r b2      bring to top
02DA   12 08 E0 02            DW   QBRAN,SLASHMOD1   
02DE   10 01                  DW   NEGAT   ;   b1 q r b2 -- b1 q -r      if -ve then negate answer
02E0                SLASHMOD1:      
02E0   F9 12                  DW   nrot   ;     b1 q -r -- -r b1 q     bring to top
02E2   42 13                  DW   swap   ;     -r b1 q -- -r q b1      bring to top
02E4   12 08 EA 02            DW   QBRAN,SLASHMOD2   
02E8   10 01                  DW   NEGAT   ;     -r q b1 -- -r -q       if signs differ then negate answer
02EA                SLASHMOD2:      
02EA                          ;*Macro unroll:  EXIT
02EA   5B 0F                  DW   exit   
02EC   C3 4A 0F               JP   enter   
02EF                          ;*Macro unroll: CODE "mod",3,0,mod                   ; dvend dvisr -- remainder
02EF                HEADER_MOD:      ; dvend dvisr -- remainder
02EF   B4 02                  DW   link   
02F1                LINK:     .SET   HEADER_mod   
02F1   03                     DB   0 + 3   
02F2   6D 6F 64               DB   "mod"   
02F5                MOD:         
02F5                          ;*Macro unroll:  ENTER
02F5   CF                     RST   $08   
02F6   BB 02 62 13 5B 0F      DW   slashmod,DROP,EXIT   ; drop quotient
02FC                          ;*Macro unroll: CODE "/",1,0,slash                   ; dvend dvisr -- quot
02FC                HEADER_SLASH:      ; dvend dvisr -- quot
02FC   EF 02                  DW   link   
02FE                LINK:     .SET   HEADER_slash   
02FE   01                     DB   0 + 1   
02FF   2F                     DB   "/"   
0300                SLASH:       
0300                          ;*Macro unroll:  ENTER
0300   CF                     RST   $08   
0301   BB 02 42 13 62 13 5B 0F DW   slashmod,swap,drop,EXIT   ; drop remainder
0309                             ; U*   u1 u2 -- ud   unsigned mutliply
0309                          ;*Macro unroll: CODE "u*",2,0,USTAR              ; u1 u2 -- ud
0309                HEADER_USTAR:      ; u1 u2 -- ud
0309   FC 02                  DW   link   
030B                LINK:     .SET   HEADER_USTAR   
030B   02                     DB   0 + 2   
030C   75 2A                  DB   "u*"   
030E                USTAR:       
030E                             ; u2 in BC
030E                          ;*Macro unroll:  PNIP D,E                       ; u1 in DE
030E   DD 2B                  DEC   IX   ; u1 in DE
0310   DD 56 00               LD   D,(IX+0)   
0313   DD 2B                  DEC   IX   
0315   DD 5E 00               LD   E,(IX+0)   
0318   CD 36 04               CALL   unsignedMultiply   
031B                          ;*Macro unroll:  PTUCK D,E                      ; udlo result
031B   DD 73 00               LD   (IX+0),E   ; udlo result
031E   DD 23                  INC   IX   
0320   DD 72 00               LD   (IX+0),D   
0323   DD 23                  INC   IX   
0325                             ; udhi result
0325                          ;*Macro unroll:  NEXT
0325   C3 4A 0F               JP   enter   
0328                          ;*Macro unroll: CODE "*",1,0,STAR                    ; u1 u2 -- ud
0328                HEADER_STAR:      ; u1 u2 -- ud
0328   09 03                  DW   link   
032A                LINK:     .SET   HEADER_STAR   
032A   01                     DB   0 + 1   
032B   2A                     DB   "*"   
032C                STAR:        
032C                          ;*Macro unroll:  ENTER
032C   CF                     RST   $08   
032D   76 13 76 13            DW   over,over   ; dupe both args
0331   45 01 42 13 45 01      DW   ABS,swap,ABS   ; remove sign from both args
0337   0E 03 62 13            DW   ustar,drop   ; unsigned multiply, drop hi-word
033B   F9 12                  DW   nrot   ; move to bottom
033D   D1 00                  DW   XORR   ; zero if signs are the same
033F   92 00                  DW   ZLESS   ; if high bit set
0341   12 08 47 03            DW   QBRAN,STAR1   
0345   10 01                  DW   NEGAT   ; if signs differ then negate answer
0347                STAR1:       
0347                          ;*Macro unroll:  EXIT
0347   5B 0F                  DW   exit   
0349   C3 4A 0F               JP   enter   
034C                             ; CELL+    c-addr1 -- c-addr2   add cell size to addr
034C                          ;*Macro unroll: CODE "cell+",5,0,CELLP
034C                HEADER_CELLP:      
034C   28 03                  DW   link   
034E                LINK:     .SET   HEADER_CELLP   
034E   05                     DB   0 + 5   
034F   63 65 6C 6C 2B         DB   "cell+"   
0354                CELLP:       
0354   C3 AC 03               JP   TWOP   
0357                          ;*Macro unroll: CODE "cell-",5,0,CELLM
0357                HEADER_CELLM:      
0357   4C 03                  DW   link   
0359                LINK:     .SET   HEADER_CELLM   
0359   05                     DB   0 + 5   
035A   63 65 6C 6C 2D         DB   "cell-"   
035F                CELLM:       
035F   C3 B6 03               JP   TWOM   
0362                             ; CELLS   ( n1 -- n2 ) n2 is the size in address units of n1 cells.
0362                          ;*Macro unroll: CODE "cells",5,0,CELLS
0362                HEADER_CELLS:      
0362   57 03                  DW   link   
0364                LINK:     .SET   HEADER_CELLS   
0364   05                     DB   0 + 5   
0365   63 65 6C 6C 73         DB   "cells"   
036A                CELLS:       
036A   C3 C0 03               JP   TWOST   
036D                             ; 0= zero-equal
036D                          ;*Macro unroll: CODE "0=",2,0,ZEQUAL
036D                HEADER_ZEQUAL:      
036D   62 03                  DW   link   
036F                LINK:     .SET   HEADER_ZEQUAL   
036F   02                     DB   0 + 2   
0370   30 3D                  DB   "0="   
0372                ZEQUAL:      
0372                          ;*Macro unroll:  checkZeroWord B,C            ; returns 0 if not equal, 1 if equal
0372   79                     LD   A,C   ; returns 0 if not equal, 1 if equal
0373   B0                     OR   B   
0374                          ;*Macro unroll:  _if nz
0374   C2 7A 03               JP   nz,L_M_739S256   
0377   C3 77 03               JP   $   
037A                          ;*Macro unroll:  STRUC_PUSH $
037A                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
037A                STRUC_12:   .SET   STRUC_11   
037A                STRUC_11:   .SET   STRUC_10   
037A                STRUC_10:   .SET   STRUC_9   
037A                STRUC_9:   .SET   STRUC_8   
037A                STRUC_8:   .SET   STRUC_7   
037A                STRUC_7:   .SET   STRUC_6   
037A                STRUC_6:   .SET   STRUC_5   
037A                STRUC_5:   .SET   STRUC_4   
037A                STRUC_4:   .SET   STRUC_3   
037A                STRUC_3:   .SET   STRUC_2   
037A                STRUC_2:   .SET   STRUC_TOP   
037A                STRUC_TOP:   .SET   $   
037A                L_M_739S256:      
037A   01 FF FF               LD   BC,-1   
037D                          ;*Macro unroll:  _endif
037D                          ;*Macro unroll:  STRUC_FWD
037D                CUR_ADR:   .SET   $   
0378                          .ORG   STRUC_TOP - 2   
0378   7D 03                  DW   CUR_ADR   
037D                          .ORG   CUR_ADR   
037D                          ;*Macro unroll:  STRUC_POP
037D                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
037D                STRUC_TOP:   .SET   STRUC_2   
037D                STRUC_2:   .SET   STRUC_3   
037D                STRUC_3:   .SET   STRUC_4   
037D                STRUC_4:   .SET   STRUC_5   
037D                STRUC_5:   .SET   STRUC_6   
037D                STRUC_6:   .SET   STRUC_7   
037D                STRUC_7:   .SET   STRUC_8   
037D                STRUC_8:   .SET   STRUC_9   
037D                STRUC_9:   .SET   STRUC_10   
037D                STRUC_10:   .SET   STRUC_11   
037D                STRUC_11:   .SET   STRUC_12   
037D                STRUC_12:   .SET   0   
037D   03                     INC   BC   
037E                          ;*Macro unroll:  NEXT
037E   C3 4A 0F               JP   enter   
0381                          ;*Macro unroll: CODE "0<>",3,0,ZNEQU
0381                HEADER_ZNEQU:      
0381   6D 03                  DW   link   
0383                LINK:     .SET   HEADER_ZNEQU   
0383   03                     DB   0 + 3   
0384   30 3C 3E               DB   "0<>"   
0387                ZNEQU:       
0387                          ;*Macro unroll:  checkZeroWord B,C            ; returns 0 if not equal, 1 if equal
0387   79                     LD   A,C   ; returns 0 if not equal, 1 if equal
0388   B0                     OR   B   
0389                          ;*Macro unroll:  _if nz
0389   C2 8F 03               JP   nz,L_M_746S264   
038C   C3 8C 03               JP   $   
038F                          ;*Macro unroll:  STRUC_PUSH $
038F                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
038F                STRUC_12:   .SET   STRUC_11   
038F                STRUC_11:   .SET   STRUC_10   
038F                STRUC_10:   .SET   STRUC_9   
038F                STRUC_9:   .SET   STRUC_8   
038F                STRUC_8:   .SET   STRUC_7   
038F                STRUC_7:   .SET   STRUC_6   
038F                STRUC_6:   .SET   STRUC_5   
038F                STRUC_5:   .SET   STRUC_4   
038F                STRUC_4:   .SET   STRUC_3   
038F                STRUC_3:   .SET   STRUC_2   
038F                STRUC_2:   .SET   STRUC_TOP   
038F                STRUC_TOP:   .SET   $   
038F                L_M_746S264:      
038F   01 01 00               LD   BC,1   
0392                          ;*Macro unroll:  _endif
0392                          ;*Macro unroll:  STRUC_FWD
0392                CUR_ADR:   .SET   $   
038D                          .ORG   STRUC_TOP - 2   
038D   92 03                  DW   CUR_ADR   
0392                          .ORG   CUR_ADR   
0392                          ;*Macro unroll:  STRUC_POP
0392                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0392                STRUC_TOP:   .SET   STRUC_2   
0392                STRUC_2:   .SET   STRUC_3   
0392                STRUC_3:   .SET   STRUC_4   
0392                STRUC_4:   .SET   STRUC_5   
0392                STRUC_5:   .SET   STRUC_6   
0392                STRUC_6:   .SET   STRUC_7   
0392                STRUC_7:   .SET   STRUC_8   
0392                STRUC_8:   .SET   STRUC_9   
0392                STRUC_9:   .SET   STRUC_10   
0392                STRUC_10:   .SET   STRUC_11   
0392                STRUC_11:   .SET   STRUC_12   
0392                STRUC_12:   .SET   0   
0392                          ;*Macro unroll:  NEXT
0392   C3 4A 0F               JP   enter   
0395                             ; 1+      n -- n                    add 1 to TOS
0395                          ;*Macro unroll: CODE "1+",2,0,ONEP
0395                HEADER_ONEP:      
0395   81 03                  DW   link   
0397                LINK:     .SET   HEADER_ONEP   
0397   02                     DB   0 + 2   
0398   31 2B                  DB   "1+"   
039A                ONEP:        
039A   03                     INC   BC   
039B                          ;*Macro unroll:  NEXT
039B   C3 4A 0F               JP   enter   
039E                             ; 1-      n -- n            sub 1 to TOS
039E                          ;*Macro unroll: CODE "1-",2,0,ONEM
039E                HEADER_ONEM:      
039E   95 03                  DW   link   
03A0                LINK:     .SET   HEADER_ONEM   
03A0   02                     DB   0 + 2   
03A1   31 2D                  DB   "1-"   
03A3                ONEM:        
03A3   0B                     DEC   BC   
03A4                          ;*Macro unroll:  NEXT
03A4   C3 4A 0F               JP   enter   
03A7                             ; 2+      n1/u1 -- n2/u2            add 2 to TOS
03A7                          ;*Macro unroll: CODE "2+",2,0,TWOP
03A7                HEADER_TWOP:      
03A7   9E 03                  DW   link   
03A9                LINK:     .SET   HEADER_TWOP   
03A9   02                     DB   0 + 2   
03AA   32 2B                  DB   "2+"   
03AC                TWOP:        
03AC   03                     INC   BC   
03AD   03                     INC   BC   
03AE                          ;*Macro unroll:  NEXT
03AE   C3 4A 0F               JP   enter   
03B1                          ;*Macro unroll: CODE "2-",2,0,TWOM
03B1                HEADER_TWOM:      
03B1   A7 03                  DW   link   
03B3                LINK:     .SET   HEADER_TWOM   
03B3   02                     DB   0 + 2   
03B4   32 2D                  DB   "2-"   
03B6                TWOM:        
03B6   0B                     DEC   BC   
03B7   0B                     DEC   BC   
03B8                          ;*Macro unroll:  NEXT
03B8   C3 4A 0F               JP   enter   
03BB                             ; 2*      n1/u1 -- n2/u2            arithmetic left shift
03BB                          ;*Macro unroll: CODE "2*",2,0,TWOST
03BB                HEADER_TWOST:      
03BB   B1 03                  DW   link   
03BD                LINK:     .SET   HEADER_TWOST   
03BD   02                     DB   0 + 2   
03BE   32 2A                  DB   "2*"   
03C0                TWOST:       
03C0   CB 21                  SLA   C   
03C2   CB 10                  RL   B   
03C4                          ;*Macro unroll:  NEXT
03C4   C3 4A 0F               JP   enter   
03C7                             ; 2/      x1 -- x2                  arithmetic right shift
03C7                          ;*Macro unroll: CODE "2/",2,0,TWOSLASH
03C7                HEADER_TWOSLASH:      
03C7   BB 03                  DW   link   
03C9                LINK:     .SET   HEADER_TWOSLASH   
03C9   02                     DB   0 + 2   
03CA   32 2F                  DB   "2/"   
03CC                TWOSLASH:      
03CC   CB 28                  SRA   B   
03CE   CB 19                  RR   C   
03D0                          ;*Macro unroll:  NEXT
03D0   C3 4A 0F               JP   enter   
03D3                             ; 
03D3                             ; negate ***
03D3                             ; params: HL = number
03D3                             ; 
03D3                NEGATENUM:      
03D3                             ; Negate HL (using two's complement)
03D3   AF                     XOR   A   
03D4   95                     SUB   L   
03D5   6F                     LD   L,A   
03D6   3E 00                  LD   A,0   ; Note that xor A or SUB A would disturb CF
03D8   9C                     SBC   A,H   
03D9   67                     LD   H,A   
03DA   C9                     RET      
03DB                             ; 
03DB                             ; divide word by byte ***
03DB                             ; params: HL = dividend, C = divisor
03DB                             ; returns: HL = result, A = remainder
03DB                             ; destroys: ?
03DB                             ; 
03DB                DIVIDEWORDBYBYTE:      
03DB   06 10                  LD   B,16   
03DD   AF                     XOR   A   
03DE                          ;*Macro unroll:  _do
03DE   18 03                  JR   L_M_799S327   
03E0   C3 E0 03               JP   $   
03E3                          ;*Macro unroll:  DLOOP_PUSH $
03E3                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
03E3                DLOOP_12:   .SET   DLOOP_11   
03E3                DLOOP_11:   .SET   DLOOP_10   
03E3                DLOOP_10:   .SET   DLOOP_9   
03E3                DLOOP_9:   .SET   DLOOP_8   
03E3                DLOOP_8:   .SET   DLOOP_7   
03E3                DLOOP_7:   .SET   DLOOP_6   
03E3                DLOOP_6:   .SET   DLOOP_5   
03E3                DLOOP_5:   .SET   DLOOP_4   
03E3                DLOOP_4:   .SET   DLOOP_3   
03E3                DLOOP_3:   .SET   DLOOP_2   
03E3                DLOOP_2:   .SET   DLOOP_TOP   
03E3                DLOOP_TOP:   .SET   $   
03E3                L_M_799S327:      
03E3   29                     ADD   HL,HL   
03E4   17                     RLA      
03E5                          ;*Macro unroll:  _if c
03E5   DA EB 03               JP   c,L_M_802S330   
03E8   C3 E8 03               JP   $   
03EB                          ;*Macro unroll:  STRUC_PUSH $
03EB                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
03EB                STRUC_12:   .SET   STRUC_11   
03EB                STRUC_11:   .SET   STRUC_10   
03EB                STRUC_10:   .SET   STRUC_9   
03EB                STRUC_9:   .SET   STRUC_8   
03EB                STRUC_8:   .SET   STRUC_7   
03EB                STRUC_7:   .SET   STRUC_6   
03EB                STRUC_6:   .SET   STRUC_5   
03EB                STRUC_5:   .SET   STRUC_4   
03EB                STRUC_4:   .SET   STRUC_3   
03EB                STRUC_3:   .SET   STRUC_2   
03EB                STRUC_2:   .SET   STRUC_TOP   
03EB                STRUC_TOP:   .SET   $   
03EB                L_M_802S330:      
03EB   91                     SUB   C   
03EC   2C                     INC   L   
03ED                          ;*Macro unroll:  _else
03ED   C3 ED 03               JP   $   
03F0                          ;*Macro unroll:  STRUC_FWD
03F0                CUR_ADR:   .SET   $   
03E9                          .ORG   STRUC_TOP - 2   
03E9   F0 03                  DW   CUR_ADR   
03F0                          .ORG   CUR_ADR   
03F0                STRUC_TOP:   .SET   $   
03F0   B9                     CP   C   
03F1                          ;*Macro unroll:  _if nc
03F1   D2 F7 03               JP   nc,L_M_807S335   
03F4   C3 F4 03               JP   $   
03F7                          ;*Macro unroll:  STRUC_PUSH $
03F7                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
03F7                STRUC_12:   .SET   STRUC_11   
03F7                STRUC_11:   .SET   STRUC_10   
03F7                STRUC_10:   .SET   STRUC_9   
03F7                STRUC_9:   .SET   STRUC_8   
03F7                STRUC_8:   .SET   STRUC_7   
03F7                STRUC_7:   .SET   STRUC_6   
03F7                STRUC_6:   .SET   STRUC_5   
03F7                STRUC_5:   .SET   STRUC_4   
03F7                STRUC_4:   .SET   STRUC_3   
03F7                STRUC_3:   .SET   STRUC_2   
03F7                STRUC_2:   .SET   STRUC_TOP   
03F7                STRUC_TOP:   .SET   $   
03F7                L_M_807S335:      
03F7   91                     SUB   C   
03F8   2C                     INC   L   
03F9                          ;*Macro unroll:  _endif
03F9                          ;*Macro unroll:  STRUC_FWD
03F9                CUR_ADR:   .SET   $   
03F5                          .ORG   STRUC_TOP - 2   
03F5   F9 03                  DW   CUR_ADR   
03F9                          .ORG   CUR_ADR   
03F9                          ;*Macro unroll:  STRUC_POP
03F9                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
03F9                STRUC_TOP:   .SET   STRUC_2   
03F9                STRUC_2:   .SET   STRUC_3   
03F9                STRUC_3:   .SET   STRUC_4   
03F9                STRUC_4:   .SET   STRUC_5   
03F9                STRUC_5:   .SET   STRUC_6   
03F9                STRUC_6:   .SET   STRUC_7   
03F9                STRUC_7:   .SET   STRUC_8   
03F9                STRUC_8:   .SET   STRUC_9   
03F9                STRUC_9:   .SET   STRUC_10   
03F9                STRUC_10:   .SET   STRUC_11   
03F9                STRUC_11:   .SET   STRUC_12   
03F9                STRUC_12:   .SET   0   
03F9                          ;*Macro unroll:  _endif
03F9                          ;*Macro unroll:  STRUC_FWD
03F9                CUR_ADR:   .SET   $   
03EE                          .ORG   STRUC_TOP - 2   
03EE   F9 03                  DW   CUR_ADR   
03F9                          .ORG   CUR_ADR   
03F9                          ;*Macro unroll:  STRUC_POP
03F9                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
03F9                STRUC_TOP:   .SET   STRUC_2   
03F9                STRUC_2:   .SET   STRUC_3   
03F9                STRUC_3:   .SET   STRUC_4   
03F9                STRUC_4:   .SET   STRUC_5   
03F9                STRUC_5:   .SET   STRUC_6   
03F9                STRUC_6:   .SET   STRUC_7   
03F9                STRUC_7:   .SET   STRUC_8   
03F9                STRUC_8:   .SET   STRUC_9   
03F9                STRUC_9:   .SET   STRUC_10   
03F9                STRUC_10:   .SET   STRUC_11   
03F9                STRUC_11:   .SET   STRUC_12   
03F9                STRUC_12:   .SET   0   
03F9                          ;*Macro unroll:  _djnz
03F9   10 E8                  DJNZ   DLOOP_TOP   
03FB                          ;*Macro unroll:  DLOOP_FWD
03FB                CUR_ADR:   .SET   $   
03E1                          .ORG   DLOOP_TOP - 2   
03E1   FB 03                  DW   CUR_ADR   
03FB                          .ORG   CUR_ADR   
03FB                          ;*Macro unroll:  DLOOP_POP
03FB                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
03FB                DLOOP_TOP:   .SET   DLOOP_2   
03FB                DLOOP_2:   .SET   DLOOP_3   
03FB                DLOOP_3:   .SET   DLOOP_4   
03FB                DLOOP_4:   .SET   DLOOP_5   
03FB                DLOOP_5:   .SET   DLOOP_6   
03FB                DLOOP_6:   .SET   DLOOP_7   
03FB                DLOOP_7:   .SET   DLOOP_8   
03FB                DLOOP_8:   .SET   DLOOP_9   
03FB                DLOOP_9:   .SET   DLOOP_10   
03FB                DLOOP_10:   .SET   DLOOP_11   
03FB                DLOOP_11:   .SET   DLOOP_12   
03FB                DLOOP_12:   .SET   0   
03FB   C9                     RET      
03FC                             ; 
03FC                             ; Divide word by word ***
03FC                             ; params: BC = dividend, DE = divisor
03FC                             ; returns: BC = result, HL = remainder
03FC                             ; destroys: ?
03FC                             ; 
03FC                DIVIDEWORDBYWORD:      
03FC   D5                     PUSH   DE   
03FD   21 00 00               LD   HL,0   
0400   78                     LD   A,B   
0401   06 08                  LD   B,8   
0403                          ;*Macro unroll:  _do
0403   18 03                  JR   L_M_825S355   
0405   C3 05 04               JP   $   
0408                          ;*Macro unroll:  DLOOP_PUSH $
0408                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
0408                DLOOP_12:   .SET   DLOOP_11   
0408                DLOOP_11:   .SET   DLOOP_10   
0408                DLOOP_10:   .SET   DLOOP_9   
0408                DLOOP_9:   .SET   DLOOP_8   
0408                DLOOP_8:   .SET   DLOOP_7   
0408                DLOOP_7:   .SET   DLOOP_6   
0408                DLOOP_6:   .SET   DLOOP_5   
0408                DLOOP_5:   .SET   DLOOP_4   
0408                DLOOP_4:   .SET   DLOOP_3   
0408                DLOOP_3:   .SET   DLOOP_2   
0408                DLOOP_2:   .SET   DLOOP_TOP   
0408                DLOOP_TOP:   .SET   $   
0408                L_M_825S355:      
0408   17                     RLA      
0409   ED 6A                  ADC   HL,HL   
040B   ED 52                  SBC   HL,DE   
040D                          ;*Macro unroll:  _if c
040D   DA 13 04               JP   c,L_M_829S359   
0410   C3 10 04               JP   $   
0413                          ;*Macro unroll:  STRUC_PUSH $
0413                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0413                STRUC_12:   .SET   STRUC_11   
0413                STRUC_11:   .SET   STRUC_10   
0413                STRUC_10:   .SET   STRUC_9   
0413                STRUC_9:   .SET   STRUC_8   
0413                STRUC_8:   .SET   STRUC_7   
0413                STRUC_7:   .SET   STRUC_6   
0413                STRUC_6:   .SET   STRUC_5   
0413                STRUC_5:   .SET   STRUC_4   
0413                STRUC_4:   .SET   STRUC_3   
0413                STRUC_3:   .SET   STRUC_2   
0413                STRUC_2:   .SET   STRUC_TOP   
0413                STRUC_TOP:   .SET   $   
0413                L_M_829S359:      
0413   19                     ADD   HL,DE   
0414                          ;*Macro unroll:  _endif
0414                          ;*Macro unroll:  STRUC_FWD
0414                CUR_ADR:   .SET   $   
0411                          .ORG   STRUC_TOP - 2   
0411   14 04                  DW   CUR_ADR   
0414                          .ORG   CUR_ADR   
0414                          ;*Macro unroll:  STRUC_POP
0414                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0414                STRUC_TOP:   .SET   STRUC_2   
0414                STRUC_2:   .SET   STRUC_3   
0414                STRUC_3:   .SET   STRUC_4   
0414                STRUC_4:   .SET   STRUC_5   
0414                STRUC_5:   .SET   STRUC_6   
0414                STRUC_6:   .SET   STRUC_7   
0414                STRUC_7:   .SET   STRUC_8   
0414                STRUC_8:   .SET   STRUC_9   
0414                STRUC_9:   .SET   STRUC_10   
0414                STRUC_10:   .SET   STRUC_11   
0414                STRUC_11:   .SET   STRUC_12   
0414                STRUC_12:   .SET   0   
0414                          ;*Macro unroll:  _djnz
0414   10 F2                  DJNZ   DLOOP_TOP   
0416                          ;*Macro unroll:  DLOOP_FWD
0416                CUR_ADR:   .SET   $   
0406                          .ORG   DLOOP_TOP - 2   
0406   16 04                  DW   CUR_ADR   
0416                          .ORG   CUR_ADR   
0416                          ;*Macro unroll:  DLOOP_POP
0416                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
0416                DLOOP_TOP:   .SET   DLOOP_2   
0416                DLOOP_2:   .SET   DLOOP_3   
0416                DLOOP_3:   .SET   DLOOP_4   
0416                DLOOP_4:   .SET   DLOOP_5   
0416                DLOOP_5:   .SET   DLOOP_6   
0416                DLOOP_6:   .SET   DLOOP_7   
0416                DLOOP_7:   .SET   DLOOP_8   
0416                DLOOP_8:   .SET   DLOOP_9   
0416                DLOOP_9:   .SET   DLOOP_10   
0416                DLOOP_10:   .SET   DLOOP_11   
0416                DLOOP_11:   .SET   DLOOP_12   
0416                DLOOP_12:   .SET   0   
0416   17                     RLA      
0417   2F                     CPL      
0418   47                     LD   B,A   
0419   79                     LD   A,C   
041A   48                     LD   C,B   
041B   06 08                  LD   B,8   
041D                          ;*Macro unroll:  _do
041D   18 03                  JR   L_M_839S369   
041F   C3 1F 04               JP   $   
0422                          ;*Macro unroll:  DLOOP_PUSH $
0422                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
0422                DLOOP_12:   .SET   DLOOP_11   
0422                DLOOP_11:   .SET   DLOOP_10   
0422                DLOOP_10:   .SET   DLOOP_9   
0422                DLOOP_9:   .SET   DLOOP_8   
0422                DLOOP_8:   .SET   DLOOP_7   
0422                DLOOP_7:   .SET   DLOOP_6   
0422                DLOOP_6:   .SET   DLOOP_5   
0422                DLOOP_5:   .SET   DLOOP_4   
0422                DLOOP_4:   .SET   DLOOP_3   
0422                DLOOP_3:   .SET   DLOOP_2   
0422                DLOOP_2:   .SET   DLOOP_TOP   
0422                DLOOP_TOP:   .SET   $   
0422                L_M_839S369:      
0422   17                     RLA      
0423   ED 6A                  ADC   HL,HL   
0425   ED 52                  SBC   HL,DE   
0427                          ;*Macro unroll:  _if c
0427   DA 2D 04               JP   c,L_M_843S373   
042A   C3 2A 04               JP   $   
042D                          ;*Macro unroll:  STRUC_PUSH $
042D                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
042D                STRUC_12:   .SET   STRUC_11   
042D                STRUC_11:   .SET   STRUC_10   
042D                STRUC_10:   .SET   STRUC_9   
042D                STRUC_9:   .SET   STRUC_8   
042D                STRUC_8:   .SET   STRUC_7   
042D                STRUC_7:   .SET   STRUC_6   
042D                STRUC_6:   .SET   STRUC_5   
042D                STRUC_5:   .SET   STRUC_4   
042D                STRUC_4:   .SET   STRUC_3   
042D                STRUC_3:   .SET   STRUC_2   
042D                STRUC_2:   .SET   STRUC_TOP   
042D                STRUC_TOP:   .SET   $   
042D                L_M_843S373:      
042D   19                     ADD   HL,DE   
042E                          ;*Macro unroll:  _endif
042E                          ;*Macro unroll:  STRUC_FWD
042E                CUR_ADR:   .SET   $   
042B                          .ORG   STRUC_TOP - 2   
042B   2E 04                  DW   CUR_ADR   
042E                          .ORG   CUR_ADR   
042E                          ;*Macro unroll:  STRUC_POP
042E                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
042E                STRUC_TOP:   .SET   STRUC_2   
042E                STRUC_2:   .SET   STRUC_3   
042E                STRUC_3:   .SET   STRUC_4   
042E                STRUC_4:   .SET   STRUC_5   
042E                STRUC_5:   .SET   STRUC_6   
042E                STRUC_6:   .SET   STRUC_7   
042E                STRUC_7:   .SET   STRUC_8   
042E                STRUC_8:   .SET   STRUC_9   
042E                STRUC_9:   .SET   STRUC_10   
042E                STRUC_10:   .SET   STRUC_11   
042E                STRUC_11:   .SET   STRUC_12   
042E                STRUC_12:   .SET   0   
042E                          ;*Macro unroll:  _djnz
042E   10 F2                  DJNZ   DLOOP_TOP   
0430                          ;*Macro unroll:  DLOOP_FWD
0430                CUR_ADR:   .SET   $   
0420                          .ORG   DLOOP_TOP - 2   
0420   30 04                  DW   CUR_ADR   
0430                          .ORG   CUR_ADR   
0430                          ;*Macro unroll:  DLOOP_POP
0430                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
0430                DLOOP_TOP:   .SET   DLOOP_2   
0430                DLOOP_2:   .SET   DLOOP_3   
0430                DLOOP_3:   .SET   DLOOP_4   
0430                DLOOP_4:   .SET   DLOOP_5   
0430                DLOOP_5:   .SET   DLOOP_6   
0430                DLOOP_6:   .SET   DLOOP_7   
0430                DLOOP_7:   .SET   DLOOP_8   
0430                DLOOP_8:   .SET   DLOOP_9   
0430                DLOOP_9:   .SET   DLOOP_10   
0430                DLOOP_10:   .SET   DLOOP_11   
0430                DLOOP_11:   .SET   DLOOP_12   
0430                DLOOP_12:   .SET   0   
0430   17                     RLA      
0431   2F                     CPL      
0432   41                     LD   B,C   
0433   4F                     LD   C,A   
0434   D1                     POP   DE   
0435   C9                     RET      
0436                             ; 
0436                             ; unsignedMultiply -  unsigned multiply ***
0436                             ; 
0436                             ; params:  u1 in BC, u2 in DE
0436                             ; returns: result in HLDE
0436                             ; destroys: AF
0436                             ; 
0436                UNSIGNEDMULTIPLY:      
0436   21 00 00               LD   HL,0   
0439   3E 11                  LD   A,17   ; loop counter
043B   B7                     OR   A   ; clear carry
043C                          ;*Macro unroll:  _do
043C   18 03                  JR   L_M_864S396   
043E   C3 3E 04               JP   $   
0441                          ;*Macro unroll:  DLOOP_PUSH $
0441                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
0441                DLOOP_12:   .SET   DLOOP_11   
0441                DLOOP_11:   .SET   DLOOP_10   
0441                DLOOP_10:   .SET   DLOOP_9   
0441                DLOOP_9:   .SET   DLOOP_8   
0441                DLOOP_8:   .SET   DLOOP_7   
0441                DLOOP_7:   .SET   DLOOP_6   
0441                DLOOP_6:   .SET   DLOOP_5   
0441                DLOOP_5:   .SET   DLOOP_4   
0441                DLOOP_4:   .SET   DLOOP_3   
0441                DLOOP_3:   .SET   DLOOP_2   
0441                DLOOP_2:   .SET   DLOOP_TOP   
0441                DLOOP_TOP:   .SET   $   
0441                L_M_864S396:      
0441   CB 1C                  RR   H   
0443   CB 1D                  RR   L   
0445   CB 1A                  RR   D   
0447   CB 1B                  RR   E   
0449                          ;*Macro unroll:  _if c
0449   DA 4F 04               JP   c,L_M_869S401   
044C   C3 4C 04               JP   $   
044F                          ;*Macro unroll:  STRUC_PUSH $
044F                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
044F                STRUC_12:   .SET   STRUC_11   
044F                STRUC_11:   .SET   STRUC_10   
044F                STRUC_10:   .SET   STRUC_9   
044F                STRUC_9:   .SET   STRUC_8   
044F                STRUC_8:   .SET   STRUC_7   
044F                STRUC_7:   .SET   STRUC_6   
044F                STRUC_6:   .SET   STRUC_5   
044F                STRUC_5:   .SET   STRUC_4   
044F                STRUC_4:   .SET   STRUC_3   
044F                STRUC_3:   .SET   STRUC_2   
044F                STRUC_2:   .SET   STRUC_TOP   
044F                STRUC_TOP:   .SET   $   
044F                L_M_869S401:      
044F   09                     ADD   HL,BC   
0450                          ;*Macro unroll:  _endif
0450                          ;*Macro unroll:  STRUC_FWD
0450                CUR_ADR:   .SET   $   
044D                          .ORG   STRUC_TOP - 2   
044D   50 04                  DW   CUR_ADR   
0450                          .ORG   CUR_ADR   
0450                          ;*Macro unroll:  STRUC_POP
0450                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0450                STRUC_TOP:   .SET   STRUC_2   
0450                STRUC_2:   .SET   STRUC_3   
0450                STRUC_3:   .SET   STRUC_4   
0450                STRUC_4:   .SET   STRUC_5   
0450                STRUC_5:   .SET   STRUC_6   
0450                STRUC_6:   .SET   STRUC_7   
0450                STRUC_7:   .SET   STRUC_8   
0450                STRUC_8:   .SET   STRUC_9   
0450                STRUC_9:   .SET   STRUC_10   
0450                STRUC_10:   .SET   STRUC_11   
0450                STRUC_11:   .SET   STRUC_12   
0450                STRUC_12:   .SET   0   
0450   3D                     DEC   A   
0451                          ;*Macro unroll:  _until z
0451   CA 3E 04               JP   z,DLOOP_TOP - 3   
0454                          ;*Macro unroll:  DLOOP_FWD               ; needed?
0454                CUR_ADR:   .SET   $   ; needed?
043F                          .ORG   DLOOP_TOP - 2   
043F   54 04                  DW   CUR_ADR   
0454                          .ORG   CUR_ADR   
0454                          ;*Macro unroll:  _enddo
0454   C3 41 04               JP   DLOOP_TOP   
0457                          ;*Macro unroll:  DLOOP_FWD
0457                CUR_ADR:   .SET   $   
043F                          .ORG   DLOOP_TOP - 2   
043F   57 04                  DW   CUR_ADR   
0457                          .ORG   CUR_ADR   
0457                          ;*Macro unroll:  DLOOP_POP
0457                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
0457                DLOOP_TOP:   .SET   DLOOP_2   
0457                DLOOP_2:   .SET   DLOOP_3   
0457                DLOOP_3:   .SET   DLOOP_4   
0457                DLOOP_4:   .SET   DLOOP_5   
0457                DLOOP_5:   .SET   DLOOP_6   
0457                DLOOP_6:   .SET   DLOOP_7   
0457                DLOOP_7:   .SET   DLOOP_8   
0457                DLOOP_8:   .SET   DLOOP_9   
0457                DLOOP_9:   .SET   DLOOP_10   
0457                DLOOP_10:   .SET   DLOOP_11   
0457                DLOOP_11:   .SET   DLOOP_12   
0457                DLOOP_12:   .SET   0   
0457   C9                     RET      
0458                          ;*Macro unroll: CODE 'PRN',3,0,PRN
0458                HEADER_PRN:      
0458   C7 03                  DW   link   
045A                LINK:     .SET   HEADER_PRN   
045A   03                     DB   0 + 3   
045B   50 52 4E               DB   "PRN"   
045E                PRN:         
045E                          ;*Macro unroll:  ENTER
045E   CF                     RST   $08   
045F   6F 04 43 0A 5B 0F      DW   COMPI,DOT,EXIT   ;test only
0465                             ;   COMPILE     ( -- )
0465                             ;               Compile the next address in colon list to code dictionary.
0465                          ;*Macro unroll: CODE 'COMPILE',7,0,COMPI
0465                HEADER_COMPI:      
0465   58 04                  DW   link   
0467                LINK:     .SET   HEADER_COMPI   
0467   07                     DB   0 + 7   
0468   43 4F 4D 50 49 4C 45   DB   "COMPILE"   
046F                COMPI:       
046F                          ;*Macro unroll:  ENTER
046F   CF                     RST   $08   
0470   B3 13 2E 13 8E 0F 5A 10 DW   RFROM,DUPP,AT,COMMA   ;compile address
0478   54 03 9E 13 5B 0F      DW   CELLP,TOR,EXIT   ;adjust return address
047E                          ;*Macro unroll: CODE ":",1,0,colon
047E                HEADER_COLON:      
047E   65 04                  DW   link   
0480                LINK:     .SET   HEADER_colon   
0480   01                     DB   0 + 1   
0481   3A                     DB   ":"   
0482                COLON:       
0482                          ;*Macro unroll:  ENTER
0482   CF                     RST   $08   
0483   1E 05                  DW   create   ; create the dictionary entry / header
0485   22 09 8E 0F            DW   here,AT   ; back up 3 bytes to start of data area
0489   AD 12 03 00 38 01      DW   LIT,3,SUBB   
048F   22 09 6D 0F            DW   here,STORE   
0493   AD 12 CF 00 76 10      DW   LIT,rst08_opcode,ccomma   ; write z80 jp opcode to word
0499   4A 15 8E 0F BB 05      DW   latest,AT,hidden   ; make the word hidden (see below for definition).
049F   E1 05                  DW   rbrac   ; go into compile mode.
04A1                          ;*Macro unroll:  EXIT                                ; return from the function.
04A1   5B 0F                  DW   exit   ; return from the function.
04A3   C3 4A 0F               JP   enter   
04A6                          ;*Macro unroll: CODE ";",1,IMMED,semicolon
04A6                HEADER_SEMICOLON:      
04A6   7E 04                  DW   link   
04A8                LINK:     .SET   HEADER_semicolon   
04A8   81                     DB   IMMED + 1   
04A9   3B                     DB   ";"   
04AA                SEMICOLON:      
04AA                          ;*Macro unroll:  ENTER
04AA   CF                     RST   $08   
04AB   AD 12 5B 0F 5A 10      DW   LIT,exit,comma   ; append exit (so the word will return).
04B1   4A 15 8E 0F BB 05      DW   latest,AT,hidden   ; toggle hidden flag -- unhide the word (see below for definition).
04B7   D4 05                  DW   lbrac   ; go back to immediate mode.
04B9                          ;*Macro unroll:  EXIT                                ; return from the function.
04B9   5B 0F                  DW   exit   ; return from the function.
04BB   C3 4A 0F               JP   enter   
04BE                          ;*Macro unroll: CODE ":noname",7,0,colonNoName
04BE                HEADER_COLONNONAME:      
04BE   A6 04                  DW   link   
04C0                LINK:     .SET   HEADER_colonNoName   
04C0   07                     DB   0 + 7   
04C1   3A 6E 6F 6E 61 6D 65   DB   ":noname"   
04C8                COLONNONAME:      
04C8                          ;*Macro unroll:  ENTER
04C8   CF                     RST   $08   
04C9   22 09 8E 0F            DW   here,AT   ; TOS = here
04CD   AD 12 CF 00 76 10      DW   LIT,rst08_opcode,ccomma   ; write z80 jp opcode to word
04D3   E1 05                  DW   rbrac   ; go into compile mode.
04D5                          ;*Macro unroll:  EXIT                                ; return from the function.
04D5   5B 0F                  DW   exit   ; return from the function.
04D7   C3 4A 0F               JP   enter   
04DA                          ;*Macro unroll: CODE "variable",8,0,variable         ; ( n -- ) get name from input
04DA                HEADER_VARIABLE:      ; ( n -- ) get name from input
04DA   BE 04                  DW   link   
04DC                LINK:     .SET   HEADER_variable   
04DC   08                     DB   0 + 8   
04DD   76 61 72 69 61 62 6C 65 DB   "variable"   
04E5                VARIABLE:      
04E5                          ;*Macro unroll:  ENTER
04E5   CF                     RST   $08   
04E6   AD 12 01 00 6A 03      DW   LIT,1,cells   
04EC   22 09 8E 0F 42 13      DW   here,AT,swap   ; n -- here n
04F2   38 10                  DW   allot   ; allocate n bytes, push addr
04F4   89 05                  DW   constant   
04F6                          ;*Macro unroll:  EXIT
04F6   5B 0F                  DW   exit   
04F8   C3 4A 0F               JP   enter   
04FB                          ;*Macro unroll: CODE "buffer:",7,0,bufferColon       ; ( n -- ) get name from input
04FB                HEADER_BUFFERCOLON:      ; ( n -- ) get name from input
04FB   DA 04                  DW   link   
04FD                LINK:     .SET   HEADER_bufferColon   
04FD   07                     DB   0 + 7   
04FE   62 75 66 66 65 72 3A   DB   "buffer:"   
0505                BUFFERCOLON:      
0505                          ;*Macro unroll:  ENTER
0505   CF                     RST   $08   
0506   22 09 8E 0F 42 13      DW   here,AT,swap   ; n -- here n
050C   38 10                  DW   allot   ; allocate n bytes, push addr
050E   89 05                  DW   constant   
0510                          ;*Macro unroll:  EXIT
0510   5B 0F                  DW   exit   
0512   C3 4A 0F               JP   enter   
0515                          ;*Macro unroll: CODE "create",6,0,create             ; --
0515                HEADER_CREATE:      ; --
0515   FB 04                  DW   link   
0517                LINK:     .SET   HEADER_create   
0517   06                     DB   0 + 6   
0518   63 72 65 61 74 65      DB   "create"   
051E                CREATE:      
051E                          ;*Macro unroll:  ENTER
051E   CF                     RST   $08   
051F   22 09 8E 0F            DW   here,AT   ; get old "here"
0523   4A 15 8E 0F 5A 10      DW   latest,AT,comma   ; write link to previous word to "here"
0529   4A 15 6D 0F            DW   latest,STORE   ; update latest to old "here"
052D   CC 0E C2 0C            DW   bl,word   ; read word token
0531   BB 0F 9A 03 38 10      DW   CAT,ONEP,allot   ; 
0537   AD 12 C3 00 76 10      DW   LIT,jp_opcode,cComma   ; compile default behavious
053D   AD 12 48 05 5A 10      DW   LIT,xcreate,comma   ; i.e. push addr of data area
0543                          ;*Macro unroll:  EXIT                                ; exit from forth
0543   5B 0F                  DW   exit   ; exit from forth
0545   C3 4A 0F               JP   enter   
0548                XCREATE:      
0548                          ;*Macro unroll:  ENTER
0548   CF                     RST   $08   
0549   B3 13                  DW   rfrom   ; push onto stack
054B                          ;*Macro unroll:  EXIT
054B   5B 0F                  DW   exit   
054D   C3 4A 0F               JP   enter   
0550                          ;*Macro unroll: CODE "does>", 5, IMMED, does         ; --
0550                HEADER_DOES:      ; --
0550   15 05                  DW   link   
0552                LINK:     .SET   HEADER_does   
0552   85                     DB   IMMED + 5   
0553   64 6F 65 73 3E         DB   "does>"   
0558                DOES:        
0558                          ;*Macro unroll:  ENTER
0558   CF                     RST   $08   
0559   AD 12 FA 05 5A 10      DW   LIT,xdoes,comma   
055F   AD 12 EA 05            DW   LIT,dodoes   
0563   22 09 8E 0F            DW   here,AT   
0567   AD 12 CD 00            DW   LIT,call_opcode   
056B   76 13 9C 0F            DW   over,cstore   
056F   9A 03 6D 0F            DW   ONEP,STORE   
0573   AD 12 03 00 38 10      DW   LIT,3,allot   
0579                          ;*Macro unroll:  EXIT
0579   5B 0F                  DW   exit   
057B   C3 4A 0F               JP   enter   
057E                          ;*Macro unroll: CODE "constant",8,0,constant         ; --
057E                HEADER_CONSTANT:      ; --
057E   50 05                  DW   link   
0580                LINK:     .SET   HEADER_constant   
0580   08                     DB   0 + 8   
0581   63 6F 6E 73 74 61 6E 74 DB   "constant"   
0589                CONSTANT:      
0589                          ;*Macro unroll:  ENTER
0589   CF                     RST   $08   
058A   1E 05 5A 10 FA 05      DW   create,comma,xdoes   
0590                          ;*Macro unroll:  ENTER
0590   CF                     RST   $08   
0591   B3 13                  DW   rfrom   ; push onto stack
0593   8E 0F                  DW   AT   
0595                          ;*Macro unroll:  EXIT
0595   5B 0F                  DW   exit   
0597   C3 4A 0F               JP   enter   
059A                          ;*Macro unroll: CODE "immediate",9,IMMED,IMMEDIATE
059A                HEADER_IMMEDIATE:      
059A   7E 05                  DW   link   
059C                LINK:     .SET   HEADER_IMMEDIATE   
059C   89                     DB   IMMED + 9   
059D   69 6D 6D 65 64 69 61 74 65 DB   "immediate"   
05A6                IMMEDIATE:      
05A6   2A 5F 84               LD   HL,(VAR_LATEST)   ; get head of latest word
05A9   23                     INC   HL   ; point to flags byte
05AA   23                     INC   HL   
05AB   3E 80                  LD   a,IMMED   
05AD   AE                     XOR   (HL)   ; toggle the IMMED bit.
05AE   77                     LD   (HL),a   
05AF                          ;*Macro unroll:  NEXT
05AF   C3 4A 0F               JP   enter   
05B2                          ;*Macro unroll: CODE "hidden",6,0,HIDDEN
05B2                HEADER_HIDDEN:      
05B2   9A 05                  DW   link   
05B4                LINK:     .SET   HEADER_HIDDEN   
05B4   06                     DB   0 + 6   
05B5   68 69 64 64 65 6E      DB   "hidden"   
05BB                HIDDEN:      
05BB                          ;*Macro unroll:  PPOP H,L		            ; HL = Dictionary entry.
05BB                          ;*Macro unroll:  getTOS H,L
05BB   69                     LD   L,C   
05BC   60                     LD   H,B   
05BD                          ;*Macro unroll:  PDROP
05BD                          ;*Macro unroll:  PNIP B,C
05BD   DD 2B                  DEC   IX   
05BF   DD 46 00               LD   B,(IX+0)   
05C2   DD 2B                  DEC   IX   
05C4   DD 4E 00               LD   C,(IX+0)   
05C7   23                     INC   HL   
05C8   23                     INC   HL   ; Point to name/flags byte.
05C9   7E                     LD   A,(HL)   
05CA   EE 40                  XOR   HIDE   ; Toggle the HIDDEN bit.
05CC   77                     LD   (HL),A   
05CD                          ;*Macro unroll:  NEXT
05CD   C3 4A 0F               JP   enter   
05D0                          ;*Macro unroll: CODE "[",1,IMMED,LBRAC
05D0                HEADER_LBRAC:      
05D0   B2 05                  DW   link   
05D2                LINK:     .SET   HEADER_LBRAC   
05D2   81                     DB   IMMED + 1   
05D3   5B                     DB   "["   
05D4                LBRAC:       
05D4   21 00 00               LD   HL,0   
05D7   22 55 84               LD   (VAR_STATE),HL   ; Set STATE to 0.
05DA                          ;*Macro unroll:  NEXT
05DA   C3 4A 0F               JP   enter   
05DD                          ;*Macro unroll: CODE "]",1,0,RBRAC
05DD                HEADER_RBRAC:      
05DD   D0 05                  DW   link   
05DF                LINK:     .SET   HEADER_RBRAC   
05DF   01                     DB   0 + 1   
05E0   5D                     DB   "]"   
05E1                RBRAC:       
05E1   21 01 00               LD   HL,1   
05E4   22 55 84               LD   (VAR_STATE),HL   ; Set STATE to 1.
05E7                          ;*Macro unroll:  NEXT
05E7   C3 4A 0F               JP   enter   
05EA                DODOES:      ; -- a-addr
05EA                          ;*Macro unroll:  PDUP
05EA                          ;*Macro unroll:  PTUCK B,C
05EA   DD 71 00               LD   (IX+0),C   
05ED   DD 23                  INC   IX   
05EF   DD 70 00               LD   (IX+0),B   
05F2   DD 23                  INC   IX   
05F4   E1                     POP   HL   ; parameter field address
05F5   C1                     POP   BC   
05F6   E5                     PUSH   HL   
05F7                          ;*Macro unroll:  NEXT
05F7   C3 4A 0F               JP   enter   
05FA                XDOES:       ; --
05FA                          ;*Macro unroll:  ENTER
05FA   CF                     RST   $08   
05FB   B3 13                  DW   rfrom   
05FD   4A 15 8E 0F 16 0E      DW   latest,AT,tcfa   
0603   AD 12 CD 00            DW   LIT,call_opcode   
0607   76 13 9C 0F            DW   over,cstore   
060B   9A 03 6D 0F            DW   ONEP,STORE   
060F                          ;*Macro unroll:  EXIT
060F   5B 0F                  DW   exit   
0611   C3 4A 0F               JP   enter   
0614                          ;*Macro unroll: CODE "postpone",8,IMMED,postpone ; --
0614                HEADER_POSTPONE:      ; --
0614   DD 05                  DW   link   
0616                LINK:     .SET   HEADER_postpone   
0616   88                     DB   IMMED + 8   
0617   70 6F 73 74 70 6F 6E 65 DB   "postpone"   
061F                POSTPONE:      
061F                          ;*Macro unroll:  ENTER
061F   CF                     RST   $08   
0620   CC 0E C2 0C FA 13      DW   bl,word,count   ; pstr -- ptr len
0626   2E 13 72 03            DW   DUPP,zEqual   
062A   12 08 36 06            DW   QBRAN,postpone1   
062E   62 13 62 13            DW   drop,drop   ; ptr len --
0632   2F 08 38 06            DW   BRAN,postpone2   
0636                POSTPONE1:      
0636   3D 06                  DW   postponeToken   ; interpret the next word
0638                POSTPONE2:      
0638                          ;*Macro unroll:  EXIT
0638   5B 0F                  DW   exit   
063A   C3 4A 0F               JP   enter   
063D                POSTPONETOKEN:      ; --
063D                          ;*Macro unroll:  ENTER
063D   CF                     RST   $08   
063E   76 13 76 13 C8 0D      DW   over,over,find   ; ptr len -- ptr len addr
0644   2E 13 87 03            DW   DUPP,ZNEQU   
0648   12 08 52 06            DW   QBRAN,postponeToken1   
064C   59 06                  DW   postponeWord   
064E   2F 08 54 06            DW   BRAN,postponeToken2   
0652                POSTPONETOKEN1:      
0652   95 06                  DW   postponeLiteral   
0654                POSTPONETOKEN2:      
0654                          ;*Macro unroll:  EXIT
0654   5B 0F                  DW   exit   
0656   C3 4A 0F               JP   enter   
0659                POSTPONEWORD:      ; ( headptr -- )
0659                          ;*Macro unroll:  ENTER                                 ; enter forth
0659   CF                     RST   $08   ; enter forth
065A   42 13 62 13 42 13 62 13 DW   swap,drop,swap,drop   ; ptr len addr -- addr
0662   2E 13 AD 12 02 00 E8 00 BB 0F DW   DUPP,LIT,2,plus,CAT   ; ( headptr -- headptr flags ) add 2 to headptr
066C   AD 12 80 00 A0 00      DW   LIT,IMMED,ANDD   ; ( headptr flags -- headptr immedflag )
0672   72 03                  DW   zEqual   
0674   12 08 8C 06            DW   QBRAN,postponeWord1   
0678   AD 12 AD 12 5A 10      DW   LIT,LIT,comma   
067E   16 0E 5A 10            DW   tcfa,comma   
0682   AD 12 5A 10 5A 10      DW   LIT,comma,comma   
0688   2F 08 90 06            DW   BRAN,postponeWord2   
068C                POSTPONEWORD1:      
068C   16 0E 5A 10            DW   tcfa,comma   
0690                POSTPONEWORD2:      
0690                          ;*Macro unroll:  EXIT
0690   5B 0F                  DW   exit   
0692   C3 4A 0F               JP   enter   
0695                POSTPONELITERAL:      ; ( ptr len -- )
0695                          ;*Macro unroll:  ENTER                                 ; enter forth
0695   CF                     RST   $08   ; enter forth
0696   62 13                  DW   drop   ; ptr len addr - ptr len
0698   67 0B 72 03            DW   number,zEqual   ; parse to number
069C   12 08 AC 06            DW   QBRAN,postponeLiteral1   
06A0   AD 12 AD 12            DW   LIT,LIT   ; (val -- val "LIT" )
06A4   5A 10 5A 10            DW   comma,comma   ; compile "LIT" val
06A8   2F 08 C1 06            DW   BRAN,postponeLiteral2   
06AC                POSTPONELITERAL1:      
06AC   62 13                  DW   drop   ; ( ptr len zero -- ptr len ), not found
06AE   E0 13                  DW   litstr   ; err != 0, parse error
06B0   0E 45 72 72 6F 72 3A 20 70 61 72 73 69 6E 67 .PSTR   "Error: parsing"   
06BF   33 0E                  DW   type   
06C1                POSTPONELITERAL2:      
06C1                          ;*Macro unroll:  EXIT
06C1   5B 0F                  DW   exit   
06C3   C3 4A 0F               JP   enter   
06C6                             ;   AHEAD       ( -- A )
06C6                             ;               Compile a forward branch instruction.
06C6                          ;*Macro unroll: CODE  'AHEAD',5,IMMED,AHEAD
06C6                HEADER_AHEAD:      
06C6   14 06                  DW   link   
06C8                LINK:     .SET   HEADER_AHEAD   
06C8   85                     DB   IMMED + 5   
06C9   41 48 45 41 44         DB   "AHEAD"   
06CE                AHEAD:       
06CE   6F 04 2F 08 22 09 AD 12 00 00 5A 10 5B 0F DW   COMPI,BRAN,HERE,LIT,0,COMMA,EXIT   
06DC                             ;   IFF          ( -- A )
06DC                             ;               Begin a conditional branch structure.
06DC                          ;*Macro unroll: CODE  'IFF',3,IMMED,IFF
06DC                HEADER_IFF:      
06DC   C6 06                  DW   link   
06DE                LINK:     .SET   HEADER_IFF   
06DE   83                     DB   IMMED + 3   
06DF   49 46 46               DB   "IFF"   
06E2                IFF:         
06E2                          ;*Macro unroll:  ENTER
06E2   CF                     RST   $08   
06E3   6F 04 12 08 22 09      DW   COMPI,QBRAN,HERE   
06E9   AD 12 00 00 5A 10 5B 0F DW   LIT,0,COMMA,EXIT   
06F1                             ;   THEN        ( A -- )
06F1                             ;               Terminate a conditional branch structure.
06F1                          ;*Macro unroll: CODE  'THENN',5,IMMED,THENN
06F1                HEADER_THENN:      
06F1   DC 06                  DW   link   
06F3                LINK:     .SET   HEADER_THENN   
06F3   85                     DB   IMMED + 5   
06F4   54 48 45 4E 4E         DB   "THENN"   
06F9                THENN:       
06F9                          ;*Macro unroll:  ENTER
06F9   CF                     RST   $08   
06FA   22 09 42 13 6D 0F 5B 0F DW   HERE,SWAP,STORE,EXIT   
0702                             ;   ELSE        ( A -- A )
0702                             ;               Start the false clause in an IF-ELSE-THEN structure.
0702                          ;*Macro unroll: CODE  'ELSEE',5,IMMED,ELSEE
0702                HEADER_ELSEE:      
0702   F1 06                  DW   link   
0704                LINK:     .SET   HEADER_ELSEE   
0704   85                     DB   IMMED + 5   
0705   45 4C 53 45 45         DB   "ELSEE"   
070A                ELSEE:       
070A                          ;*Macro unroll:  ENTER
070A   CF                     RST   $08   
070B   CE 06 42 13 F9 06 5B 0F DW   AHEAD,SWAP,THENN,EXIT   
0713                             ; ?branch   x --              branch if TOS zero
0713                          ;*Macro unroll: CODE "x?branch",7,0,XQBRAN
0713                HEADER_XQBRAN:      
0713   02 07                  DW   link   
0715                LINK:     .SET   HEADER_XQBRAN   
0715   07                     DB   0 + 7   
0716   78 3F 62 72 61 6E 63 68 DB   "x?branch"   
071E                XQBRAN:      
071E                          ;*Macro unroll:  checkZeroWord B,C               ; test old TOS
071E   79                     LD   A,C   ; test old TOS
071F   B0                     OR   B   
0720                          ;*Macro unroll:  PDROP                       ; POP new TOS
0720                          ;*Macro unroll:  PNIP B,C
0720   DD 2B                  DEC   IX   
0722   DD 46 00               LD   B,(IX+0)   
0725   DD 2B                  DEC   IX   
0727   DD 4E 00               LD   C,(IX+0)   
072A   28 10                  JR   z,XBRAN   ; if old TOS=0, branch
072C   E1                     POP   HL   
072D   23                     INC   HL   ; else skip inline value
072E   23                     INC   HL   
072F                          ;*Macro unroll:  NEXT1
072F   C3 4B 0F               JP   enter1   
0732                          ;*Macro unroll: CODE "xbranch",6,0,XBRAN         ; relative branching
0732                HEADER_XBRAN:      ; relative branching
0732   13 07                  DW   link   
0734                LINK:     .SET   HEADER_XBRAN   
0734   06                     DB   0 + 6   
0735   78 62 72 61 6E 63 68   DB   "xbranch"   
073C                XBRAN:       
073C   E1                     POP   HL   ; add the offset to the instruction pointer
073D   5E                     LD   E,(HL)   
073E   23                     INC   HL   
073F   56                     LD   D,(HL)   
0740   2B                     DEC   HL   
0741   19                     ADD   HL,DE   
0742                          ;*Macro unroll:  NEXT1
0742   C3 4B 0F               JP   enter1   
0745                          ;*Macro unroll: CODE "if",2,IMMED,if
0745                HEADER_IF:      
0745   32 07                  DW   link   
0747                LINK:     .SET   HEADER_if   
0747   82                     DB   IMMED + 2   
0748   69 66                  DB   "if"   
074A                IF:          
074A                          ;*Macro unroll:  ENTER
074A   CF                     RST   $08   
074B   CD 09                  DW   lbrace   
074D   AD 12 1E 07 5A 10      DW   LIT,XQBRAN,comma   ; compile ?branch
0753   22 09 8E 0F 2E 13 5A 10 DW   here,AT,DUPP,comma   ; compile here and also push on stack
075B                          ;*Macro unroll:  EXIT
075B   5B 0F                  DW   exit   
075D   C3 4A 0F               JP   enter   
0760                          ;*Macro unroll: CODE "else",4,IMMED,else
0760                HEADER_ELSE:      
0760   45 07                  DW   link   
0762                LINK:     .SET   HEADER_else   
0762   84                     DB   IMMED + 4   
0763   65 6C 73 65            DB   "else"   
0767                ELSE:        
0767                          ;*Macro unroll:  ENTER
0767   CF                     RST   $08   
0768   AD 12 3C 07 5A 10      DW   LIT,XBRAN,comma   ; definite branch to just over the false-part
076E   22 09 8E 0F            DW   here,AT   ; save here on stack
0772   AD 12 00 00 5A 10      DW   LIT,0,comma   ; compile a dummy offset
0778   42 13                  DW   swap   ; now back-fill the original (if) offset
077A   93 07                  DW   xendif   ; must call xendif not endif
077C                          ;*Macro unroll:  EXIT
077C   5B 0F                  DW   exit   
077E   C3 4A 0F               JP   enter   
0781                          ;*Macro unroll: CODE "endif",5,IMMED,endif
0781                HEADER_ENDIF:      
0781   60 07                  DW   link   
0783                LINK:     .SET   HEADER_endif   
0783   85                     DB   IMMED + 5   
0784   65 6E 64 69 66         DB   "endif"   
0789                ENDIF:       
0789                          ;*Macro unroll:  ENTER
0789   CF                     RST   $08   
078A   93 07                  DW   xendif   ; must call xendif not endif
078C   1D 0A                  DW   rbraceExec   
078E                          ;*Macro unroll:  EXIT
078E   5B 0F                  DW   exit   
0790   C3 4A 0F               JP   enter   
0793                XENDIF:      ; must call xendif not endif
0793                          ;*Macro unroll:  ENTER
0793   CF                     RST   $08   
0794   2E 13                  DW   DUPP   
0796   22 09 8E 0F 42 13 38 01 DW   here,AT,swap,SUBB   ; calculate the offset from the address saved on the stack
079E   42 13 6D 0F            DW   swap,STORE   ; STORE the offset in the back-filled location
07A2                          ;*Macro unroll:  EXIT
07A2   5B 0F                  DW   exit   
07A4   C3 4A 0F               JP   enter   
07A7                             ; begin condition while ... repeat
07A7                          ;*Macro unroll: CODE "begin",5,IMMED,begin
07A7                HEADER_BEGIN:      
07A7   81 07                  DW   link   
07A9                LINK:     .SET   HEADER_begin   
07A9   85                     DB   IMMED + 5   
07AA   62 65 67 69 6E         DB   "begin"   
07AF                BEGIN:       
07AF                          ;*Macro unroll:  ENTER
07AF   CF                     RST   $08   
07B0   CD 09                  DW   lbrace   
07B2   22 09 8E 0F            DW   here,AT   ; save here on stack (here1)
07B6                          ;*Macro unroll:  EXIT
07B6   5B 0F                  DW   exit   
07B8   C3 4A 0F               JP   enter   
07BB                          ;*Macro unroll: CODE "while",5,IMMED,while
07BB                HEADER_WHILE:      
07BB   A7 07                  DW   link   
07BD                LINK:     .SET   HEADER_while   
07BD   85                     DB   IMMED + 5   
07BE   77 68 69 6C 65         DB   "while"   
07C3                WHILE:       
07C3                          ;*Macro unroll:  ENTER
07C3   CF                     RST   $08   
07C4   AD 12 1E 07 5A 10      DW   LIT,XQBRAN,comma   ; compile branch on zero
07CA   22 09 8E 0F            DW   here,AT   ; save here in stack (here2)
07CE   AD 12 00 00 5A 10      DW   LIT,0,comma   ; compile dummy offset
07D4                          ;*Macro unroll:  EXIT
07D4   5B 0F                  DW   exit   
07D6   C3 4A 0F               JP   enter   
07D9                          ;*Macro unroll: CODE "repeat",6,IMMED,repeat
07D9                HEADER_REPEAT:      
07D9   BB 07                  DW   link   
07DB                LINK:     .SET   HEADER_repeat   
07DB   86                     DB   IMMED + 6   
07DC   72 65 70 65 61 74      DB   "repeat"   
07E2                REPEAT:      
07E2                          ;*Macro unroll:  ENTER
07E2   CF                     RST   $08   
07E3   AD 12 3C 07 5A 10      DW   LIT,XBRAN,comma   ; compile branch
07E9   42 13                  DW   swap   ; tos = here1
07EB   22 09 8E 0F 38 01 5A 10 DW   here,AT,SUBB,comma   ; compile offset (here1 - here3)
07F3   2E 13                  DW   DUPP   
07F5   22 09 8E 0F 42 13 38 01 DW   here,AT,swap,SUBB   ; compile offset (here2 - here3)
07FD   42 13 6D 0F            DW   swap,STORE   ; save offset in here2
0801   1D 0A                  DW   rbraceExec   
0803                          ;*Macro unroll:  EXIT
0803   5B 0F                  DW   exit   
0805   C3 4A 0F               JP   enter   
0808                             ; ?branch   x --              branch if TOS zero
0808                          ;*Macro unroll: CODE "?branch",7,0,QBRAN
0808                HEADER_QBRAN:      
0808   D9 07                  DW   link   
080A                LINK:     .SET   HEADER_QBRAN   
080A   07                     DB   0 + 7   
080B   3F 62 72 61 6E 63 68   DB   "?branch"   
0812                QBRAN:       
0812                          ;*Macro unroll:  checkZeroWord B,C               ; test old TOS
0812   79                     LD   A,C   ; test old TOS
0813   B0                     OR   B   
0814                          ;*Macro unroll:  PDROP                       ; POP new TOS
0814                          ;*Macro unroll:  PNIP B,C
0814   DD 2B                  DEC   IX   
0816   DD 46 00               LD   B,(IX+0)   
0819   DD 2B                  DEC   IX   
081B   DD 4E 00               LD   C,(IX+0)   
081E   28 0F                  JR   z,BRAN   ; if old TOS=0, branch
0820   E1                     POP   HL   
0821   23                     INC   HL   ; else skip inline value
0822   23                     INC   HL   
0823                          ;*Macro unroll:  NEXT1
0823   C3 4B 0F               JP   enter1   
0826                          ;*Macro unroll: CODE "branch",6,0,BRAN         ; relative branching
0826                HEADER_BRAN:      ; relative branching
0826   08 08                  DW   link   
0828                LINK:     .SET   HEADER_BRAN   
0828   06                     DB   0 + 6   
0829   62 72 61 6E 63 68      DB   "branch"   
082F                BRAN:        
082F   E1                     POP   HL   ; add the offset to the instruction pointer
0830   5E                     LD   E,(HL)   
0831   23                     INC   HL   
0832   56                     LD   D,(HL)   
0833   EB                     EX   DE,HL   
0834                          ;*Macro unroll:  NEXT1
0834   C3 4B 0F               JP   enter1   
0837                             ;   next        ( -- )
0837                             ;               Run time code for the single index loop.
0837                             ;               : next ( -- ) \ hilevel model
0837                             ;                 r> r> dup if 1 - >r @ >r exit then drop cell+ >r ;
0837                          ;*Macro unroll: CODE   'next',4,0,DONXT
0837                HEADER_DONXT:      
0837   26 08                  DW   link   
0839                LINK:     .SET   HEADER_DONXT   
0839   04                     DB   0 + 4   
083A   6E 65 78 74            DB   "next"   
083E                DONXT:       
083E   DD E5                  PUSH   IX   
0840   E1                     POP   HL   ; load rp into HL
0841   7E                     LD   A,(HL)   ; a = low byte of r@
0842   B7                     OR   A   
0843   20 10                  JR   NZ,DECLOW   ; low > 0 goto dec low
0845   23                     INC   HL   
0846   7E                     LD   A,(HL)   ; a = high byte of r@
0847   B7                     OR   A   
0848   20 09                  JR   NZ,DECHILO   ; high > 0 goto dec hi dec lo
084A   23                     INC   HL   
084B   E5                     PUSH   HL   
084C   DD E1                  POP   IX   ; pop r@
084E   13                     INC   DE   ; IP = skip following word
084F   13                     INC   DE   
0850                          ;*Macro unroll:  NEXT                               ; continue
0850   C3 4A 0F               JP   enter   ; continue
0853                DECHILO:      
0853   35                     DEC   (HL)   ; dec high byte of r@
0854   2B                     DEC   HL   
0855                DECLOW:      
0855   35                     DEC   (HL)   ; dec low byte of r@
0856   6B                     LD   L,E   ; DE points to location of loop address
0857   62                     LD   H,D   
0858   5E                     LD   E,(HL)   ; DE points to loop address
0859   23                     INC   HL   
085A   56                     LD   D,(HL)   
085B                          ;*Macro unroll:  NEXT                               ; continue to loop address
085B   C3 4A 0F               JP   enter   ; continue to loop address
085E                          ;*Macro unroll: mCONST "version",7,0,version,1
085E                          ;*Macro unroll: CODE "version",7,0,version
085E                HEADER_VERSION:      
085E   37 08                  DW   link   
0860                LINK:     .SET   HEADER_version   
0860   07                     DB   0 + 7   
0861   76 65 72 73 69 6F 6E   DB   "version"   
0868                VERSION:      
0868                          ;*Macro unroll:  PDUP
0868                          ;*Macro unroll:  PTUCK B,C
0868   DD 71 00               LD   (IX+0),C   
086B   DD 23                  INC   IX   
086D   DD 70 00               LD   (IX+0),B   
0870   DD 23                  INC   IX   
0872   01 01 00               LD   BC,1   
0875                          ;*Macro unroll:  NEXT
0875   C3 4A 0F               JP   enter   
0878                          ;*Macro unroll: mCONST "r0",2,0,rz, ret_stack
0878                          ;*Macro unroll: CODE "r0",2,0,rz
0878                HEADER_RZ:      
0878   5E 08                  DW   link   
087A                LINK:     .SET   HEADER_rz   
087A   02                     DB   0 + 2   
087B   72 30                  DB   "r0"   
087D                RZ:          
087D                          ;*Macro unroll:  PDUP
087D                          ;*Macro unroll:  PTUCK B,C
087D   DD 71 00               LD   (IX+0),C   
0880   DD 23                  INC   IX   
0882   DD 70 00               LD   (IX+0),B   
0885   DD 23                  INC   IX   
0887   01 00 81               LD   BC,ret_stack   
088A                          ;*Macro unroll:  NEXT
088A   C3 4A 0F               JP   enter   
088D                          ;*Macro unroll: mCONST "IMMED",9,0,__msk_immed,IMMED
088D                          ;*Macro unroll: CODE "IMMED",9,0,__msk_immed
088D                HEADER___MSK_IMMED:      
088D   78 08                  DW   link   
088F                LINK:     .SET   HEADER___msk_immed   
088F   09                     DB   0 + 9   
0890   49 4D 4D 45 44         DB   "IMMED"   
0895                __MSK_IMMED:      
0895                          ;*Macro unroll:  PDUP
0895                          ;*Macro unroll:  PTUCK B,C
0895   DD 71 00               LD   (IX+0),C   
0898   DD 23                  INC   IX   
089A   DD 70 00               LD   (IX+0),B   
089D   DD 23                  INC   IX   
089F   01 80 00               LD   BC,IMMED   
08A2                          ;*Macro unroll:  NEXT
08A2   C3 4A 0F               JP   enter   
08A5                          ;*Macro unroll: mCONST "HIDE",10,0,__msk_hidden,HIDE
08A5                          ;*Macro unroll: CODE "HIDE",10,0,__msk_hidden
08A5                HEADER___MSK_HIDDEN:      
08A5   8D 08                  DW   link   
08A7                LINK:     .SET   HEADER___msk_hidden   
08A7   0A                     DB   0 + 10   
08A8   48 49 44 45            DB   "HIDE"   
08AC                __MSK_HIDDEN:      
08AC                          ;*Macro unroll:  PDUP
08AC                          ;*Macro unroll:  PTUCK B,C
08AC   DD 71 00               LD   (IX+0),C   
08AF   DD 23                  INC   IX   
08B1   DD 70 00               LD   (IX+0),B   
08B4   DD 23                  INC   IX   
08B6   01 40 00               LD   BC,HIDE   
08B9                          ;*Macro unroll:  NEXT
08B9   C3 4A 0F               JP   enter   
08BC                          ;*Macro unroll: mCONST "LENMASK",10,0,__msk_length,LENMASK
08BC                          ;*Macro unroll: CODE "LENMASK",10,0,__msk_length
08BC                HEADER___MSK_LENGTH:      
08BC   A5 08                  DW   link   
08BE                LINK:     .SET   HEADER___msk_length   
08BE   0A                     DB   0 + 10   
08BF   4C 45 4E 4D 41 53 4B   DB   "LENMASK"   
08C6                __MSK_LENGTH:      
08C6                          ;*Macro unroll:  PDUP
08C6                          ;*Macro unroll:  PTUCK B,C
08C6   DD 71 00               LD   (IX+0),C   
08C9   DD 23                  INC   IX   
08CB   DD 70 00               LD   (IX+0),B   
08CE   DD 23                  INC   IX   
08D0   01 3F 00               LD   BC,LENMASK   
08D3                          ;*Macro unroll:  NEXT
08D3   C3 4A 0F               JP   enter   
08D6                          ;*Macro unroll: mCONST "TRUE",4,0,TRUE,-1
08D6                          ;*Macro unroll: CODE "TRUE",4,0,TRUE
08D6                HEADER_TRUE:      
08D6   BC 08                  DW   link   
08D8                LINK:     .SET   HEADER_TRUE   
08D8   04                     DB   0 + 4   
08D9   54 52 55 45            DB   "TRUE"   
08DD                TRUE:        
08DD                          ;*Macro unroll:  PDUP
08DD                          ;*Macro unroll:  PTUCK B,C
08DD   DD 71 00               LD   (IX+0),C   
08E0   DD 23                  INC   IX   
08E2   DD 70 00               LD   (IX+0),B   
08E5   DD 23                  INC   IX   
08E7   01 FF FF               LD   BC,-1   
08EA                          ;*Macro unroll:  NEXT
08EA   C3 4A 0F               JP   enter   
08ED                          ;*Macro unroll: mCONST "FALSE",5,0,FALSE,0
08ED                          ;*Macro unroll: CODE "FALSE",5,0,FALSE
08ED                HEADER_FALSE:      
08ED   D6 08                  DW   link   
08EF                LINK:     .SET   HEADER_FALSE   
08EF   05                     DB   0 + 5   
08F0   46 41 4C 53 45         DB   "FALSE"   
08F5                FALSE:       
08F5                          ;*Macro unroll:  PDUP
08F5                          ;*Macro unroll:  PTUCK B,C
08F5   DD 71 00               LD   (IX+0),C   
08F8   DD 23                  INC   IX   
08FA   DD 70 00               LD   (IX+0),B   
08FD   DD 23                  INC   IX   
08FF   01 00 00               LD   BC,0   
0902                          ;*Macro unroll:  NEXT
0902   C3 4A 0F               JP   enter   
0905                          ;*Macro unroll: mVAR "pad", 3, 0, pad, var_pad
0905                          ;*Macro unroll: CODE "pad",3,0,pad
0905                HEADER_PAD:      
0905   ED 08                  DW   link   
0907                LINK:     .SET   HEADER_pad   
0907   03                     DB   0 + 3   
0908   70 61 64               DB   "pad"   
090B                PAD:         
090B                          ;*Macro unroll:  PDUP
090B                          ;*Macro unroll:  PTUCK B,C
090B   DD 71 00               LD   (IX+0),C   
090E   DD 23                  INC   IX   
0910   DD 70 00               LD   (IX+0),B   
0913   DD 23                  INC   IX   
0915   01 4D 83               LD   BC,var_pad   
0918                          ;*Macro unroll:  NEXT
0918   C3 4A 0F               JP   enter   
091B                          ;*Macro unroll: mVAR "here", 4, 0, here, var_here
091B                          ;*Macro unroll: CODE "here",4,0,here
091B                HEADER_HERE:      
091B   05 09                  DW   link   
091D                LINK:     .SET   HEADER_here   
091D   04                     DB   0 + 4   
091E   68 65 72 65            DB   "here"   
0922                HERE:        
0922                          ;*Macro unroll:  PDUP
0922                          ;*Macro unroll:  PTUCK B,C
0922   DD 71 00               LD   (IX+0),C   
0925   DD 23                  INC   IX   
0927   DD 70 00               LD   (IX+0),B   
092A   DD 23                  INC   IX   
092C   01 51 84               LD   BC,var_here   
092F                          ;*Macro unroll:  NEXT
092F   C3 4A 0F               JP   enter   
0932                          ;*Macro unroll: mVAR "intp_stop", 9, 0, intp_stop, var_intp_stop
0932                          ;*Macro unroll: CODE "intp_stop",9,0,intp_stop
0932                HEADER_INTP_STOP:      
0932   1B 09                  DW   link   
0934                LINK:     .SET   HEADER_intp_stop   
0934   09                     DB   0 + 9   
0935   69 6E 74 70 5F 73 74 6F 70 DB   "intp_stop"   
093E                INTP_STOP:      
093E                          ;*Macro unroll:  PDUP
093E                          ;*Macro unroll:  PTUCK B,C
093E   DD 71 00               LD   (IX+0),C   
0941   DD 23                  INC   IX   
0943   DD 70 00               LD   (IX+0),B   
0946   DD 23                  INC   IX   
0948   01 53 84               LD   BC,var_intp_stop   
094B                          ;*Macro unroll:  NEXT
094B   C3 4A 0F               JP   enter   
094E                          ;*Macro unroll: mVAR "state",5,0,state, var_state
094E                          ;*Macro unroll: CODE "state",5,0,state
094E                HEADER_STATE:      
094E   32 09                  DW   link   
0950                LINK:     .SET   HEADER_state   
0950   05                     DB   0 + 5   
0951   73 74 61 74 65         DB   "state"   
0956                STATE:       
0956                          ;*Macro unroll:  PDUP
0956                          ;*Macro unroll:  PTUCK B,C
0956   DD 71 00               LD   (IX+0),C   
0959   DD 23                  INC   IX   
095B   DD 70 00               LD   (IX+0),B   
095E   DD 23                  INC   IX   
0960   01 55 84               LD   BC,var_state   
0963                          ;*Macro unroll:  NEXT
0963   C3 4A 0F               JP   enter   
0966                          ;*Macro unroll: mVAR "nesting",7,0,nesting, var_nesting
0966                          ;*Macro unroll: CODE "nesting",7,0,nesting
0966                HEADER_NESTING:      
0966   4E 09                  DW   link   
0968                LINK:     .SET   HEADER_nesting   
0968   07                     DB   0 + 7   
0969   6E 65 73 74 69 6E 67   DB   "nesting"   
0970                NESTING:      
0970                          ;*Macro unroll:  PDUP
0970                          ;*Macro unroll:  PTUCK B,C
0970   DD 71 00               LD   (IX+0),C   
0973   DD 23                  INC   IX   
0975   DD 70 00               LD   (IX+0),B   
0978   DD 23                  INC   IX   
097A   01 57 84               LD   BC,var_nesting   
097D                          ;*Macro unroll:  NEXT
097D   C3 4A 0F               JP   enter   
0980                          ;*Macro unroll: mVAR "sp0",3,0,sp0, var_sp0
0980                          ;*Macro unroll: CODE "sp0",3,0,sp0
0980                HEADER_SP0:      
0980   66 09                  DW   link   
0982                LINK:     .SET   HEADER_sp0   
0982   03                     DB   0 + 3   
0983   73 70 30               DB   "sp0"   
0986                SP0:         
0986                          ;*Macro unroll:  PDUP
0986                          ;*Macro unroll:  PTUCK B,C
0986   DD 71 00               LD   (IX+0),C   
0989   DD 23                  INC   IX   
098B   DD 70 00               LD   (IX+0),B   
098E   DD 23                  INC   IX   
0990   01 59 84               LD   BC,var_sp0   
0993                          ;*Macro unroll:  NEXT
0993   C3 4A 0F               JP   enter   
0996                          ;*Macro unroll: mVAR "base",4,0,base, var_base
0996                          ;*Macro unroll: CODE "base",4,0,base
0996                HEADER_BASE:      
0996   80 09                  DW   link   
0998                LINK:     .SET   HEADER_base   
0998   04                     DB   0 + 4   
0999   62 61 73 65            DB   "base"   
099D                BASE:        
099D                          ;*Macro unroll:  PDUP
099D                          ;*Macro unroll:  PTUCK B,C
099D   DD 71 00               LD   (IX+0),C   
09A0   DD 23                  INC   IX   
09A2   DD 70 00               LD   (IX+0),B   
09A5   DD 23                  INC   IX   
09A7   01 5B 84               LD   BC,var_base   
09AA                          ;*Macro unroll:  NEXT
09AA   C3 4A 0F               JP   enter   
09AD                          ;*Macro unroll: mVAR "latestStr",6,0,latestStr, var_latest_str
09AD                          ;*Macro unroll: CODE "latestStr",6,0,latestStr
09AD                HEADER_LATESTSTR:      
09AD   96 09                  DW   link   
09AF                LINK:     .SET   HEADER_latestStr   
09AF   06                     DB   0 + 6   
09B0   6C 61 74 65 73 74 53 74 72 DB   "latestStr"   
09B9                LATESTSTR:      
09B9                          ;*Macro unroll:  PDUP
09B9                          ;*Macro unroll:  PTUCK B,C
09B9   DD 71 00               LD   (IX+0),C   
09BC   DD 23                  INC   IX   
09BE   DD 70 00               LD   (IX+0),B   
09C1   DD 23                  INC   IX   
09C3   01 5D 84               LD   BC,var_latest_str   
09C6                          ;*Macro unroll:  NEXT
09C6   C3 4A 0F               JP   enter   
09C9                          ;*Macro unroll: CODE "{",1,IMMED,LBRACE
09C9                HEADER_LBRACE:      
09C9   AD 09                  DW   link   
09CB                LINK:     .SET   HEADER_LBRACE   
09CB   81                     DB   IMMED + 1   
09CC   7B                     DB   "{"   
09CD                LBRACE:      
09CD                          ;*Macro unroll:  ENTER
09CD   CF                     RST   $08   
09CE   56 09 8E 0F 72 03      DW   state,AT,ZEQUAL   
09D4   70 09 8E 0F 72 03      DW   nesting,AT,ZEQUAL   
09DA   A0 00                  DW   ANDD   
09DC   12 08 EA 09            DW   QBRAN,LBRACE1   
09E0   22 09 8E 0F            DW   here,AT   ; TOS = here
09E4   AD 12 CF 00 76 10      DW   LIT,rst08_opcode,ccomma   ; write z80 jp opcode to word
09EA                LBRACE1:      
09EA   92 0C                  DW   nestPlus   ; increase nesting
09EC                          ;*Macro unroll:  EXIT                             ; return from the function.
09EC   5B 0F                  DW   exit   ; return from the function.
09EE   C3 4A 0F               JP   enter   
09F1                          ;*Macro unroll: CODE "}",1,IMMED,RBRACE
09F1                HEADER_RBRACE:      
09F1   C9 09                  DW   link   
09F3                LINK:     .SET   HEADER_RBRACE   
09F3   81                     DB   IMMED + 1   
09F4   7D                     DB   "}"   
09F5                RBRACE:      
09F5                          ;*Macro unroll:  ENTER
09F5   CF                     RST   $08   
09F6   9C 0C                  DW   nestMinus   ; reduce nesting
09F8   56 09 8E 0F 72 03      DW   state,AT,ZEQUAL   
09FE   70 09 8E 0F 72 03      DW   nesting,AT,ZEQUAL   
0A04   A0 00                  DW   ANDD   
0A06   12 08 10 0A            DW   QBRAN,RBRACE1   
0A0A   AD 12 5B 0F 5A 10      DW   LIT,exit,comma   ; append exit (so the word will return).
0A10                RBRACE1:      
0A10                          ;*Macro unroll:  EXIT                             ; return from the function.
0A10   5B 0F                  DW   exit   ; return from the function.
0A12   C3 4A 0F               JP   enter   
0A15                          ;*Macro unroll: CODE "}exec",5,IMMED,rbraceExec
0A15                HEADER_RBRACEEXEC:      
0A15   F1 09                  DW   link   
0A17                LINK:     .SET   HEADER_rbraceExec   
0A17   85                     DB   IMMED + 5   
0A18   7D 65 78 65 63         DB   "}exec"   
0A1D                RBRACEEXEC:      
0A1D                          ;*Macro unroll:  ENTER
0A1D   CF                     RST   $08   
0A1E   F5 09                  DW   rbrace   
0A20   56 09 8E 0F 72 03      DW   state,AT,ZEQUAL   
0A26   70 09 8E 0F 72 03      DW   nesting,AT,ZEQUAL   
0A2C   A0 00                  DW   ANDD   
0A2E   12 08 3A 0A            DW   QBRAN,RBRACEEXEC1   
0A32   2E 13                  DW   DUPP   
0A34   22 09 6D 0F            DW   here,STORE   
0A38   B7 0B                  DW   execute   
0A3A                RBRACEEXEC1:      
0A3A                          ;*Macro unroll:  EXIT                             ; return from the function.
0A3A   5B 0F                  DW   exit   ; return from the function.
0A3C   C3 4A 0F               JP   enter   
0A3F                          ;*Macro unroll: CODE ".",1,0,DOT                 ; print top of stack in BASE
0A3F                HEADER_DOT:      ; print top of stack in BASE
0A3F   15 0A                  DW   link   
0A41                LINK:     .SET   HEADER_DOT   
0A41   01                     DB   0 + 1   
0A42   2E                     DB   "."   
0A43                DOT:         
0A43   E5                     PUSH   HL   
0A44   D5                     PUSH   DE   
0A45   C5                     PUSH   BC   
0A46                          ;*Macro unroll:  getTOS H,L
0A46   69                     LD   L,C   
0A47   60                     LD   H,B   
0A48   3A 5B 84               LD   A,(VAR_BASE)   
0A4B   4F                     LD   C,A   
0A4C   11 CD 82               LD   DE,wordBuf   
0A4F   CD 81 0A               CALL   formatNum   
0A52   CD 8C 12               CALL   printStr   
0A55   CD 9F 12               CALL   printSpace   
0A58   C1                     POP   BC   
0A59   D1                     POP   DE   
0A5A   E1                     POP   HL   
0A5B                          ;*Macro unroll:  PDROP
0A5B                          ;*Macro unroll:  PNIP B,C
0A5B   DD 2B                  DEC   IX   
0A5D   DD 46 00               LD   B,(IX+0)   
0A60   DD 2B                  DEC   IX   
0A62   DD 4E 00               LD   C,(IX+0)   
0A65                          ;*Macro unroll:  NEXT
0A65   C3 4A 0F               JP   enter   
0A68                PRINTNUM:      
0A68   E5                     PUSH   HL   
0A69   D5                     PUSH   DE   
0A6A   C5                     PUSH   BC   
0A6B                          ;*Macro unroll:  getTOS H,L
0A6B   69                     LD   L,C   
0A6C   60                     LD   H,B   
0A6D   3A 5B 84               LD   A,(VAR_BASE)   
0A70   4F                     LD   C,A   
0A71   11 CD 82               LD   DE,wordBuf   
0A74   CD 81 0A               CALL   formatNum   
0A77   CD 8C 12               CALL   printStr   
0A7A   CD 9F 12               CALL   printSpace   
0A7D   C1                     POP   BC   
0A7E   D1                     POP   DE   
0A7F   E1                     POP   HL   
0A80   C9                     RET      
0A81                             ; 
0A81                             ; HL = data, DE = ptr to lineBuf, C = base ***
0A81                             ; DE = ptr to string, BC = length
0A81                             ; 
0A81                FORMATNUM:      
0A81                             ; Detect sign of HL.
0A81   CB 7C                  BIT   7,H   
0A83                          ;*Macro unroll:  _if nz
0A83   C2 89 0A               JP   nz,L_M_1258S42   
0A86   C3 86 0A               JP   $   
0A89                          ;*Macro unroll:  STRUC_PUSH $
0A89                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0A89                STRUC_12:   .SET   STRUC_11   
0A89                STRUC_11:   .SET   STRUC_10   
0A89                STRUC_10:   .SET   STRUC_9   
0A89                STRUC_9:   .SET   STRUC_8   
0A89                STRUC_8:   .SET   STRUC_7   
0A89                STRUC_7:   .SET   STRUC_6   
0A89                STRUC_6:   .SET   STRUC_5   
0A89                STRUC_5:   .SET   STRUC_4   
0A89                STRUC_4:   .SET   STRUC_3   
0A89                STRUC_3:   .SET   STRUC_2   
0A89                STRUC_2:   .SET   STRUC_TOP   
0A89                STRUC_TOP:   .SET   $   
0A89                L_M_1258S42:      
0A89                             ; HL is negative. Output "-" to string and negate HL.
0A89   3E 2D                  LD   A,"-"   
0A8B   12                     LD   (DE),A   
0A8C   13                     INC   DE   
0A8D   CD D3 03               CALL   negateNum   
0A90                          ;*Macro unroll:  _endif
0A90                          ;*Macro unroll:  STRUC_FWD
0A90                CUR_ADR:   .SET   $   
0A87                          .ORG   STRUC_TOP - 2   
0A87   90 0A                  DW   CUR_ADR   
0A90                          .ORG   CUR_ADR   
0A90                          ;*Macro unroll:  STRUC_POP
0A90                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0A90                STRUC_TOP:   .SET   STRUC_2   
0A90                STRUC_2:   .SET   STRUC_3   
0A90                STRUC_3:   .SET   STRUC_4   
0A90                STRUC_4:   .SET   STRUC_5   
0A90                STRUC_5:   .SET   STRUC_6   
0A90                STRUC_6:   .SET   STRUC_7   
0A90                STRUC_7:   .SET   STRUC_8   
0A90                STRUC_8:   .SET   STRUC_9   
0A90                STRUC_9:   .SET   STRUC_10   
0A90                STRUC_10:   .SET   STRUC_11   
0A90                STRUC_11:   .SET   STRUC_12   
0A90                STRUC_12:   .SET   0   
0A90   06 00                  LD   B,0   ; B will count character length of number
0A92                          ;*Macro unroll:  _do
0A92   18 03                  JR   L_M_1266S51   
0A94   C3 94 0A               JP   $   
0A97                          ;*Macro unroll:  DLOOP_PUSH $
0A97                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
0A97                DLOOP_12:   .SET   DLOOP_11   
0A97                DLOOP_11:   .SET   DLOOP_10   
0A97                DLOOP_10:   .SET   DLOOP_9   
0A97                DLOOP_9:   .SET   DLOOP_8   
0A97                DLOOP_8:   .SET   DLOOP_7   
0A97                DLOOP_7:   .SET   DLOOP_6   
0A97                DLOOP_6:   .SET   DLOOP_5   
0A97                DLOOP_5:   .SET   DLOOP_4   
0A97                DLOOP_4:   .SET   DLOOP_3   
0A97                DLOOP_3:   .SET   DLOOP_2   
0A97                DLOOP_2:   .SET   DLOOP_TOP   
0A97                DLOOP_TOP:   .SET   $   
0A97                L_M_1266S51:      
0A97   C5                     PUSH   BC   
0A98   CD DB 03               CALL   divideWordByByte   ; HL = HL / A, A = remainder
0A9B   C1                     POP   BC   
0A9C   F5                     PUSH   AF   
0A9D   04                     INC   B   
0A9E                          ;*Macro unroll:  checkZeroWord H,L
0A9E   7D                     LD   A,L   
0A9F   B4                     OR   H   
0AA0                          ;*Macro unroll:  _until z
0AA0   CA 94 0A               JP   z,DLOOP_TOP - 3   
0AA3                          ;*Macro unroll:  DLOOP_FWD               ; needed?
0AA3                CUR_ADR:   .SET   $   ; needed?
0A95                          .ORG   DLOOP_TOP - 2   
0A95   A3 0A                  DW   CUR_ADR   
0AA3                          .ORG   CUR_ADR   
0AA3                          ;*Macro unroll:  _enddo
0AA3   C3 97 0A               JP   DLOOP_TOP   
0AA6                          ;*Macro unroll:  DLOOP_FWD
0AA6                CUR_ADR:   .SET   $   
0A95                          .ORG   DLOOP_TOP - 2   
0A95   A6 0A                  DW   CUR_ADR   
0AA6                          .ORG   CUR_ADR   
0AA6                          ;*Macro unroll:  DLOOP_POP
0AA6                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
0AA6                DLOOP_TOP:   .SET   DLOOP_2   
0AA6                DLOOP_2:   .SET   DLOOP_3   
0AA6                DLOOP_3:   .SET   DLOOP_4   
0AA6                DLOOP_4:   .SET   DLOOP_5   
0AA6                DLOOP_5:   .SET   DLOOP_6   
0AA6                DLOOP_6:   .SET   DLOOP_7   
0AA6                DLOOP_7:   .SET   DLOOP_8   
0AA6                DLOOP_8:   .SET   DLOOP_9   
0AA6                DLOOP_9:   .SET   DLOOP_10   
0AA6                DLOOP_10:   .SET   DLOOP_11   
0AA6                DLOOP_11:   .SET   DLOOP_12   
0AA6                DLOOP_12:   .SET   0   
0AA6                          ;*Macro unroll:  _do
0AA6   18 03                  JR   L_M_1275S60   
0AA8   C3 A8 0A               JP   $   
0AAB                          ;*Macro unroll:  DLOOP_PUSH $
0AAB                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
0AAB                DLOOP_12:   .SET   DLOOP_11   
0AAB                DLOOP_11:   .SET   DLOOP_10   
0AAB                DLOOP_10:   .SET   DLOOP_9   
0AAB                DLOOP_9:   .SET   DLOOP_8   
0AAB                DLOOP_8:   .SET   DLOOP_7   
0AAB                DLOOP_7:   .SET   DLOOP_6   
0AAB                DLOOP_6:   .SET   DLOOP_5   
0AAB                DLOOP_5:   .SET   DLOOP_4   
0AAB                DLOOP_4:   .SET   DLOOP_3   
0AAB                DLOOP_3:   .SET   DLOOP_2   
0AAB                DLOOP_2:   .SET   DLOOP_TOP   
0AAB                DLOOP_TOP:   .SET   $   
0AAB                L_M_1275S60:      
0AAB   F1                     POP   AF   
0AAC   C6 30                  ADD   A,$30   ; convert digit to ASCII
0AAE   FE 3A                  CP   $3A   
0AB0                          ;*Macro unroll:  _if nc
0AB0   D2 B6 0A               JP   nc,L_M_1279S64   
0AB3   C3 B3 0A               JP   $   
0AB6                          ;*Macro unroll:  STRUC_PUSH $
0AB6                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0AB6                STRUC_12:   .SET   STRUC_11   
0AB6                STRUC_11:   .SET   STRUC_10   
0AB6                STRUC_10:   .SET   STRUC_9   
0AB6                STRUC_9:   .SET   STRUC_8   
0AB6                STRUC_8:   .SET   STRUC_7   
0AB6                STRUC_7:   .SET   STRUC_6   
0AB6                STRUC_6:   .SET   STRUC_5   
0AB6                STRUC_5:   .SET   STRUC_4   
0AB6                STRUC_4:   .SET   STRUC_3   
0AB6                STRUC_3:   .SET   STRUC_2   
0AB6                STRUC_2:   .SET   STRUC_TOP   
0AB6                STRUC_TOP:   .SET   $   
0AB6                L_M_1279S64:      
0AB6   C6 07                  ADD   A,7   
0AB8                          ;*Macro unroll:  _endif
0AB8                          ;*Macro unroll:  STRUC_FWD
0AB8                CUR_ADR:   .SET   $   
0AB4                          .ORG   STRUC_TOP - 2   
0AB4   B8 0A                  DW   CUR_ADR   
0AB8                          .ORG   CUR_ADR   
0AB8                          ;*Macro unroll:  STRUC_POP
0AB8                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0AB8                STRUC_TOP:   .SET   STRUC_2   
0AB8                STRUC_2:   .SET   STRUC_3   
0AB8                STRUC_3:   .SET   STRUC_4   
0AB8                STRUC_4:   .SET   STRUC_5   
0AB8                STRUC_5:   .SET   STRUC_6   
0AB8                STRUC_6:   .SET   STRUC_7   
0AB8                STRUC_7:   .SET   STRUC_8   
0AB8                STRUC_8:   .SET   STRUC_9   
0AB8                STRUC_9:   .SET   STRUC_10   
0AB8                STRUC_10:   .SET   STRUC_11   
0AB8                STRUC_11:   .SET   STRUC_12   
0AB8                STRUC_12:   .SET   0   
0AB8   12                     LD   (DE),A   
0AB9   13                     INC   DE   
0ABA                          ;*Macro unroll:  _djnz
0ABA   10 EF                  DJNZ   DLOOP_TOP   
0ABC                          ;*Macro unroll:  DLOOP_FWD
0ABC                CUR_ADR:   .SET   $   
0AA9                          .ORG   DLOOP_TOP - 2   
0AA9   BC 0A                  DW   CUR_ADR   
0ABC                          .ORG   CUR_ADR   
0ABC                          ;*Macro unroll:  DLOOP_POP
0ABC                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
0ABC                DLOOP_TOP:   .SET   DLOOP_2   
0ABC                DLOOP_2:   .SET   DLOOP_3   
0ABC                DLOOP_3:   .SET   DLOOP_4   
0ABC                DLOOP_4:   .SET   DLOOP_5   
0ABC                DLOOP_5:   .SET   DLOOP_6   
0ABC                DLOOP_6:   .SET   DLOOP_7   
0ABC                DLOOP_7:   .SET   DLOOP_8   
0ABC                DLOOP_8:   .SET   DLOOP_9   
0ABC                DLOOP_9:   .SET   DLOOP_10   
0ABC                DLOOP_10:   .SET   DLOOP_11   
0ABC                DLOOP_11:   .SET   DLOOP_12   
0ABC                DLOOP_12:   .SET   0   
0ABC   21 CD 82               LD   HL,wordBuf   ;calc length
0ABF   EB                     EX   DE,HL   
0AC0   B7                     OR   A   
0AC1   ED 52                  SBC   HL,DE   
0AC3                          ;*Macro unroll:  setTOS  H,L
0AC3   4D                     LD   C,L   
0AC4   44                     LD   B,H   
0AC5   C9                     RET      
0AC6                             ; 
0AC6                             ; toNumber -  converts string to number in the ***
0AC6                             ; base strored in VAR_BASE
0AC6                             ; 
0AC6                             ; params: HL = string address, BC = string length
0AC6                             ; returns: DE = parsed number, BC = 0: success, not 0, uparsed chars
0AC6                             ; destroys: AF
0AC6                             ; 
0AC6                TONUMBER:      
0AC6   FD E5                  PUSH   IY   ; save regs
0AC8   E5                     PUSH   HL   
0AC9   E5                     PUSH   HL   ; IY = HL
0ACA   FD E1                  POP   IY   
0ACC   11 00 00               LD   DE,0   ; 16 bit accum
0ACF   21 00 00               LD   HL,0   ; 8 bit char
0AD2                          ;*Macro unroll:  checkZeroWord B,C        ; if BC == 0 exit de = 0, BC = 0 (no error)
0AD2   79                     LD   A,C   ; if BC == 0 exit de = 0, BC = 0 (no error)
0AD3   B0                     OR   B   
0AD4                          ;*Macro unroll:  _if z              ; trying to parse a zero-length string is an error, But will return 0.
0AD4   CA DA 0A               JP   z,L_M_1307S97   ; trying to parse a zero-length string is an error, But will return 0.
0AD7   C3 D7 0A               JP   $   
0ADA                          ;*Macro unroll:  STRUC_PUSH $
0ADA                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0ADA                STRUC_12:   .SET   STRUC_11   
0ADA                STRUC_11:   .SET   STRUC_10   
0ADA                STRUC_10:   .SET   STRUC_9   
0ADA                STRUC_9:   .SET   STRUC_8   
0ADA                STRUC_8:   .SET   STRUC_7   
0ADA                STRUC_7:   .SET   STRUC_6   
0ADA                STRUC_6:   .SET   STRUC_5   
0ADA                STRUC_5:   .SET   STRUC_4   
0ADA                STRUC_4:   .SET   STRUC_3   
0ADA                STRUC_3:   .SET   STRUC_2   
0ADA                STRUC_2:   .SET   STRUC_TOP   
0ADA                STRUC_TOP:   .SET   $   
0ADA                L_M_1307S97:      
0ADA   E1                     POP   HL   
0ADB   FD E1                  POP   IY   
0ADD   C9                     RET      ; de = number, BC = err
0ADE                          ;*Macro unroll:  _endif
0ADE                          ;*Macro unroll:  STRUC_FWD
0ADE                CUR_ADR:   .SET   $   
0AD8                          .ORG   STRUC_TOP - 2   
0AD8   DE 0A                  DW   CUR_ADR   
0ADE                          .ORG   CUR_ADR   
0ADE                          ;*Macro unroll:  STRUC_POP
0ADE                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0ADE                STRUC_TOP:   .SET   STRUC_2   
0ADE                STRUC_2:   .SET   STRUC_3   
0ADE                STRUC_3:   .SET   STRUC_4   
0ADE                STRUC_4:   .SET   STRUC_5   
0ADE                STRUC_5:   .SET   STRUC_6   
0ADE                STRUC_6:   .SET   STRUC_7   
0ADE                STRUC_7:   .SET   STRUC_8   
0ADE                STRUC_8:   .SET   STRUC_9   
0ADE                STRUC_9:   .SET   STRUC_10   
0ADE                STRUC_10:   .SET   STRUC_11   
0ADE                STRUC_11:   .SET   STRUC_12   
0ADE                STRUC_12:   .SET   0   
0ADE                             ; Check if first character is "-".
0ADE   FD 7E 00               LD   A,(IY)   ; l = first character in string
0AE1   FD 23                  INC   IY   
0AE3   D5                     PUSH   DE   ; push 0 on stack
0AE4   FE 2D                  CP   "-"   ; negative number?
0AE6                          ;*Macro unroll:  _if z
0AE6   CA EC 0A               JP   z,L_M_1317S107   
0AE9   C3 E9 0A               JP   $   
0AEC                          ;*Macro unroll:  STRUC_PUSH $
0AEC                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0AEC                STRUC_12:   .SET   STRUC_11   
0AEC                STRUC_11:   .SET   STRUC_10   
0AEC                STRUC_10:   .SET   STRUC_9   
0AEC                STRUC_9:   .SET   STRUC_8   
0AEC                STRUC_8:   .SET   STRUC_7   
0AEC                STRUC_7:   .SET   STRUC_6   
0AEC                STRUC_6:   .SET   STRUC_5   
0AEC                STRUC_5:   .SET   STRUC_4   
0AEC                STRUC_4:   .SET   STRUC_3   
0AEC                STRUC_3:   .SET   STRUC_2   
0AEC                STRUC_2:   .SET   STRUC_TOP   
0AEC                STRUC_TOP:   .SET   $   
0AEC                L_M_1317S107:      
0AEC   D1                     POP   DE   
0AED   21 01 00               LD   HL,1   
0AF0   E5                     PUSH   HL   ; push <> 0 on stack, indicating negative
0AF1   0B                     DEC   BC   
0AF2                          ;*Macro unroll:  checkZeroWord B,C
0AF2   79                     LD   A,C   
0AF3   B0                     OR   B   
0AF4                          ;*Macro unroll:  _if z
0AF4   CA FA 0A               JP   z,L_M_1323S113   
0AF7   C3 F7 0A               JP   $   
0AFA                          ;*Macro unroll:  STRUC_PUSH $
0AFA                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0AFA                STRUC_12:   .SET   STRUC_11   
0AFA                STRUC_11:   .SET   STRUC_10   
0AFA                STRUC_10:   .SET   STRUC_9   
0AFA                STRUC_9:   .SET   STRUC_8   
0AFA                STRUC_8:   .SET   STRUC_7   
0AFA                STRUC_7:   .SET   STRUC_6   
0AFA                STRUC_6:   .SET   STRUC_5   
0AFA                STRUC_5:   .SET   STRUC_4   
0AFA                STRUC_4:   .SET   STRUC_3   
0AFA                STRUC_3:   .SET   STRUC_2   
0AFA                STRUC_2:   .SET   STRUC_TOP   
0AFA                STRUC_TOP:   .SET   $   
0AFA                L_M_1323S113:      
0AFA   E1                     POP   HL   ; error: string is only "-".
0AFB   01 01 00               LD   BC,1   
0AFE   E1                     POP   HL   
0AFF   FD E1                  POP   IY   
0B01   C9                     RET      ; de = number, BC = err
0B02                          ;*Macro unroll:  _endif
0B02                          ;*Macro unroll:  STRUC_FWD
0B02                CUR_ADR:   .SET   $   
0AF8                          .ORG   STRUC_TOP - 2   
0AF8   02 0B                  DW   CUR_ADR   
0B02                          .ORG   CUR_ADR   
0B02                          ;*Macro unroll:  STRUC_POP
0B02                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0B02                STRUC_TOP:   .SET   STRUC_2   
0B02                STRUC_2:   .SET   STRUC_3   
0B02                STRUC_3:   .SET   STRUC_4   
0B02                STRUC_4:   .SET   STRUC_5   
0B02                STRUC_5:   .SET   STRUC_6   
0B02                STRUC_6:   .SET   STRUC_7   
0B02                STRUC_7:   .SET   STRUC_8   
0B02                STRUC_8:   .SET   STRUC_9   
0B02                STRUC_9:   .SET   STRUC_10   
0B02                STRUC_10:   .SET   STRUC_11   
0B02                STRUC_11:   .SET   STRUC_12   
0B02                STRUC_12:   .SET   0   
0B02                             ; Loop reading digits.
0B02   C5                     PUSH   BC   
0B03   ED 4B 5B 84            LD   BC,(VAR_BASE)   ; get BASE (in %dl)
0B07   CD 36 04               CALL   unsignedMultiply   ; de *= BASE, HL is destroyed
0B0A   C1                     POP   BC   
0B0B   FD 7E 00               LD   A,(IY)   ; a = next character in string
0B0E   FD 23                  INC   IY   
0B10                          ;*Macro unroll:  _endif
0B10                          ;*Macro unroll:  STRUC_FWD
0B10                CUR_ADR:   .SET   $   
0AEA                          .ORG   STRUC_TOP - 2   
0AEA   10 0B                  DW   CUR_ADR   
0B10                          .ORG   CUR_ADR   
0B10                          ;*Macro unroll:  STRUC_POP
0B10                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0B10                STRUC_TOP:   .SET   STRUC_2   
0B10                STRUC_2:   .SET   STRUC_3   
0B10                STRUC_3:   .SET   STRUC_4   
0B10                STRUC_4:   .SET   STRUC_5   
0B10                STRUC_5:   .SET   STRUC_6   
0B10                STRUC_6:   .SET   STRUC_7   
0B10                STRUC_7:   .SET   STRUC_8   
0B10                STRUC_8:   .SET   STRUC_9   
0B10                STRUC_9:   .SET   STRUC_10   
0B10                STRUC_10:   .SET   STRUC_11   
0B10                STRUC_11:   .SET   STRUC_12   
0B10                STRUC_12:   .SET   0   
0B10                             ; Convert 0-9, A-z to a number 0-35.
0B10                          ;*Macro unroll:  _do
0B10   18 03                  JR   L_M_1339S130   
0B12   C3 12 0B               JP   $   
0B15                          ;*Macro unroll:  DLOOP_PUSH $
0B15                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
0B15                DLOOP_12:   .SET   DLOOP_11   
0B15                DLOOP_11:   .SET   DLOOP_10   
0B15                DLOOP_10:   .SET   DLOOP_9   
0B15                DLOOP_9:   .SET   DLOOP_8   
0B15                DLOOP_8:   .SET   DLOOP_7   
0B15                DLOOP_7:   .SET   DLOOP_6   
0B15                DLOOP_6:   .SET   DLOOP_5   
0B15                DLOOP_5:   .SET   DLOOP_4   
0B15                DLOOP_4:   .SET   DLOOP_3   
0B15                DLOOP_3:   .SET   DLOOP_2   
0B15                DLOOP_2:   .SET   DLOOP_TOP   
0B15                DLOOP_TOP:   .SET   $   
0B15                L_M_1339S130:      
0B15   D6 30                  SUB   "0"   ; < "0"?
0B17   38 33                  JR   c,toNumberExit   ; invalid char, end of number
0B19   FE 0A                  CP   10   ; <= "9"?
0B1B                          ;*Macro unroll:  _if nc
0B1B   D2 21 0B               JP   nc,L_M_1343S134   
0B1E   C3 1E 0B               JP   $   
0B21                          ;*Macro unroll:  STRUC_PUSH $
0B21                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0B21                STRUC_12:   .SET   STRUC_11   
0B21                STRUC_11:   .SET   STRUC_10   
0B21                STRUC_10:   .SET   STRUC_9   
0B21                STRUC_9:   .SET   STRUC_8   
0B21                STRUC_8:   .SET   STRUC_7   
0B21                STRUC_7:   .SET   STRUC_6   
0B21                STRUC_6:   .SET   STRUC_5   
0B21                STRUC_5:   .SET   STRUC_4   
0B21                STRUC_4:   .SET   STRUC_3   
0B21                STRUC_3:   .SET   STRUC_2   
0B21                STRUC_2:   .SET   STRUC_TOP   
0B21                STRUC_TOP:   .SET   $   
0B21                L_M_1343S134:      
0B21   D6 11                  SUB   17   ; < "A"? (17 is "A"-"0")
0B23                          ;*Macro unroll:  _until c            ; BUG: nested until !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
0B23   DA 12 0B               JP   c,DLOOP_TOP - 3   ; BUG: nested until !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
0B26                          ;*Macro unroll:  DLOOP_FWD               ; needed?
0B26                CUR_ADR:   .SET   $   ; needed?
0B13                          .ORG   DLOOP_TOP - 2   
0B13   26 0B                  DW   CUR_ADR   
0B26                          .ORG   CUR_ADR   
0B26   C6 0A                  ADD   a,10   
0B28                          ;*Macro unroll:  _endif
0B28                          ;*Macro unroll:  STRUC_FWD
0B28                CUR_ADR:   .SET   $   
0B1F                          .ORG   STRUC_TOP - 2   
0B1F   28 0B                  DW   CUR_ADR   
0B28                          .ORG   CUR_ADR   
0B28                          ;*Macro unroll:  STRUC_POP
0B28                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0B28                STRUC_TOP:   .SET   STRUC_2   
0B28                STRUC_2:   .SET   STRUC_3   
0B28                STRUC_3:   .SET   STRUC_4   
0B28                STRUC_4:   .SET   STRUC_5   
0B28                STRUC_5:   .SET   STRUC_6   
0B28                STRUC_6:   .SET   STRUC_7   
0B28                STRUC_7:   .SET   STRUC_8   
0B28                STRUC_8:   .SET   STRUC_9   
0B28                STRUC_9:   .SET   STRUC_10   
0B28                STRUC_10:   .SET   STRUC_11   
0B28                STRUC_11:   .SET   STRUC_12   
0B28                STRUC_12:   .SET   0   
0B28   2A 5B 84               LD   HL,(VAR_BASE)   ; get BASE (in %dl)
0B2B   BD                     CP   L   ; >= BASE? then invalid char, end of number
0B2C                          ;*Macro unroll:  _until nc
0B2C   D2 12 0B               JP   nc,DLOOP_TOP - 3   
0B2F                          ;*Macro unroll:  DLOOP_FWD               ; needed?
0B2F                CUR_ADR:   .SET   $   ; needed?
0B13                          .ORG   DLOOP_TOP - 2   
0B13   2F 0B                  DW   CUR_ADR   
0B2F                          .ORG   CUR_ADR   
0B2F   83                     ADD   A,E   
0B30   5F                     LD   E,A   
0B31   3E 00                  LD   A,0   
0B33   8A                     ADC   a,d   
0B34   57                     LD   D,A   
0B35   0B                     DEC   BC   ; dec char count
0B36                          ;*Macro unroll:  checkZeroWord B,C
0B36   79                     LD   A,C   
0B37   B0                     OR   B   
0B38                          ;*Macro unroll:  _until z
0B38   CA 12 0B               JP   z,DLOOP_TOP - 3   
0B3B                          ;*Macro unroll:  DLOOP_FWD               ; needed?
0B3B                CUR_ADR:   .SET   $   ; needed?
0B13                          .ORG   DLOOP_TOP - 2   
0B13   3B 0B                  DW   CUR_ADR   
0B3B                          .ORG   CUR_ADR   
0B3B   C5                     PUSH   BC   
0B3C   ED 4B 5B 84            LD   BC,(VAR_BASE)   ; get BASE (in %dl)
0B40   CD 36 04               CALL   unsignedMultiply   ; de *= BASE, HL is destroyed
0B43   C1                     POP   BC   
0B44   FD 7E 00               LD   A,(IY)   ; a = next character in string
0B47   FD 23                  INC   IY   
0B49                          ;*Macro unroll:  _enddo
0B49   C3 15 0B               JP   DLOOP_TOP   
0B4C                          ;*Macro unroll:  DLOOP_FWD
0B4C                CUR_ADR:   .SET   $   
0B13                          .ORG   DLOOP_TOP - 2   
0B13   4C 0B                  DW   CUR_ADR   
0B4C                          .ORG   CUR_ADR   
0B4C                          ;*Macro unroll:  DLOOP_POP
0B4C                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
0B4C                DLOOP_TOP:   .SET   DLOOP_2   
0B4C                DLOOP_2:   .SET   DLOOP_3   
0B4C                DLOOP_3:   .SET   DLOOP_4   
0B4C                DLOOP_4:   .SET   DLOOP_5   
0B4C                DLOOP_5:   .SET   DLOOP_6   
0B4C                DLOOP_6:   .SET   DLOOP_7   
0B4C                DLOOP_7:   .SET   DLOOP_8   
0B4C                DLOOP_8:   .SET   DLOOP_9   
0B4C                DLOOP_9:   .SET   DLOOP_10   
0B4C                DLOOP_10:   .SET   DLOOP_11   
0B4C                DLOOP_11:   .SET   DLOOP_12   
0B4C                DLOOP_12:   .SET   0   
0B4C                TONUMBEREXIT:      
0B4C   E1                     POP   HL   
0B4D                          ;*Macro unroll:  checkZeroWord H,L
0B4D   7D                     LD   A,L   
0B4E   B4                     OR   H   
0B4F                          ;*Macro unroll:  _if nz              ; if not -ve then skip
0B4F   C2 55 0B               JP   nz,L_M_1369S163   ; if not -ve then skip
0B52   C3 52 0B               JP   $   
0B55                          ;*Macro unroll:  STRUC_PUSH $
0B55                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0B55                STRUC_12:   .SET   STRUC_11   
0B55                STRUC_11:   .SET   STRUC_10   
0B55                STRUC_10:   .SET   STRUC_9   
0B55                STRUC_9:   .SET   STRUC_8   
0B55                STRUC_8:   .SET   STRUC_7   
0B55                STRUC_7:   .SET   STRUC_6   
0B55                STRUC_6:   .SET   STRUC_5   
0B55                STRUC_5:   .SET   STRUC_4   
0B55                STRUC_4:   .SET   STRUC_3   
0B55                STRUC_3:   .SET   STRUC_2   
0B55                STRUC_2:   .SET   STRUC_TOP   
0B55                STRUC_TOP:   .SET   $   
0B55                L_M_1369S163:      
0B55   EB                     EX   DE,HL   ; negate de
0B56   CD D3 03               CALL   negateNum   
0B59   EB                     EX   DE,HL   
0B5A                          ;*Macro unroll:  _endif
0B5A                          ;*Macro unroll:  STRUC_FWD
0B5A                CUR_ADR:   .SET   $   
0B53                          .ORG   STRUC_TOP - 2   
0B53   5A 0B                  DW   CUR_ADR   
0B5A                          .ORG   CUR_ADR   
0B5A                          ;*Macro unroll:  STRUC_POP
0B5A                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0B5A                STRUC_TOP:   .SET   STRUC_2   
0B5A                STRUC_2:   .SET   STRUC_3   
0B5A                STRUC_3:   .SET   STRUC_4   
0B5A                STRUC_4:   .SET   STRUC_5   
0B5A                STRUC_5:   .SET   STRUC_6   
0B5A                STRUC_6:   .SET   STRUC_7   
0B5A                STRUC_7:   .SET   STRUC_8   
0B5A                STRUC_8:   .SET   STRUC_9   
0B5A                STRUC_9:   .SET   STRUC_10   
0B5A                STRUC_10:   .SET   STRUC_11   
0B5A                STRUC_11:   .SET   STRUC_12   
0B5A                STRUC_12:   .SET   0   
0B5A   E1                     POP   HL   
0B5B   FD E1                  POP   IY   
0B5D   C9                     RET      ; de = number, BC = err
0B5E                          ;*Macro unroll: CODE "number",6,0,NUMBER         ; ( ptr len -- num err )
0B5E                HEADER_NUMBER:      ; ( ptr len -- num err )
0B5E   3F 0A                  DW   link   
0B60                LINK:     .SET   HEADER_NUMBER   
0B60   06                     DB   0 + 6   
0B61   6E 75 6D 62 65 72      DB   "number"   
0B67                NUMBER:      
0B67                          ;*Macro unroll:  PNIP H,L
0B67   DD 2B                  DEC   IX   
0B69   DD 66 00               LD   H,(IX+0)   
0B6C   DD 2B                  DEC   IX   
0B6E   DD 6E 00               LD   L,(IX+0)   
0B71   CD C6 0A               CALL   toNumber   ; params: HL = string address, BC = string length
0B74                             ; Returns the parsed number in DE,
0B74                             ; BC = 0, success
0B74                          ;*Macro unroll:  PTUCK D,E
0B74   DD 73 00               LD   (IX+0),E   
0B77   DD 23                  INC   IX   
0B79   DD 72 00               LD   (IX+0),D   
0B7C   DD 23                  INC   IX   
0B7E                          ;*Macro unroll:  NEXT
0B7E   C3 4A 0F               JP   enter   
0B81                          ;*Macro unroll: CODE "decimal",7,0,decimal           ; pushes ptr to string and length on stack
0B81                HEADER_DECIMAL:      ; pushes ptr to string and length on stack
0B81   5E 0B                  DW   link   
0B83                LINK:     .SET   HEADER_decimal   
0B83   07                     DB   0 + 7   
0B84   64 65 63 69 6D 61 6C   DB   "decimal"   
0B8B                DECIMAL:      
0B8B                          ;*Macro unroll:  ENTER
0B8B   CF                     RST   $08   
0B8C   AD 12 0A 00 9D 09 6D 0F DW   LIT,10,base,STORE   
0B94                          ;*Macro unroll:  EXIT
0B94   5B 0F                  DW   exit   
0B96   C3 4A 0F               JP   enter   
0B99                          ;*Macro unroll: CODE "hex",3,0,hex                   ; pushes ptr to string and length on stack
0B99                HEADER_HEX:      ; pushes ptr to string and length on stack
0B99   81 0B                  DW   link   
0B9B                LINK:     .SET   HEADER_hex   
0B9B   03                     DB   0 + 3   
0B9C   68 65 78               DB   "hex"   
0B9F                HEX:         
0B9F                          ;*Macro unroll:  ENTER
0B9F   CF                     RST   $08   
0BA0   AD 12 10 00 9D 09 6D 0F DW   LIT,16,base,STORE   
0BA8                          ;*Macro unroll:  EXIT
0BA8   5B 0F                  DW   exit   
0BAA   C3 4A 0F               JP   enter   
0BAD                          ;*Macro unroll: CODE "execute",7,0,EXECUTE
0BAD                HEADER_EXECUTE:      
0BAD   99 0B                  DW   link   
0BAF                LINK:     .SET   HEADER_EXECUTE   
0BAF   07                     DB   0 + 7   
0BB0   65 78 65 63 75 74 65   DB   "execute"   
0BB7                EXECUTE:      
0BB7                          ;*Macro unroll:  PPOP H,L                        ; POP TOS into HL
0BB7                          ;*Macro unroll:  getTOS H,L
0BB7   69                     LD   L,C   
0BB8   60                     LD   H,B   
0BB9                          ;*Macro unroll:  PDROP
0BB9                          ;*Macro unroll:  PNIP B,C
0BB9   DD 2B                  DEC   IX   
0BBB   DD 46 00               LD   B,(IX+0)   
0BBE   DD 2B                  DEC   IX   
0BC0   DD 4E 00               LD   C,(IX+0)   
0BC3   E9                     JP   (hl)   ; go do Forth word
0BC4                          ;*Macro unroll: CODE "interpret",6,0,INTERPRET
0BC4                HEADER_INTERPRET:      
0BC4   AD 0B                  DW   link   
0BC6                LINK:     .SET   HEADER_INTERPRET   
0BC6   06                     DB   0 + 6   
0BC7   69 6E 74 65 72 70 72 65 74 DB   "interpret"   
0BD0                INTERPRET:      
0BD0                          ;*Macro unroll:  ENTER
0BD0   CF                     RST   $08   
0BD1                INTERPRET1:      
0BD1   CC 0E C2 0C FA 13      DW   bl,word,count   ; pstr -- ptr len
0BD7   2E 13 72 03            DW   DUPP,zEqual   
0BDB   12 08 E8 0B            DW   QBRAN,INTERPRET2   
0BDF   62 13 62 13            DW   drop,drop   ; ptr len --
0BE3                          ;*Macro unroll:  EXIT
0BE3   5B 0F                  DW   exit   
0BE5   C3 4A 0F               JP   enter   
0BE8                INTERPRET2:      
0BE8   F3 0B                  DW   interpToken   ; interpret the next word
0BEA   2F 08 D1 0B            DW   BRAN,INTERPRET1   
0BEE                          ;*Macro unroll:  EXIT
0BEE   5B 0F                  DW   exit   
0BF0   C3 4A 0F               JP   enter   
0BF3                INTERPTOKEN:      ; ptr len --
0BF3                          ;*Macro unroll:  ENTER
0BF3   CF                     RST   $08   
0BF4   76 13 76 13 C8 0D      DW   over,over,find   ; ptr len -- ptr len addr
0BFA   2E 13 87 03            DW   DUPP,ZNEQU   
0BFE   12 08 08 0C            DW   QBRAN,interpToken1   
0C02   0F 0C                  DW   interpWord   
0C04   2F 08 0A 0C            DW   BRAN,interpToken2   
0C08                INTERPTOKEN1:      
0C08   53 0C                  DW   interpLiteral   
0C0A                INTERPTOKEN2:      
0C0A                          ;*Macro unroll:  EXIT
0C0A   5B 0F                  DW   exit   
0C0C   C3 4A 0F               JP   enter   
0C0F                INTERPWORD:      ; ptr len addr --
0C0F                          ;*Macro unroll:  ENTER                                 ; enter forth
0C0F   CF                     RST   $08   ; enter forth
0C10   42 13 62 13 42 13 62 13 DW   swap,drop,swap,drop   ; ptr len addr -- addr
0C18   2E 13 AD 12 02 00 E8 00 BB 0F DW   DUPP,LIT,2,plus,CAT   ; ( headptr -- headptr flags ) add 2 to headptr
0C22   AD 12 80 00 A0 00      DW   LIT,IMMED,ANDD   ; ( headptr flags -- headptr immedflag )
0C28   72 03                  DW   zEqual   
0C2A   12 08 4A 0C            DW   QBRAN,interpWord2   
0C2E   16 0E                  DW   tcfa   ; ( headptr -- xt )
0C30   56 09 8E 0F            DW   state,AT   
0C34   70 09 8E 0F            DW   nesting,AT   
0C38   B8 00                  DW   ORR   
0C3A   12 08 44 0C            DW   QBRAN,interpWord1   
0C3E   5A 10                  DW   comma   ; compile xt
0C40   2F 08 4E 0C            DW   BRAN,interpWord3   
0C44                INTERPWORD1:      
0C44   B7 0B                  DW   execute   ; execute xt
0C46   2F 08 4E 0C            DW   BRAN,interpWord3   
0C4A                INTERPWORD2:      
0C4A   16 0E B7 0B            DW   tcfa,execute   ; execute xt
0C4E                INTERPWORD3:      
0C4E                          ;*Macro unroll:  EXIT
0C4E   5B 0F                  DW   exit   
0C50   C3 4A 0F               JP   enter   
0C53                INTERPLITERAL:      ; ptr len addr --
0C53                          ;*Macro unroll:  ENTER                                 ; enter forth
0C53   CF                     RST   $08   ; enter forth
0C54   62 13                  DW   drop   ; ptr len addr - ptr len
0C56   67 0B 72 03            DW   number,zEqual   ; parse to number
0C5A   12 08 78 0C            DW   QBRAN,interpLiteral1   
0C5E   56 09 8E 0F            DW   state,AT   
0C62   70 09 8E 0F            DW   nesting,AT   
0C66   B8 00                  DW   ORR   
0C68   12 08 8D 0C            DW   QBRAN,interpLiteral2   
0C6C   AD 12 AD 12            DW   LIT,LIT   ; (val -- val "LIT" )
0C70   5A 10 5A 10            DW   comma,comma   ; compile "LIT" val
0C74   2F 08 8D 0C            DW   BRAN,interpLiteral2   
0C78                INTERPLITERAL1:      
0C78   62 13                  DW   drop   ; ( ptr len zero -- ptr len ), not found
0C7A   E0 13                  DW   litstr   ; err != 0, parse error
0C7C   0E 45 72 72 6F 72 3A 20 70 61 72 73 69 6E 67 .PSTR   "Error: parsing"   
0C8B   33 0E                  DW   type   
0C8D                INTERPLITERAL2:      
0C8D                          ;*Macro unroll:  EXIT
0C8D   5B 0F                  DW   exit   
0C8F   C3 4A 0F               JP   enter   
0C92                NESTPLUS:      
0C92   2A 57 84               LD   HL,(VAR_NESTING)   
0C95   23                     INC   HL   
0C96   22 57 84               LD   (VAR_NESTING),HL   
0C99                          ;*Macro unroll:  NEXT
0C99   C3 4A 0F               JP   enter   
0C9C                NESTMINUS:      
0C9C   2A 57 84               LD   HL,(VAR_NESTING)   
0C9F   2B                     DEC   HL   
0CA0   22 57 84               LD   (VAR_NESTING),HL   
0CA3                          ;*Macro unroll:  NEXT
0CA3   C3 4A 0F               JP   enter   
0CA6                          ;*Macro unroll: CODE "quit",4,0,quit
0CA6                HEADER_QUIT:      
0CA6   C4 0B                  DW   link   
0CA8                LINK:     .SET   HEADER_quit   
0CA8   04                     DB   0 + 4   
0CA9   71 75 69 74            DB   "quit"   
0CAD                QUIT:        
0CAD                          ;*Macro unroll:  ENTER
0CAD   CF                     RST   $08   
0CAE   86 09 8E 0F 1E 10      DW   sp0,AT,spStore   
0CB4   D0 0B                  DW   interpret   
0CB6                          ;*Macro unroll:  EXIT
0CB6   5B 0F                  DW   exit   
0CB8   C3 4A 0F               JP   enter   
0CBB                          ;*Macro unroll: CODE "word",4,0,WORD                 ; delim -- c-addr
0CBB                HEADER_WORD:      ; delim -- c-addr
0CBB   A6 0C                  DW   link   
0CBD                LINK:     .SET   HEADER_WORD   
0CBD   04                     DB   0 + 4   
0CBE   77 6F 72 64            DB   "word"   
0CC2                WORD:        
0CC2                          ;*Macro unroll:  ENTER
0CC2   CF                     RST   $08   
0CC3   AD 12 40 00            DW   LIT,64   ; limit
0CC7   22 09 8E 0F            DW   here,AT   
0CCB   DA 0C                  DW   xword   ; writes to HERE!
0CCD                          ;*Macro unroll:  EXIT
0CCD   5B 0F                  DW   exit   
0CCF   C3 4A 0F               JP   enter   
0CD2                          ;*Macro unroll: CODE "xword",5,0,xword               ; delim limit addr -- c-addr
0CD2                HEADER_XWORD:      ; delim limit addr -- c-addr
0CD2   BB 0C                  DW   link   
0CD4                LINK:     .SET   HEADER_xword   
0CD4   05                     DB   0 + 5   
0CD5   78 77 6F 72 64         DB   "xword"   
0CDA                XWORD:       
0CDA   CD E3 0C               CALL   xwordSkip   
0CDD   CD 77 0D               CALL   xwordRead   
0CE0                          ;*Macro unroll:  NEXT
0CE0   C3 4A 0F               JP   enter   
0CE3                XWORDSKIP:      ; delim addr -- delim addr char
0CE3                          ;*Macro unroll:  PPOP H,L
0CE3                          ;*Macro unroll:  getTOS H,L
0CE3   69                     LD   L,C   
0CE4   60                     LD   H,B   
0CE5                          ;*Macro unroll:  PDROP
0CE5                          ;*Macro unroll:  PNIP B,C
0CE5   DD 2B                  DEC   IX   
0CE7   DD 46 00               LD   B,(IX+0)   
0CEA   DD 2B                  DEC   IX   
0CEC   DD 4E 00               LD   C,(IX+0)   
0CEF                          ;*Macro unroll:  PPOP D,E
0CEF                          ;*Macro unroll:  getTOS D,E
0CEF   59                     LD   E,C   
0CF0   50                     LD   D,B   
0CF1                          ;*Macro unroll:  PDROP
0CF1                          ;*Macro unroll:  PNIP B,C
0CF1   DD 2B                  DEC   IX   
0CF3   DD 46 00               LD   B,(IX+0)   
0CF6   DD 2B                  DEC   IX   
0CF8   DD 4E 00               LD   C,(IX+0)   
0CFB                          ;*Macro unroll:  PDUP
0CFB                          ;*Macro unroll:  PTUCK B,C
0CFB   DD 71 00               LD   (IX+0),C   
0CFE   DD 23                  INC   IX   
0D00   DD 70 00               LD   (IX+0),B   
0D03   DD 23                  INC   IX   
0D05                          ;*Macro unroll:  PTUCK D,E
0D05   DD 73 00               LD   (IX+0),E   
0D08   DD 23                  INC   IX   
0D0A   DD 72 00               LD   (IX+0),D   
0D0D   DD 23                  INC   IX   
0D0F                          ;*Macro unroll:  PTUCK H,L
0D0F   DD 75 00               LD   (IX+0),L   
0D12   DD 23                  INC   IX   
0D14   DD 74 00               LD   (IX+0),H   
0D17   DD 23                  INC   IX   
0D19                          ;*Macro unroll:  _do
0D19   18 03                  JR   L_M_1489S108   
0D1B   C3 1B 0D               JP   $   
0D1E                          ;*Macro unroll:  DLOOP_PUSH $
0D1E                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
0D1E                DLOOP_12:   .SET   DLOOP_11   
0D1E                DLOOP_11:   .SET   DLOOP_10   
0D1E                DLOOP_10:   .SET   DLOOP_9   
0D1E                DLOOP_9:   .SET   DLOOP_8   
0D1E                DLOOP_8:   .SET   DLOOP_7   
0D1E                DLOOP_7:   .SET   DLOOP_6   
0D1E                DLOOP_6:   .SET   DLOOP_5   
0D1E                DLOOP_5:   .SET   DLOOP_4   
0D1E                DLOOP_4:   .SET   DLOOP_3   
0D1E                DLOOP_3:   .SET   DLOOP_2   
0D1E                DLOOP_2:   .SET   DLOOP_TOP   
0D1E                DLOOP_TOP:   .SET   $   
0D1E                L_M_1489S108:      
0D1E   CD 48 12               CALL   getKey   ; get next key, returned in A
0D21                          ;*Macro unroll:  _switch
0D21   18 03                  JR   L_M_1491S111   
0D23   C3 23 0D               JP   $   
0D26                          ;*Macro unroll:  STRUC_PUSH $
0D26                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0D26                STRUC_12:   .SET   STRUC_11   
0D26                STRUC_11:   .SET   STRUC_10   
0D26                STRUC_10:   .SET   STRUC_9   
0D26                STRUC_9:   .SET   STRUC_8   
0D26                STRUC_8:   .SET   STRUC_7   
0D26                STRUC_7:   .SET   STRUC_6   
0D26                STRUC_6:   .SET   STRUC_5   
0D26                STRUC_5:   .SET   STRUC_4   
0D26                STRUC_4:   .SET   STRUC_3   
0D26                STRUC_3:   .SET   STRUC_2   
0D26                STRUC_2:   .SET   STRUC_TOP   
0D26                STRUC_TOP:   .SET   $   
0D26                L_M_1491S111:      
0D26   CB 7F                  BIT   7,A   ; check end of input
0D28                          ;*Macro unroll:  _if nz
0D28   C2 2E 0D               JP   nz,L_M_1493S114   
0D2B   C3 2B 0D               JP   $   
0D2E                          ;*Macro unroll:  STRUC_PUSH $
0D2E                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0D2E                STRUC_12:   .SET   STRUC_11   
0D2E                STRUC_11:   .SET   STRUC_10   
0D2E                STRUC_10:   .SET   STRUC_9   
0D2E                STRUC_9:   .SET   STRUC_8   
0D2E                STRUC_8:   .SET   STRUC_7   
0D2E                STRUC_7:   .SET   STRUC_6   
0D2E                STRUC_6:   .SET   STRUC_5   
0D2E                STRUC_5:   .SET   STRUC_4   
0D2E                STRUC_4:   .SET   STRUC_3   
0D2E                STRUC_3:   .SET   STRUC_2   
0D2E                STRUC_2:   .SET   STRUC_TOP   
0D2E                STRUC_TOP:   .SET   $   
0D2E                L_M_1493S114:      
0D2E   36 00                  LD   (HL),0   
0D30   3E 00                  LD   A,0   
0D32                          ;*Macro unroll:  _break
0D32   C3 1B 0D               JP   DLOOP_TOP - 3   
0D35                          ;*Macro unroll:  _endif
0D35                          ;*Macro unroll:  STRUC_FWD
0D35                CUR_ADR:   .SET   $   
0D2C                          .ORG   STRUC_TOP - 2   
0D2C   35 0D                  DW   CUR_ADR   
0D35                          .ORG   CUR_ADR   
0D35                          ;*Macro unroll:  STRUC_POP
0D35                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0D35                STRUC_TOP:   .SET   STRUC_2   
0D35                STRUC_2:   .SET   STRUC_3   
0D35                STRUC_3:   .SET   STRUC_4   
0D35                STRUC_4:   .SET   STRUC_5   
0D35                STRUC_5:   .SET   STRUC_6   
0D35                STRUC_6:   .SET   STRUC_7   
0D35                STRUC_7:   .SET   STRUC_8   
0D35                STRUC_8:   .SET   STRUC_9   
0D35                STRUC_9:   .SET   STRUC_10   
0D35                STRUC_10:   .SET   STRUC_11   
0D35                STRUC_11:   .SET   STRUC_12   
0D35                STRUC_12:   .SET   0   
0D35   FE 5C                  CP   $5C   ; \ start of a comment?
0D37                          ;*Macro unroll:  _case z                     ; if yes skip to end of line
0D37   CA 3D 0D               JP   z,L_M_1499S121   ; if yes skip to end of line
0D3A   C3 3A 0D               JP   $   
0D3D                          ;*Macro unroll:  STRUC_PUSH $
0D3D                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0D3D                STRUC_12:   .SET   STRUC_11   
0D3D                STRUC_11:   .SET   STRUC_10   
0D3D                STRUC_10:   .SET   STRUC_9   
0D3D                STRUC_9:   .SET   STRUC_8   
0D3D                STRUC_8:   .SET   STRUC_7   
0D3D                STRUC_7:   .SET   STRUC_6   
0D3D                STRUC_6:   .SET   STRUC_5   
0D3D                STRUC_5:   .SET   STRUC_4   
0D3D                STRUC_4:   .SET   STRUC_3   
0D3D                STRUC_3:   .SET   STRUC_2   
0D3D                STRUC_2:   .SET   STRUC_TOP   
0D3D                STRUC_TOP:   .SET   $   
0D3D                L_M_1499S121:      
0D3D                          ;*Macro unroll:  _do
0D3D   18 03                  JR   L_M_1500S122   
0D3F   C3 3F 0D               JP   $   
0D42                          ;*Macro unroll:  DLOOP_PUSH $
0D42                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
0D42                DLOOP_12:   .SET   DLOOP_11   
0D42                DLOOP_11:   .SET   DLOOP_10   
0D42                DLOOP_10:   .SET   DLOOP_9   
0D42                DLOOP_9:   .SET   DLOOP_8   
0D42                DLOOP_8:   .SET   DLOOP_7   
0D42                DLOOP_7:   .SET   DLOOP_6   
0D42                DLOOP_6:   .SET   DLOOP_5   
0D42                DLOOP_5:   .SET   DLOOP_4   
0D42                DLOOP_4:   .SET   DLOOP_3   
0D42                DLOOP_3:   .SET   DLOOP_2   
0D42                DLOOP_2:   .SET   DLOOP_TOP   
0D42                DLOOP_TOP:   .SET   $   
0D42                L_M_1500S122:      
0D42   CD 48 12               CALL   getKey   
0D45   FE 0D                  CP   "\r"   ; end of line yet?
0D47                          ;*Macro unroll:  _if nz
0D47   C2 4D 0D               JP   nz,L_M_1503S125   
0D4A   C3 4A 0D               JP   $   
0D4D                          ;*Macro unroll:  STRUC_PUSH $
0D4D                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0D4D                STRUC_12:   .SET   STRUC_11   
0D4D                STRUC_11:   .SET   STRUC_10   
0D4D                STRUC_10:   .SET   STRUC_9   
0D4D                STRUC_9:   .SET   STRUC_8   
0D4D                STRUC_8:   .SET   STRUC_7   
0D4D                STRUC_7:   .SET   STRUC_6   
0D4D                STRUC_6:   .SET   STRUC_5   
0D4D                STRUC_5:   .SET   STRUC_4   
0D4D                STRUC_4:   .SET   STRUC_3   
0D4D                STRUC_3:   .SET   STRUC_2   
0D4D                STRUC_2:   .SET   STRUC_TOP   
0D4D                STRUC_TOP:   .SET   $   
0D4D                L_M_1503S125:      
0D4D   FE 0A                  CP   "\n"   ; end of line yet?
0D4F                          ;*Macro unroll:  _endif
0D4F                          ;*Macro unroll:  STRUC_FWD
0D4F                CUR_ADR:   .SET   $   
0D4B                          .ORG   STRUC_TOP - 2   
0D4B   4F 0D                  DW   CUR_ADR   
0D4F                          .ORG   CUR_ADR   
0D4F                          ;*Macro unroll:  STRUC_POP
0D4F                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0D4F                STRUC_TOP:   .SET   STRUC_2   
0D4F                STRUC_2:   .SET   STRUC_3   
0D4F                STRUC_3:   .SET   STRUC_4   
0D4F                STRUC_4:   .SET   STRUC_5   
0D4F                STRUC_5:   .SET   STRUC_6   
0D4F                STRUC_6:   .SET   STRUC_7   
0D4F                STRUC_7:   .SET   STRUC_8   
0D4F                STRUC_8:   .SET   STRUC_9   
0D4F                STRUC_9:   .SET   STRUC_10   
0D4F                STRUC_10:   .SET   STRUC_11   
0D4F                STRUC_11:   .SET   STRUC_12   
0D4F                STRUC_12:   .SET   0   
0D4F                          ;*Macro unroll:  _until z
0D4F   CA 3F 0D               JP   z,DLOOP_TOP - 3   
0D52                          ;*Macro unroll:  DLOOP_FWD               ; needed?
0D52                CUR_ADR:   .SET   $   ; needed?
0D40                          .ORG   DLOOP_TOP - 2   
0D40   52 0D                  DW   CUR_ADR   
0D52                          .ORG   CUR_ADR   
0D52                          ;*Macro unroll:  _enddo
0D52   C3 42 0D               JP   DLOOP_TOP   
0D55                          ;*Macro unroll:  DLOOP_FWD
0D55                CUR_ADR:   .SET   $   
0D40                          .ORG   DLOOP_TOP - 2   
0D40   55 0D                  DW   CUR_ADR   
0D55                          .ORG   CUR_ADR   
0D55                          ;*Macro unroll:  DLOOP_POP
0D55                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
0D55                DLOOP_TOP:   .SET   DLOOP_2   
0D55                DLOOP_2:   .SET   DLOOP_3   
0D55                DLOOP_3:   .SET   DLOOP_4   
0D55                DLOOP_4:   .SET   DLOOP_5   
0D55                DLOOP_5:   .SET   DLOOP_6   
0D55                DLOOP_6:   .SET   DLOOP_7   
0D55                DLOOP_7:   .SET   DLOOP_8   
0D55                DLOOP_8:   .SET   DLOOP_9   
0D55                DLOOP_9:   .SET   DLOOP_10   
0D55                DLOOP_10:   .SET   DLOOP_11   
0D55                DLOOP_11:   .SET   DLOOP_12   
0D55                DLOOP_12:   .SET   0   
0D55                          ;*Macro unroll:  _endcase
0D55   C3 23 0D               JP   STRUC_2 - 3   
0D58                          ;*Macro unroll:  STRUC_FWD
0D58                CUR_ADR:   .SET   $   
0D3B                          .ORG   STRUC_TOP - 2   
0D3B   58 0D                  DW   CUR_ADR   
0D58                          .ORG   CUR_ADR   
0D58                          ;*Macro unroll:  STRUC_POP
0D58                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0D58                STRUC_TOP:   .SET   STRUC_2   
0D58                STRUC_2:   .SET   STRUC_3   
0D58                STRUC_3:   .SET   STRUC_4   
0D58                STRUC_4:   .SET   STRUC_5   
0D58                STRUC_5:   .SET   STRUC_6   
0D58                STRUC_6:   .SET   STRUC_7   
0D58                STRUC_7:   .SET   STRUC_8   
0D58                STRUC_8:   .SET   STRUC_9   
0D58                STRUC_9:   .SET   STRUC_10   
0D58                STRUC_10:   .SET   STRUC_11   
0D58                STRUC_11:   .SET   STRUC_12   
0D58                STRUC_12:   .SET   0   
0D58   B9                     CP   C   ; = space?
0D59                          ;*Macro unroll:  _case z
0D59   CA 5F 0D               JP   z,L_M_1510S133   
0D5C   C3 5C 0D               JP   $   
0D5F                          ;*Macro unroll:  STRUC_PUSH $
0D5F                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0D5F                STRUC_12:   .SET   STRUC_11   
0D5F                STRUC_11:   .SET   STRUC_10   
0D5F                STRUC_10:   .SET   STRUC_9   
0D5F                STRUC_9:   .SET   STRUC_8   
0D5F                STRUC_8:   .SET   STRUC_7   
0D5F                STRUC_7:   .SET   STRUC_6   
0D5F                STRUC_6:   .SET   STRUC_5   
0D5F                STRUC_5:   .SET   STRUC_4   
0D5F                STRUC_4:   .SET   STRUC_3   
0D5F                STRUC_3:   .SET   STRUC_2   
0D5F                STRUC_2:   .SET   STRUC_TOP   
0D5F                STRUC_TOP:   .SET   $   
0D5F                L_M_1510S133:      
0D5F                          ;*Macro unroll:  _endcase
0D5F   C3 23 0D               JP   STRUC_2 - 3   
0D62                          ;*Macro unroll:  STRUC_FWD
0D62                CUR_ADR:   .SET   $   
0D5D                          .ORG   STRUC_TOP - 2   
0D5D   62 0D                  DW   CUR_ADR   
0D62                          .ORG   CUR_ADR   
0D62                          ;*Macro unroll:  STRUC_POP
0D62                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0D62                STRUC_TOP:   .SET   STRUC_2   
0D62                STRUC_2:   .SET   STRUC_3   
0D62                STRUC_3:   .SET   STRUC_4   
0D62                STRUC_4:   .SET   STRUC_5   
0D62                STRUC_5:   .SET   STRUC_6   
0D62                STRUC_6:   .SET   STRUC_7   
0D62                STRUC_7:   .SET   STRUC_8   
0D62                STRUC_8:   .SET   STRUC_9   
0D62                STRUC_9:   .SET   STRUC_10   
0D62                STRUC_10:   .SET   STRUC_11   
0D62                STRUC_11:   .SET   STRUC_12   
0D62                STRUC_12:   .SET   0   
0D62   FE 20                  CP   " "   ; < space?
0D64                          ;*Macro unroll:  _case c
0D64   DA 6A 0D               JP   c,L_M_1513S137   
0D67   C3 67 0D               JP   $   
0D6A                          ;*Macro unroll:  STRUC_PUSH $
0D6A                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0D6A                STRUC_12:   .SET   STRUC_11   
0D6A                STRUC_11:   .SET   STRUC_10   
0D6A                STRUC_10:   .SET   STRUC_9   
0D6A                STRUC_9:   .SET   STRUC_8   
0D6A                STRUC_8:   .SET   STRUC_7   
0D6A                STRUC_7:   .SET   STRUC_6   
0D6A                STRUC_6:   .SET   STRUC_5   
0D6A                STRUC_5:   .SET   STRUC_4   
0D6A                STRUC_4:   .SET   STRUC_3   
0D6A                STRUC_3:   .SET   STRUC_2   
0D6A                STRUC_2:   .SET   STRUC_TOP   
0D6A                STRUC_TOP:   .SET   $   
0D6A                L_M_1513S137:      
0D6A                          ;*Macro unroll:  _endcase
0D6A   C3 23 0D               JP   STRUC_2 - 3   
0D6D                          ;*Macro unroll:  STRUC_FWD
0D6D                CUR_ADR:   .SET   $   
0D68                          .ORG   STRUC_TOP - 2   
0D68   6D 0D                  DW   CUR_ADR   
0D6D                          .ORG   CUR_ADR   
0D6D                          ;*Macro unroll:  STRUC_POP
0D6D                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0D6D                STRUC_TOP:   .SET   STRUC_2   
0D6D                STRUC_2:   .SET   STRUC_3   
0D6D                STRUC_3:   .SET   STRUC_4   
0D6D                STRUC_4:   .SET   STRUC_5   
0D6D                STRUC_5:   .SET   STRUC_6   
0D6D                STRUC_6:   .SET   STRUC_7   
0D6D                STRUC_7:   .SET   STRUC_8   
0D6D                STRUC_8:   .SET   STRUC_9   
0D6D                STRUC_9:   .SET   STRUC_10   
0D6D                STRUC_10:   .SET   STRUC_11   
0D6D                STRUC_11:   .SET   STRUC_12   
0D6D                STRUC_12:   .SET   0   
0D6D                             ; default case
0D6D                          ;*Macro unroll:  _break
0D6D   C3 1B 0D               JP   DLOOP_TOP - 3   
0D70                          ;*Macro unroll:  _endswitch
0D70                          ;*Macro unroll:  STRUC_FWD
0D70                CUR_ADR:   .SET   $   
0D24                          .ORG   STRUC_TOP - 2   
0D24   70 0D                  DW   CUR_ADR   
0D70                          .ORG   CUR_ADR   
0D70                          ;*Macro unroll:  STRUC_POP
0D70                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0D70                STRUC_TOP:   .SET   STRUC_2   
0D70                STRUC_2:   .SET   STRUC_3   
0D70                STRUC_3:   .SET   STRUC_4   
0D70                STRUC_4:   .SET   STRUC_5   
0D70                STRUC_5:   .SET   STRUC_6   
0D70                STRUC_6:   .SET   STRUC_7   
0D70                STRUC_7:   .SET   STRUC_8   
0D70                STRUC_8:   .SET   STRUC_9   
0D70                STRUC_9:   .SET   STRUC_10   
0D70                STRUC_10:   .SET   STRUC_11   
0D70                STRUC_11:   .SET   STRUC_12   
0D70                STRUC_12:   .SET   0   
0D70                          ;*Macro unroll:  _enddo
0D70   C3 1E 0D               JP   DLOOP_TOP   
0D73                          ;*Macro unroll:  DLOOP_FWD
0D73                CUR_ADR:   .SET   $   
0D1C                          .ORG   DLOOP_TOP - 2   
0D1C   73 0D                  DW   CUR_ADR   
0D73                          .ORG   CUR_ADR   
0D73                          ;*Macro unroll:  DLOOP_POP
0D73                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
0D73                DLOOP_TOP:   .SET   DLOOP_2   
0D73                DLOOP_2:   .SET   DLOOP_3   
0D73                DLOOP_3:   .SET   DLOOP_4   
0D73                DLOOP_4:   .SET   DLOOP_5   
0D73                DLOOP_5:   .SET   DLOOP_6   
0D73                DLOOP_6:   .SET   DLOOP_7   
0D73                DLOOP_7:   .SET   DLOOP_8   
0D73                DLOOP_8:   .SET   DLOOP_9   
0D73                DLOOP_9:   .SET   DLOOP_10   
0D73                DLOOP_10:   .SET   DLOOP_11   
0D73                DLOOP_11:   .SET   DLOOP_12   
0D73                DLOOP_12:   .SET   0   
0D73                          ;*Macro unroll:  setTOS 0,A
0D73   4F                     LD   C,A   
0D74   06 00                  LD   B,0   
0D76   C9                     RET      
0D77                XWORDREAD:      ; delim addr char -- c-addr
0D77   79                     LD   A,C   
0D78                          ;*Macro unroll:  PDROP
0D78                          ;*Macro unroll:  PNIP B,C
0D78   DD 2B                  DEC   IX   
0D7A   DD 46 00               LD   B,(IX+0)   
0D7D   DD 2B                  DEC   IX   
0D7F   DD 4E 00               LD   C,(IX+0)   
0D82                          ;*Macro unroll:  PPOP H,L
0D82                          ;*Macro unroll:  getTOS H,L
0D82   69                     LD   L,C   
0D83   60                     LD   H,B   
0D84                          ;*Macro unroll:  PDROP
0D84                          ;*Macro unroll:  PNIP B,C
0D84   DD 2B                  DEC   IX   
0D86   DD 46 00               LD   B,(IX+0)   
0D89   DD 2B                  DEC   IX   
0D8B   DD 4E 00               LD   C,(IX+0)   
0D8E                          ;*Macro unroll:  PPOP D,E
0D8E                          ;*Macro unroll:  getTOS D,E
0D8E   59                     LD   E,C   
0D8F   50                     LD   D,B   
0D90                          ;*Macro unroll:  PDROP
0D90                          ;*Macro unroll:  PNIP B,C
0D90   DD 2B                  DEC   IX   
0D92   DD 46 00               LD   B,(IX+0)   
0D95   DD 2B                  DEC   IX   
0D97   DD 4E 00               LD   C,(IX+0)   
0D9A   16 00                  LD   D,0   
0D9C   B7                     OR   A   
0D9D                          ;*Macro unroll:  _if nz
0D9D   C2 A3 0D               JP   nz,L_M_1528S155   
0DA0   C3 A0 0D               JP   $   
0DA3                          ;*Macro unroll:  STRUC_PUSH $
0DA3                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0DA3                STRUC_12:   .SET   STRUC_11   
0DA3                STRUC_11:   .SET   STRUC_10   
0DA3                STRUC_10:   .SET   STRUC_9   
0DA3                STRUC_9:   .SET   STRUC_8   
0DA3                STRUC_8:   .SET   STRUC_7   
0DA3                STRUC_7:   .SET   STRUC_6   
0DA3                STRUC_6:   .SET   STRUC_5   
0DA3                STRUC_5:   .SET   STRUC_4   
0DA3                STRUC_4:   .SET   STRUC_3   
0DA3                STRUC_3:   .SET   STRUC_2   
0DA3                STRUC_2:   .SET   STRUC_TOP   
0DA3                STRUC_TOP:   .SET   $   
0DA3                L_M_1528S155:      
0DA3   E5                     PUSH   HL   ; save a copy of HL
0DA4   23                     INC   HL   ; move to leave space for length byte
0DA5   43                     LD   B,E   
0DA6                          ;*Macro unroll:  _do
0DA6   18 03                  JR   L_M_1532S159   
0DA8   C3 A8 0D               JP   $   
0DAB                          ;*Macro unroll:  DLOOP_PUSH $
0DAB                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
0DAB                DLOOP_12:   .SET   DLOOP_11   
0DAB                DLOOP_11:   .SET   DLOOP_10   
0DAB                DLOOP_10:   .SET   DLOOP_9   
0DAB                DLOOP_9:   .SET   DLOOP_8   
0DAB                DLOOP_8:   .SET   DLOOP_7   
0DAB                DLOOP_7:   .SET   DLOOP_6   
0DAB                DLOOP_6:   .SET   DLOOP_5   
0DAB                DLOOP_5:   .SET   DLOOP_4   
0DAB                DLOOP_4:   .SET   DLOOP_3   
0DAB                DLOOP_3:   .SET   DLOOP_2   
0DAB                DLOOP_2:   .SET   DLOOP_TOP   
0DAB                DLOOP_TOP:   .SET   $   
0DAB                L_M_1532S159:      
0DAB   77                     LD   (HL),A   ; add character to return lineBuf
0DAC   23                     INC   HL   
0DAD   14                     INC   D   
0DAE   CD 48 12               CALL   getKey   ; get next key
0DB1   B9                     CP   C   ; = delim?
0DB2                          ;*Macro unroll:  _until z
0DB2   CA A8 0D               JP   z,DLOOP_TOP - 3   
0DB5                          ;*Macro unroll:  DLOOP_FWD               ; needed?
0DB5                CUR_ADR:   .SET   $   ; needed?
0DA9                          .ORG   DLOOP_TOP - 2   
0DA9   B5 0D                  DW   CUR_ADR   
0DB5                          .ORG   CUR_ADR   
0DB5   FE 20                  CP   " "   ; < space? i.e. control chars
0DB7                          ;*Macro unroll:  _until c
0DB7   DA A8 0D               JP   c,DLOOP_TOP - 3   
0DBA                          ;*Macro unroll:  DLOOP_FWD               ; needed?
0DBA                CUR_ADR:   .SET   $   ; needed?
0DA9                          .ORG   DLOOP_TOP - 2   
0DA9   BA 0D                  DW   CUR_ADR   
0DBA                          .ORG   CUR_ADR   
0DBA                          ;*Macro unroll:  _djnz
0DBA   10 EF                  DJNZ   DLOOP_TOP   
0DBC                          ;*Macro unroll:  DLOOP_FWD
0DBC                CUR_ADR:   .SET   $   
0DA9                          .ORG   DLOOP_TOP - 2   
0DA9   BC 0D                  DW   CUR_ADR   
0DBC                          .ORG   CUR_ADR   
0DBC                          ;*Macro unroll:  DLOOP_POP
0DBC                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
0DBC                DLOOP_TOP:   .SET   DLOOP_2   
0DBC                DLOOP_2:   .SET   DLOOP_3   
0DBC                DLOOP_3:   .SET   DLOOP_4   
0DBC                DLOOP_4:   .SET   DLOOP_5   
0DBC                DLOOP_5:   .SET   DLOOP_6   
0DBC                DLOOP_6:   .SET   DLOOP_7   
0DBC                DLOOP_7:   .SET   DLOOP_8   
0DBC                DLOOP_8:   .SET   DLOOP_9   
0DBC                DLOOP_9:   .SET   DLOOP_10   
0DBC                DLOOP_10:   .SET   DLOOP_11   
0DBC                DLOOP_11:   .SET   DLOOP_12   
0DBC                DLOOP_12:   .SET   0   
0DBC   E1                     POP   HL   ; restore HL
0DBD                          ;*Macro unroll:  _endif
0DBD                          ;*Macro unroll:  STRUC_FWD
0DBD                CUR_ADR:   .SET   $   
0DA1                          .ORG   STRUC_TOP - 2   
0DA1   BD 0D                  DW   CUR_ADR   
0DBD                          .ORG   CUR_ADR   
0DBD                          ;*Macro unroll:  STRUC_POP
0DBD                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0DBD                STRUC_TOP:   .SET   STRUC_2   
0DBD                STRUC_2:   .SET   STRUC_3   
0DBD                STRUC_3:   .SET   STRUC_4   
0DBD                STRUC_4:   .SET   STRUC_5   
0DBD                STRUC_5:   .SET   STRUC_6   
0DBD                STRUC_6:   .SET   STRUC_7   
0DBD                STRUC_7:   .SET   STRUC_8   
0DBD                STRUC_8:   .SET   STRUC_9   
0DBD                STRUC_9:   .SET   STRUC_10   
0DBD                STRUC_10:   .SET   STRUC_11   
0DBD                STRUC_11:   .SET   STRUC_12   
0DBD                STRUC_12:   .SET   0   
0DBD   72                     LD   (HL),D   ; write length
0DBE                          ;*Macro unroll:  setTOS H,L                   ; TOS = str ptr
0DBE   4D                     LD   C,L   ; TOS = str ptr
0DBF   44                     LD   B,H   
0DC0   C9                     RET      
0DC1                          ;*Macro unroll: CODE "find",4,0,FIND
0DC1                HEADER_FIND:      
0DC1   D2 0C                  DW   link   
0DC3                LINK:     .SET   HEADER_FIND   
0DC3   04                     DB   0 + 4   
0DC4   66 69 6E 64            DB   "find"   
0DC8                FIND:        
0DC8                          ;*Macro unroll:  PNIP H,L
0DC8   DD 2B                  DEC   IX   
0DCA   DD 66 00               LD   H,(IX+0)   
0DCD   DD 2B                  DEC   IX   
0DCF   DD 6E 00               LD   L,(IX+0)   
0DD2   CD DA 0D               CALL   lookup   ; params: HL = string address, BC = string length
0DD5                             ; returns: DE = found header ptr or 0
0DD5                          ;*Macro unroll:  setTOS D,E               ; move to TOS
0DD5   4B                     LD   C,E   ; move to TOS
0DD6   42                     LD   B,D   
0DD7                          ;*Macro unroll:  NEXT
0DD7   C3 4A 0F               JP   enter   
0DDA                             ; 
0DDA                             ; lookup - lookup header in dictionary ***
0DDA                             ; 
0DDA                             ; params: HL = string address, BC = string length
0DDA                             ; returns: DE = found header ptr or 0
0DDA                             ; destroys: AF
0DDA                             ; 
0DDA                LOOKUP:      
0DDA   ED 5B 5F 84            LD   DE,(VAR_LATEST)   ; search dictionary backwards from LATEST
0DDE                          ;*Macro unroll:  _do
0DDE   18 03                  JR   L_M_1562S193   
0DE0   C3 E0 0D               JP   $   
0DE3                          ;*Macro unroll:  DLOOP_PUSH $
0DE3                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
0DE3                DLOOP_12:   .SET   DLOOP_11   
0DE3                DLOOP_11:   .SET   DLOOP_10   
0DE3                DLOOP_10:   .SET   DLOOP_9   
0DE3                DLOOP_9:   .SET   DLOOP_8   
0DE3                DLOOP_8:   .SET   DLOOP_7   
0DE3                DLOOP_7:   .SET   DLOOP_6   
0DE3                DLOOP_6:   .SET   DLOOP_5   
0DE3                DLOOP_5:   .SET   DLOOP_4   
0DE3                DLOOP_4:   .SET   DLOOP_3   
0DE3                DLOOP_3:   .SET   DLOOP_2   
0DE3                DLOOP_2:   .SET   DLOOP_TOP   
0DE3                DLOOP_TOP:   .SET   $   
0DE3                L_M_1562S193:      
0DE3                          ;*Macro unroll:  checkZeroWord D,E            ; NULL pointer?  (end of the linked list)
0DE3   7B                     LD   A,E   ; NULL pointer?  (end of the linked list)
0DE4   B2                     OR   D   
0DE5   C8                     RET   z   
0DE6                             ; Compare the length expected and the length of the word.
0DE6                             ; Note that if the HIDE flag is set on the word, then by a bit of trickery
0DE6                             ; this won't pick the word (the length will appear to be wrong).
0DE6   D5                     PUSH   DE   ; save ptr to header
0DE7   13                     INC   DE   ; skip over first field
0DE8   13                     INC   DE   
0DE9   1A                     LD   A,(DE)   ; a = flags+length field
0DEA   E6 7F                  AND   HIDE | LENMASK   ; %al = name length
0DEC   B9                     CP   C   ; Length is the same?
0DED                          ;*Macro unroll:  _if z
0DED   CA F3 0D               JP   z,L_M_1574S209   
0DF0   C3 F0 0D               JP   $   
0DF3                          ;*Macro unroll:  STRUC_PUSH $
0DF3                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0DF3                STRUC_12:   .SET   STRUC_11   
0DF3                STRUC_11:   .SET   STRUC_10   
0DF3                STRUC_10:   .SET   STRUC_9   
0DF3                STRUC_9:   .SET   STRUC_8   
0DF3                STRUC_8:   .SET   STRUC_7   
0DF3                STRUC_7:   .SET   STRUC_6   
0DF3                STRUC_6:   .SET   STRUC_5   
0DF3                STRUC_5:   .SET   STRUC_4   
0DF3                STRUC_4:   .SET   STRUC_3   
0DF3                STRUC_3:   .SET   STRUC_2   
0DF3                STRUC_2:   .SET   STRUC_TOP   
0DF3                STRUC_TOP:   .SET   $   
0DF3                L_M_1574S209:      
0DF3                             ; Compare the strings in detail.
0DF3   13                     INC   DE   ; DE = Dictionary string we are checking against.
0DF4   E5                     PUSH   HL   ; save HL, BC
0DF5   C5                     PUSH   BC   
0DF6   CD 6B 14               CALL   compareStr   ; Compare the strings. BC = len
0DF9   C1                     POP   BC   
0DFA   E1                     POP   HL   
0DFB   B7                     OR   A   ; if A == 0 then matched
0DFC                          ;*Macro unroll:  _if z
0DFC   CA 02 0E               JP   z,L_M_1583S220   
0DFF   C3 FF 0D               JP   $   
0E02                          ;*Macro unroll:  STRUC_PUSH $
0E02                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0E02                STRUC_12:   .SET   STRUC_11   
0E02                STRUC_11:   .SET   STRUC_10   
0E02                STRUC_10:   .SET   STRUC_9   
0E02                STRUC_9:   .SET   STRUC_8   
0E02                STRUC_8:   .SET   STRUC_7   
0E02                STRUC_7:   .SET   STRUC_6   
0E02                STRUC_6:   .SET   STRUC_5   
0E02                STRUC_5:   .SET   STRUC_4   
0E02                STRUC_4:   .SET   STRUC_3   
0E02                STRUC_3:   .SET   STRUC_2   
0E02                STRUC_2:   .SET   STRUC_TOP   
0E02                STRUC_TOP:   .SET   $   
0E02                L_M_1583S220:      
0E02   D1                     POP   DE   ; matched, restore DE and return
0E03   C9                     RET      
0E04                          ;*Macro unroll:  _endif
0E04                          ;*Macro unroll:  STRUC_FWD
0E04                CUR_ADR:   .SET   $   
0E00                          .ORG   STRUC_TOP - 2   
0E00   04 0E                  DW   CUR_ADR   
0E04                          .ORG   CUR_ADR   
0E04                          ;*Macro unroll:  STRUC_POP
0E04                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0E04                STRUC_TOP:   .SET   STRUC_2   
0E04                STRUC_2:   .SET   STRUC_3   
0E04                STRUC_3:   .SET   STRUC_4   
0E04                STRUC_4:   .SET   STRUC_5   
0E04                STRUC_5:   .SET   STRUC_6   
0E04                STRUC_6:   .SET   STRUC_7   
0E04                STRUC_7:   .SET   STRUC_8   
0E04                STRUC_8:   .SET   STRUC_9   
0E04                STRUC_9:   .SET   STRUC_10   
0E04                STRUC_10:   .SET   STRUC_11   
0E04                STRUC_11:   .SET   STRUC_12   
0E04                STRUC_12:   .SET   0   
0E04                          ;*Macro unroll:  _endif
0E04                          ;*Macro unroll:  STRUC_FWD
0E04                CUR_ADR:   .SET   $   
0DF1                          .ORG   STRUC_TOP - 2   
0DF1   04 0E                  DW   CUR_ADR   
0E04                          .ORG   CUR_ADR   
0E04                          ;*Macro unroll:  STRUC_POP
0E04                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0E04                STRUC_TOP:   .SET   STRUC_2   
0E04                STRUC_2:   .SET   STRUC_3   
0E04                STRUC_3:   .SET   STRUC_4   
0E04                STRUC_4:   .SET   STRUC_5   
0E04                STRUC_5:   .SET   STRUC_6   
0E04                STRUC_6:   .SET   STRUC_7   
0E04                STRUC_7:   .SET   STRUC_8   
0E04                STRUC_8:   .SET   STRUC_9   
0E04                STRUC_9:   .SET   STRUC_10   
0E04                STRUC_10:   .SET   STRUC_11   
0E04                STRUC_11:   .SET   STRUC_12   
0E04                STRUC_12:   .SET   0   
0E04   D1                     POP   DE   ; restore DE
0E05   1A                     LD   A,(DE)   
0E06   08                     EX   AF,AF'   
0E07   13                     INC   DE   
0E08   1A                     LD   A,(DE)   
0E09   57                     LD   D,A   
0E0A   08                     EX   AF,AF'   
0E0B   5F                     LD   E,A   
0E0C                          ;*Macro unroll:  _enddo
0E0C   C3 E3 0D               JP   DLOOP_TOP   
0E0F                          ;*Macro unroll:  DLOOP_FWD
0E0F                CUR_ADR:   .SET   $   
0DE1                          .ORG   DLOOP_TOP - 2   
0DE1   0F 0E                  DW   CUR_ADR   
0E0F                          .ORG   CUR_ADR   
0E0F                          ;*Macro unroll:  DLOOP_POP
0E0F                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
0E0F                DLOOP_TOP:   .SET   DLOOP_2   
0E0F                DLOOP_2:   .SET   DLOOP_3   
0E0F                DLOOP_3:   .SET   DLOOP_4   
0E0F                DLOOP_4:   .SET   DLOOP_5   
0E0F                DLOOP_5:   .SET   DLOOP_6   
0E0F                DLOOP_6:   .SET   DLOOP_7   
0E0F                DLOOP_7:   .SET   DLOOP_8   
0E0F                DLOOP_8:   .SET   DLOOP_9   
0E0F                DLOOP_9:   .SET   DLOOP_10   
0E0F                DLOOP_10:   .SET   DLOOP_11   
0E0F                DLOOP_11:   .SET   DLOOP_12   
0E0F                DLOOP_12:   .SET   0   
0E0F                          ;*Macro unroll: CODE ">cfa",4,0,tcfa
0E0F                HEADER_TCFA:      
0E0F   C1 0D                  DW   link   
0E11                LINK:     .SET   HEADER_tcfa   
0E11   04                     DB   0 + 4   
0E12   3E 63 66 61            DB   ">cfa"   
0E16                TCFA:        
0E16                          ;*Macro unroll:  ENTER
0E16   CF                     RST   $08   
0E17   AD 12 02 00 E8 00      DW   LIT,2,plus   
0E1D   FA 13                  DW   count   
0E1F   AD 12 3F 00 A0 00      DW   LIT,LENMASK,ANDD   
0E25   E8 00                  DW   plus   
0E27                          ;*Macro unroll:  EXIT
0E27   5B 0F                  DW   exit   
0E29   C3 4A 0F               JP   enter   
0E2C                          ;*Macro unroll: CODE "type",4,0,TYPE             ; ( str len -- )
0E2C                HEADER_TYPE:      ; ( str len -- )
0E2C   0F 0E                  DW   link   
0E2E                LINK:     .SET   HEADER_TYPE   
0E2E   04                     DB   0 + 4   
0E2F   74 79 70 65            DB   "type"   
0E33                TYPE:        
0E33                          ;*Macro unroll:  PNIP D,E                       ; DE = str BC = length
0E33   DD 2B                  DEC   IX   ; DE = str BC = length
0E35   DD 56 00               LD   D,(IX+0)   
0E38   DD 2B                  DEC   IX   
0E3A   DD 5E 00               LD   E,(IX+0)   
0E3D   CD 8C 12               CALL   printStr   
0E40                          ;*Macro unroll:  PDROP                       ; clear TOS
0E40                          ;*Macro unroll:  PNIP B,C
0E40   DD 2B                  DEC   IX   
0E42   DD 46 00               LD   B,(IX+0)   
0E45   DD 2B                  DEC   IX   
0E47   DD 4E 00               LD   C,(IX+0)   
0E4A                          ;*Macro unroll:  NEXT
0E4A   C3 4A 0F               JP   enter   
0E4D                          ;*Macro unroll: CODE "cr",2,0,cr                 ; ( -- )
0E4D                HEADER_CR:      ; ( -- )
0E4D   2C 0E                  DW   link   
0E4F                LINK:     .SET   HEADER_cr   
0E4F   02                     DB   0 + 2   
0E50   63 72                  DB   "cr"   
0E52                CR:          
0E52   CD 96 12               CALL   printcr   
0E55                          ;*Macro unroll:  NEXT
0E55   C3 4A 0F               JP   enter   
0E58                          ;*Macro unroll:  CODE "accept",6,0,ACCEPT              ; ( addr max -- len )
0E58                HEADER_ACCEPT:      ; ( addr max -- len )
0E58   4D 0E                  DW   link   
0E5A                LINK:     .SET   HEADER_ACCEPT   
0E5A   06                     DB   0 + 6   
0E5B   61 63 63 65 70 74      DB   "accept"   
0E61                ACCEPT:      
0E61                          ;*Macro unroll:  PPOP D,E                    ; max - up to 255
0E61                          ;*Macro unroll:  getTOS D,E
0E61   59                     LD   E,C   
0E62   50                     LD   D,B   
0E63                          ;*Macro unroll:  PDROP
0E63                          ;*Macro unroll:  PNIP B,C
0E63   DD 2B                  DEC   IX   
0E65   DD 46 00               LD   B,(IX+0)   
0E68   DD 2B                  DEC   IX   
0E6A   DD 4E 00               LD   C,(IX+0)   
0E6D                          ;*Macro unroll: 	PNIP H,L                          ; addr
0E6D   DD 2B                  DEC   IX   ; addr
0E6F   DD 66 00               LD   H,(IX+0)   
0E72   DD 2B                  DEC   IX   
0E74   DD 6E 00               LD   L,(IX+0)   
0E77   CD B8 11               CALL   getline   
0E7A                          ;*Macro unroll:  NEXT
0E7A   C3 4A 0F               JP   enter   
0E7D                          ;*Macro unroll: CODE "key",3,0,KEY                ; ( -- c )
0E7D                HEADER_KEY:      ; ( -- c )
0E7D   58 0E                  DW   link   
0E7F                LINK:     .SET   HEADER_KEY   
0E7F   03                     DB   0 + 3   
0E80   6B 65 79               DB   "key"   
0E83                KEY:         
0E83   CD 48 12               CALL   getKey   
0E86   06 00                  LD   b,0   
0E88   4F                     LD   c,a   
0E89                          ;*Macro unroll:  NEXT
0E89   C3 4A 0F               JP   enter   
0E8C                          ;*Macro unroll: CODE "emit",4,0,EMIT              ; print the character on the stack
0E8C                HEADER_EMIT:      ; print the character on the stack
0E8C   7D 0E                  DW   link   
0E8E                LINK:     .SET   HEADER_EMIT   
0E8E   04                     DB   0 + 4   
0E8F   65 6D 69 74            DB   "emit"   
0E93                EMIT:        
0E93   79                     LD   A,C   ; (c -- )
0E94   CD 9E 11               CALL   putc   
0E97                          ;*Macro unroll:  PDROP                      ; clear stack
0E97                          ;*Macro unroll:  PNIP B,C
0E97   DD 2B                  DEC   IX   
0E99   DD 46 00               LD   B,(IX+0)   
0E9C   DD 2B                  DEC   IX   
0E9E   DD 4E 00               LD   C,(IX+0)   
0EA1                          ;*Macro unroll:  NEXT
0EA1   C3 4A 0F               JP   enter   
0EA4                          ;*Macro unroll: CODE "key?",4,0,QKEY              ; ( -- c )
0EA4                HEADER_QKEY:      ; ( -- c )
0EA4   8C 0E                  DW   link   
0EA6                LINK:     .SET   HEADER_QKEY   
0EA6   04                     DB   0 + 4   
0EA7   6B 65 79 3F            DB   "key?"   
0EAB                QKEY:        
0EAB                          ;*Macro unroll: 	PDUP		                ; save TOS
0EAB                          ;*Macro unroll:  PTUCK B,C
0EAB   DD 71 00               LD   (IX+0),C   
0EAE   DD 23                  INC   IX   
0EB0   DD 70 00               LD   (IX+0),B   
0EB3   DD 23                  INC   IX   
0EB5   CD B2 11               CALL   inputReady   
0EB8   01 01 00               LD   BC,1   ; TOS = true
0EBB                          ;*Macro unroll:  _if z
0EBB   CA C1 0E               JP   z,L_M_1631S33   
0EBE   C3 BE 0E               JP   $   
0EC1                          ;*Macro unroll:  STRUC_PUSH $
0EC1                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
0EC1                STRUC_12:   .SET   STRUC_11   
0EC1                STRUC_11:   .SET   STRUC_10   
0EC1                STRUC_10:   .SET   STRUC_9   
0EC1                STRUC_9:   .SET   STRUC_8   
0EC1                STRUC_8:   .SET   STRUC_7   
0EC1                STRUC_7:   .SET   STRUC_6   
0EC1                STRUC_6:   .SET   STRUC_5   
0EC1                STRUC_5:   .SET   STRUC_4   
0EC1                STRUC_4:   .SET   STRUC_3   
0EC1                STRUC_3:   .SET   STRUC_2   
0EC1                STRUC_2:   .SET   STRUC_TOP   
0EC1                STRUC_TOP:   .SET   $   
0EC1                L_M_1631S33:      
0EC1   01 00 00               LD   BC,0   ; TOS = false
0EC4                          ;*Macro unroll:  _endif
0EC4                          ;*Macro unroll:  STRUC_FWD
0EC4                CUR_ADR:   .SET   $   
0EBF                          .ORG   STRUC_TOP - 2   
0EBF   C4 0E                  DW   CUR_ADR   
0EC4                          .ORG   CUR_ADR   
0EC4                          ;*Macro unroll:  STRUC_POP
0EC4                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
0EC4                STRUC_TOP:   .SET   STRUC_2   
0EC4                STRUC_2:   .SET   STRUC_3   
0EC4                STRUC_3:   .SET   STRUC_4   
0EC4                STRUC_4:   .SET   STRUC_5   
0EC4                STRUC_5:   .SET   STRUC_6   
0EC4                STRUC_6:   .SET   STRUC_7   
0EC4                STRUC_7:   .SET   STRUC_8   
0EC4                STRUC_8:   .SET   STRUC_9   
0EC4                STRUC_9:   .SET   STRUC_10   
0EC4                STRUC_10:   .SET   STRUC_11   
0EC4                STRUC_11:   .SET   STRUC_12   
0EC4                STRUC_12:   .SET   0   
0EC4                          ;*Macro unroll:  NEXT
0EC4   C3 4A 0F               JP   enter   
0EC7                          ;*Macro unroll: CODE "bl",2,0,bl
0EC7                HEADER_BL:      
0EC7   A4 0E                  DW   link   
0EC9                LINK:     .SET   HEADER_bl   
0EC9   02                     DB   0 + 2   
0ECA   62 6C                  DB   "bl"   
0ECC                BL:          
0ECC                          ;*Macro unroll:  ENTER
0ECC   CF                     RST   $08   
0ECD   AD 12 20 00            DW   LIT,$20   ; compile branch on zero
0ED1                          ;*Macro unroll:  EXIT
0ED1   5B 0F                  DW   exit   
0ED3   C3 4A 0F               JP   enter   
0ED6                          ;*Macro unroll: CODE "print",5,0,PRINT
0ED6                HEADER_PRINT:      
0ED6   C7 0E                  DW   link   
0ED8                LINK:     .SET   HEADER_PRINT   
0ED8   05                     DB   0 + 5   
0ED9   70 72 69 6E 74         DB   "print"   
0EDE                PRINT:       
0EDE                          ;*Macro unroll:  PPOP D,E
0EDE                          ;*Macro unroll:  getTOS D,E
0EDE   59                     LD   E,C   
0EDF   50                     LD   D,B   
0EE0                          ;*Macro unroll:  PDROP
0EE0                          ;*Macro unroll:  PNIP B,C
0EE0   DD 2B                  DEC   IX   
0EE2   DD 46 00               LD   B,(IX+0)   
0EE5   DD 2B                  DEC   IX   
0EE7   DD 4E 00               LD   C,(IX+0)   
0EEA   CD 7D 12               CALL   printPStr   
0EED                          ;*Macro unroll:  NEXT
0EED   C3 4A 0F               JP   enter   
0EF0                             ; ." print string"
0EF0                          ;*Macro unroll: CODE {".",$22},2,IMMED,dotquote
0EF0                HEADER_DOTQUOTE:      
0EF0   D6 0E                  DW   link   
0EF2                LINK:     .SET   HEADER_dotquote   
0EF2   82                     DB   IMMED + 2   
0EF3   2E 22                  DB   ".",$22   
0EF5                DOTQUOTE:      
0EF5                          ;*Macro unroll:  ENTER
0EF5   CF                     RST   $08   
0EF6   17 14                  DW   qt   
0EF8   56 09 8E 0F 72 03      DW   state,AT,zequal   
0EFE   12 08 08 0F            DW   QBRAN,dotquote1   
0F02   33 0E                  DW   type   
0F04   2F 08 0E 0F            DW   BRAN,dotquote2   
0F08                DOTQUOTE1:      
0F08   AD 12 33 0E 5A 10      DW   LIT,type,comma   
0F0E                DOTQUOTE2:      
0F0E                          ;*Macro unroll:  EXIT
0F0E   5B 0F                  DW   exit   
0F10   C3 4A 0F               JP   enter   
0F13                INITFORTH:      
0F13   DD 21 00 81            LD   IX,data_stack   ; initialise the param stack.
0F17   FD 21 4A 0F            LD   IY,enter   
0F1B   DD 22 59 84            LD   (var_sp0),IX   
0F1F   01 00 00               LD   BC,0   ; tos
0F22   21 00 00               LD   HL,0   
0F25   22 53 84               LD   (var_intp_stop),HL   
0F28   22 4F 84               LD   (is_literal),HL   
0F2B   22 57 84               LD   (var_nesting),HL   
0F2E   22 55 84               LD   (var_state),HL   
0F31   21 0A 00               LD   HL,10   
0F34   22 5B 84               LD   (var_base),HL   
0F37   21 61 84               LD   HL,start_user   
0F3A   22 51 84               LD   (var_here),HL   
0F3D   21 41 15               LD   HL,header_latest   
0F40   22 5F 84               LD   (var_latest),HL   
0F43   22 5D 84               LD   (var_latest_str),HL   
0F46                          IF   MC6850_ACIA   
                              LD   A,rts_low   
                              OUT   ($80),A   ; initialise acia
0F46                          ENDIF      
0F46   ED 56                  IM   1   
0F48   FB                     EI      
0F49   C9                     RET      
0F4A                ENTER:       
0F4A   E1                     POP   HL   
0F4B                ENTER1:      
0F4B   5E                     LD   E,(HL)   
0F4C   23                     INC   HL   
0F4D   56                     LD   D,(HL)   
0F4E   23                     INC   HL   
0F4F   E5                     PUSH   HL   
0F50   EB                     EX   DE,HL   
0F51   E9                     JP   (HL)   
0F52                FORTH:       ; for calling forth words from assembly
0F52   21 4D 84               LD   HL,exitAddr   
0F55   E3                     EX   (SP),HL   
0F56   22 4D 84               LD   (exitAddr),HL   
0F59   EB                     EX   DE,HL   
0F5A   E9                     JP   (HL)   
0F5B                EXIT:        
0F5B   E1                     POP   HL   
0F5C   FD E9                  JP   (IY)   
0F5E                EXIT_FORTH:      
0F5E   C9                     RET      
0F5F                          ;*Macro unroll: CODE "noop",4,0,noop
0F5F                HEADER_NOOP:      
0F5F   F0 0E                  DW   link   
0F61                LINK:     .SET   HEADER_noop   
0F61   04                     DB   0 + 4   
0F62   6E 6F 6F 70            DB   "noop"   
0F66                NOOP:        
0F66                          ;*Macro unroll:  NEXT
0F66   C3 4A 0F               JP   enter   
0F69                             ; !        x a-addr --   STORE cell in memory
0F69                          ;*Macro unroll: CODE "!",1,0,STORE
0F69                HEADER_STORE:      
0F69   5F 0F                  DW   link   
0F6B                LINK:     .SET   HEADER_STORE   
0F6B   01                     DB   0 + 1   
0F6C   21                     DB   "!"   
0F6D                STORE:       
0F6D                          ;*Macro unroll:  PPOP H,L
0F6D                          ;*Macro unroll:  getTOS H,L
0F6D   69                     LD   L,C   
0F6E   60                     LD   H,B   
0F6F                          ;*Macro unroll:  PDROP
0F6F                          ;*Macro unroll:  PNIP B,C
0F6F   DD 2B                  DEC   IX   
0F71   DD 46 00               LD   B,(IX+0)   
0F74   DD 2B                  DEC   IX   
0F76   DD 4E 00               LD   C,(IX+0)   
0F79                          ;*Macro unroll:  writeWord HL, B,C
0F79                          ;*Macro unroll:  writeByte HL, C
0F79   71                     LD   (HL),C   
0F7A   23                     INC   HL   
0F7B                          ;*Macro unroll:  writeByte HL, B
0F7B   70                     LD   (HL),B   
0F7C   23                     INC   HL   
0F7D                          ;*Macro unroll:  PDROP          ; POP new TOS
0F7D                          ;*Macro unroll:  PNIP B,C
0F7D   DD 2B                  DEC   IX   
0F7F   DD 46 00               LD   B,(IX+0)   
0F82   DD 2B                  DEC   IX   
0F84   DD 4E 00               LD   C,(IX+0)   
0F87                          ;*Macro unroll:  NEXT
0F87   C3 4A 0F               JP   enter   
0F8A                          ;*Macro unroll: CODE "@",1,0,AT
0F8A                HEADER_AT:      
0F8A   69 0F                  DW   link   
0F8C                LINK:     .SET   HEADER_AT   
0F8C   01                     DB   0 + 1   
0F8D   40                     DB   "@"   
0F8E                AT:          
0F8E                          ;*Macro unroll:  getTOS H,L ; HL = TOS
0F8E   69                     LD   L,C   ; HL = TOS
0F8F   60                     LD   H,B   
0F90                          ;*Macro unroll:  readWord HL, B,C
0F90   4E                     LD   C,(HL)   
0F91   23                     INC   HL   
0F92   46                     LD   B,(HL)   
0F93   23                     INC   HL   
0F94                          ;*Macro unroll:  NEXT
0F94   C3 4A 0F               JP   enter   
0F97                             ; C!      char c-addr --    STORE char in memory
0F97                          ;*Macro unroll: CODE "c!",2,0,CSTORE
0F97                HEADER_CSTORE:      
0F97   8A 0F                  DW   link   
0F99                LINK:     .SET   HEADER_CSTORE   
0F99   02                     DB   0 + 2   
0F9A   63 21                  DB   "c!"   
0F9C                CSTORE:      
0F9C                          ;*Macro unroll:  PPOP H,L
0F9C                          ;*Macro unroll:  getTOS H,L
0F9C   69                     LD   L,C   
0F9D   60                     LD   H,B   
0F9E                          ;*Macro unroll:  PDROP
0F9E                          ;*Macro unroll:  PNIP B,C
0F9E   DD 2B                  DEC   IX   
0FA0   DD 46 00               LD   B,(IX+0)   
0FA3   DD 2B                  DEC   IX   
0FA5   DD 4E 00               LD   C,(IX+0)   
0FA8   71                     LD   (HL),C   
0FA9                          ;*Macro unroll:  PDROP          ; POP new TOS
0FA9                          ;*Macro unroll:  PNIP B,C
0FA9   DD 2B                  DEC   IX   
0FAB   DD 46 00               LD   B,(IX+0)   
0FAE   DD 2B                  DEC   IX   
0FB0   DD 4E 00               LD   C,(IX+0)   
0FB3                          ;*Macro unroll:  NEXT
0FB3   C3 4A 0F               JP   enter   
0FB6                             ; C@     c-addr -- char   AT char from memory
0FB6                          ;*Macro unroll: CODE "c@",2,0,CAT
0FB6                HEADER_CAT:      
0FB6   97 0F                  DW   link   
0FB8                LINK:     .SET   HEADER_CAT   
0FB8   02                     DB   0 + 2   
0FB9   63 40                  DB   "c@"   
0FBB                CAT:         
0FBB   0A                     LD   A,(BC)   
0FBC   4F                     LD   C,A   
0FBD   06 00                  LD   B,0   
0FBF                          ;*Macro unroll:  NEXT
0FBF   C3 4A 0F               JP   enter   
0FC2                             ;   R@          ( -- w )
0FC2                             ;               Copy top of return stack to the data stack.
0FC2                          ;*Macro unroll: CODE	'R@',2,0,RAT
0FC2                HEADER_RAT:      
0FC2   B6 0F                  DW   link   
0FC4                LINK:     .SET   HEADER_RAT   
0FC4   02                     DB   0 + 2   
0FC5   52 40                  DB   "R@"   
0FC7                RAT:         
0FC7   C5                     PUSH   BC   
0FC8   DD 4E 00               LD   C,(IX+0)   
0FCB   DD 46 01               LD   B,(IX+1)   
0FCE                          ;*Macro unroll: 	NEXT
0FCE   C3 4A 0F               JP   enter   
0FD1                             ;z RSP!  a-addr --                  set return stack pointer
0FD1                          ;*Macro unroll: CODE "rp!",4,0,RPSTO
0FD1                HEADER_RPSTO:      
0FD1   C2 0F                  DW   link   
0FD3                LINK:     .SET   HEADER_RPSTO   
0FD3   04                     DB   0 + 4   
0FD4   72 70 21               DB   "rp!"   
0FD7                RPSTO:       
0FD7                          ;*Macro unroll:  getTOS H,L
0FD7   69                     LD   L,C   
0FD8   60                     LD   H,B   
0FD9   F9                     LD   SP,HL   
0FDA                          ;*Macro unroll:  PDROP                      ; POP TOS
0FDA                          ;*Macro unroll:  PNIP B,C
0FDA   DD 2B                  DEC   IX   
0FDC   DD 46 00               LD   B,(IX+0)   
0FDF   DD 2B                  DEC   IX   
0FE1   DD 4E 00               LD   C,(IX+0)   
0FE4                          ;*Macro unroll:  NEXT
0FE4   C3 4A 0F               JP   enter   
0FE7                             ;   RP@         ( -- a )
0FE7                             ;               Push the current RP to the data stack
0FE7                          ;*Macro unroll: CODE 'rp@', 3,0,RPAT
0FE7                HEADER_RPAT:      
0FE7   D1 0F                  DW   link   
0FE9                LINK:     .SET   HEADER_RPAT   
0FE9   03                     DB   0 + 3   
0FEA   72 70 40               DB   "rp@"   
0FED                RPAT:        
0FED                          ;*Macro unroll:  PDUP                      ; PUSH TOS
0FED                          ;*Macro unroll:  PTUCK B,C
0FED   DD 71 00               LD   (IX+0),C   
0FF0   DD 23                  INC   IX   
0FF2   DD 70 00               LD   (IX+0),B   
0FF5   DD 23                  INC   IX   
0FF7   21 00 00               LD   HL,0   
0FFA   39                     ADD   HL,SP   
0FFB                          ;*Macro unroll:  setTOS H,L
0FFB   4D                     LD   C,L   
0FFC   44                     LD   B,H   
0FFD                          ;*Macro unroll:  NEXT
0FFD   C3 4A 0F               JP   enter   
1000                          ;*Macro unroll: CODE "sp@",3,0,SPAT
1000                HEADER_SPAT:      
1000   E7 0F                  DW   link   
1002                LINK:     .SET   HEADER_SPAT   
1002   03                     DB   0 + 3   
1003   73 70 40               DB   "sp@"   
1006                SPAT:        
1006   DD E5                  PUSH   IX   
1008   E1                     POP   HL   
1009                          ;*Macro unroll:  PPUSH H,L
1009                          ;*Macro unroll:  PDUP             ; push TOS reg pair
1009                          ;*Macro unroll:  PTUCK B,C
1009   DD 71 00               LD   (IX+0),C   
100C   DD 23                  INC   IX   
100E   DD 70 00               LD   (IX+0),B   
1011   DD 23                  INC   IX   
1013                          ;*Macro unroll:  setTOS H,L
1013   4D                     LD   C,L   
1014   44                     LD   B,H   
1015                          ;*Macro unroll:  NEXT
1015   C3 4A 0F               JP   enter   
1018                          ;*Macro unroll: CODE "sp!",3,0,SPSTORE
1018                HEADER_SPSTORE:      
1018   00 10                  DW   link   
101A                LINK:     .SET   HEADER_SPSTORE   
101A   03                     DB   0 + 3   
101B   73 70 21               DB   "sp!"   
101E                SPSTORE:      
101E                          ;*Macro unroll:  PPOP H,L
101E                          ;*Macro unroll:  getTOS H,L
101E   69                     LD   L,C   
101F   60                     LD   H,B   
1020                          ;*Macro unroll:  PDROP
1020                          ;*Macro unroll:  PNIP B,C
1020   DD 2B                  DEC   IX   
1022   DD 46 00               LD   B,(IX+0)   
1025   DD 2B                  DEC   IX   
1027   DD 4E 00               LD   C,(IX+0)   
102A   E5                     PUSH   HL   
102B   DD E1                  POP   IX   
102D                          ;*Macro unroll:  NEXT
102D   C3 4A 0F               JP   enter   
1030                             ; allocate n bytes of memory                                   ( n -- ) allocate n bytes of memory
1030                          ;*Macro unroll: CODE "allot",5,0,allot               ;
1030                HEADER_ALLOT:      ; 
1030   18 10                  DW   link   
1032                LINK:     .SET   HEADER_allot   
1032   05                     DB   0 + 5   
1033   61 6C 6C 6F 74         DB   "allot"   
1038                ALLOT:       
1038                          ;*Macro unroll:  ENTER
1038   CF                     RST   $08   
1039                             ; dw here, addstore                   ; adds n to here
1039   22 09 47 10            DW   here,PSTOR   ; adds n to here
103D                          ;*Macro unroll:  EXIT
103D   5B 0F                  DW   exit   
103F   C3 4A 0F               JP   enter   
1042                             ;   +!          ( n a -- )
1042                             ;               Add n to the contents at address a.
1042                          ;*Macro unroll: CODE  '+!',2,0,PSTOR
1042                HEADER_PSTOR:      
1042   30 10                  DW   link   
1044                LINK:     .SET   HEADER_PSTOR   
1044   02                     DB   0 + 2   
1045   2B 21                  DB   "+!"   
1047                PSTOR:       
1047                          ;*Macro unroll:  ENTER
1047   CF                     RST   $08   
1048   42 13 76 13 8E 0F E8 00 DW   SWAP,OVER,AT,PLUS   
1050   42 13 6D 0F 5B 0F      DW   SWAP,STORE,EXIT   
1056                          ;*Macro unroll: CODE ",",1,0,COMMA
1056                HEADER_COMMA:      
1056   42 10                  DW   link   
1058                LINK:     .SET   HEADER_COMMA   
1058   01                     DB   0 + 1   
1059   2C                     DB   ","   
105A                COMMA:       
105A   2A 51 84               LD   HL,(VAR_HERE)   ; HERE
105D                          ;*Macro unroll: 	writeWord HL, B,C
105D                          ;*Macro unroll:  writeByte HL, C
105D   71                     LD   (HL),C   
105E   23                     INC   HL   
105F                          ;*Macro unroll:  writeByte HL, B
105F   70                     LD   (HL),B   
1060   23                     INC   HL   
1061   22 51 84               LD   (VAR_HERE),HL   ; Update HERE (incremented)
1064                          ;*Macro unroll: 	PDROP		        ; cleanup TOS
1064                          ;*Macro unroll:  PNIP B,C
1064   DD 2B                  DEC   IX   
1066   DD 46 00               LD   B,(IX+0)   
1069   DD 2B                  DEC   IX   
106B   DD 4E 00               LD   C,(IX+0)   
106E                          ;*Macro unroll:  NEXT
106E   C3 4A 0F               JP   enter   
1071                          ;*Macro unroll: CODE "c,",1,0,CCOMMA
1071                HEADER_CCOMMA:      
1071   56 10                  DW   link   
1073                LINK:     .SET   HEADER_CCOMMA   
1073   01                     DB   0 + 1   
1074   63 2C                  DB   "c,"   
1076                CCOMMA:      
1076                          ;*Macro unroll:  PTUCK H,L
1076   DD 75 00               LD   (IX+0),L   
1079   DD 23                  INC   IX   
107B   DD 74 00               LD   (IX+0),H   
107E   DD 23                  INC   IX   
1080   2A 51 84               LD   HL,(VAR_HERE)   ; HERE
1083   71                     LD   (HL),C   ; STORE DE at memory pointed to by VAR_HERE
1084   23                     INC   HL   
1085   22 51 84               LD   (VAR_HERE),HL   ; Update HERE (incremented)
1088                          ;*Macro unroll:  PNIP H,L
1088   DD 2B                  DEC   IX   
108A   DD 66 00               LD   H,(IX+0)   
108D   DD 2B                  DEC   IX   
108F   DD 6E 00               LD   L,(IX+0)   
1092                          ;*Macro unroll: 	PDROP		        ; cleanup TOS
1092                          ;*Macro unroll:  PNIP B,C
1092   DD 2B                  DEC   IX   
1094   DD 46 00               LD   B,(IX+0)   
1097   DD 2B                  DEC   IX   
1099   DD 4E 00               LD   C,(IX+0)   
109C                          ;*Macro unroll:  NEXT
109C   C3 4A 0F               JP   enter   
109F   25 46 69 72 74 68 20 2D 20 61 20 5A 38 30 20 46 6F 72 74 68 20 62 79 20 4A 6F 68 6E 20 48 61 72 64 79 0D 0A 0D 0A TXT_INTRO:   .PSTR   "Firth - a Z80 Forth by John Hardy\r\n\r\n"   
10C5   02 0D 0A     TXT_NEWLINE:   .PSTR   "\r\n"   
10C8   04 0D 0A 3E 20 TXT_PROMPT:   .PSTR   "\r\n> "   
10CD   0A 0D 0A 44 6F 6E 65 21 20 0D 0A DONE:   .PSTR   "\r\nDone! \r\n"   
10D8   0A 46 61 69 6C 65 64 3A 20 0D 0A FAILED:   .PSTR   "Failed: \r\n"   
10E3                             ; serial I/O
10E3                INITSERIAL:      
10E3   21 00 00               LD   HL,0   
10E6   22 43 82               LD   (serbufused),HL   
10E9   21 00 82               LD   HL,serbuf   
10EC   22 3F 82               LD   (serinptr),HL   
10EF   22 41 82               LD   (serrdptr),HL   
10F2   21 4D 82               LD   HL,linebuf   
10F5   22 45 82               LD   (lineBufStart),HL   
10F8   22 49 82               LD   (currkey),HL   
10FB   22 4B 82               LD   (linebuftop),HL   
10FE   21 80 00               LD   HL,LINE_BUFSIZE   
1101   22 47 82               LD   (lineBufSize),HL   
1104                          IF   MC6850_ACIA   
                              LD   A,rts_low   
                              OUT   ($80),A   ; initialise acia
1104                          ELSE   if Z80_SIO   
1104                             ; reset channel
1104   3E 18                  LD   A,0x18   
1106   D3 82                  OUT   (IO_CTRL),A   
1108                             ; WR4
1108                             ; 01------ 16x
1108                             ; 10------ 32x
1108                             ; 11------ 64x
1108                             ; ----01-- 1 stop
1108                             ; ----10-- 1.5 stop
1108                             ; ----11-- 2 stop
1108   3E 04                  LD   A,4   
110A   D3 82                  OUT   (IO_CTRL),A   
110C   3E 84                  LD   A,10000100b   
110E   D3 82                  OUT   (IO_CTRL),A   
1110                             ; WR3
1110                             ; 11------ rx 8 bits/char
1110                             ; -------1 rx enable
1110   3E 03                  LD   A,3   
1112   D3 82                  OUT   (IO_CTRL),A   
1114   3E C1                  LD   A,11000001b   
1116   D3 82                  OUT   (IO_CTRL),A   
1118                             ; WR5
1118                             ; -11----- tx 8 bits/chr
1118                             ; ----1--- tx enable
1118   3E 05                  LD   A,5   
111A   D3 82                  OUT   (IO_CTRL),A   
111C   3E 68                  LD   A,01101000b   
111E   D3 82                  OUT   (IO_CTRL),A   
1120                             ; WR1
1120                             ; ---11--- rx intr on char
1120                             ; ------1- tx intr enable
1120   3E 01                  LD   A,1   
1122   D3 82                  OUT   (IO_CTRL),A   
1124   3E 18                  LD   A,00011000b   
1126   D3 82                  OUT   (IO_CTRL),A   
1128                          ENDIF      
1128   ED 56                  IM   1   
112A   FB                     EI      
112B   C9                     RET      
112C                SERIALIN:      
112C   F5                     PUSH   AF   
112D   E5                     PUSH   HL   
112E   DB 82                  IN   A,(IO_CTRL)   
1130   E6 01                  AND   $01   ; Check if interupt due to read lineBuf full
1132                          ;*Macro unroll:  _if nz
1132   C2 38 11               JP   nz,L_M_1848S78   
1135   C3 35 11               JP   $   
1138                          ;*Macro unroll:  STRUC_PUSH $
1138                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
1138                STRUC_12:   .SET   STRUC_11   
1138                STRUC_11:   .SET   STRUC_10   
1138                STRUC_10:   .SET   STRUC_9   
1138                STRUC_9:   .SET   STRUC_8   
1138                STRUC_8:   .SET   STRUC_7   
1138                STRUC_7:   .SET   STRUC_6   
1138                STRUC_6:   .SET   STRUC_5   
1138                STRUC_5:   .SET   STRUC_4   
1138                STRUC_4:   .SET   STRUC_3   
1138                STRUC_3:   .SET   STRUC_2   
1138                STRUC_2:   .SET   STRUC_TOP   
1138                STRUC_TOP:   .SET   $   
1138                L_M_1848S78:      
1138   DB 80                  IN   A,(IO_DATA)   
113A   F5                     PUSH   AF   
113B   3A 43 82               LD   A,(serBufUsed)   
113E   FE 3F                  CP   SER_BUFSIZE   ; If full then ignore
1140                          ;*Macro unroll:  _if z
1140   CA 46 11               JP   z,L_M_1853S83   
1143   C3 43 11               JP   $   
1146                          ;*Macro unroll:  STRUC_PUSH $
1146                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
1146                STRUC_12:   .SET   STRUC_11   
1146                STRUC_11:   .SET   STRUC_10   
1146                STRUC_10:   .SET   STRUC_9   
1146                STRUC_9:   .SET   STRUC_8   
1146                STRUC_8:   .SET   STRUC_7   
1146                STRUC_7:   .SET   STRUC_6   
1146                STRUC_6:   .SET   STRUC_5   
1146                STRUC_5:   .SET   STRUC_4   
1146                STRUC_4:   .SET   STRUC_3   
1146                STRUC_3:   .SET   STRUC_2   
1146                STRUC_2:   .SET   STRUC_TOP   
1146                STRUC_TOP:   .SET   $   
1146                L_M_1853S83:      
1146   F1                     POP   AF   
1147                          ;*Macro unroll:  _else
1147   C3 47 11               JP   $   
114A                          ;*Macro unroll:  STRUC_FWD
114A                CUR_ADR:   .SET   $   
1144                          .ORG   STRUC_TOP - 2   
1144   4A 11                  DW   CUR_ADR   
114A                          .ORG   CUR_ADR   
114A                STRUC_TOP:   .SET   $   
114A   2A 3F 82               LD   HL,(serInPtr)   
114D   23                     INC   HL   
114E   7D                     LD   A,L   ; Only need to check low byte becasuse lineBuf<256 bytes
114F   FE 3F                  CP   (serBuf + SER_BUFSIZE) & $FF   
1151                          ;*Macro unroll:  _if z
1151   CA 57 11               JP   z,L_M_1860S90   
1154   C3 54 11               JP   $   
1157                          ;*Macro unroll:  STRUC_PUSH $
1157                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
1157                STRUC_12:   .SET   STRUC_11   
1157                STRUC_11:   .SET   STRUC_10   
1157                STRUC_10:   .SET   STRUC_9   
1157                STRUC_9:   .SET   STRUC_8   
1157                STRUC_8:   .SET   STRUC_7   
1157                STRUC_7:   .SET   STRUC_6   
1157                STRUC_6:   .SET   STRUC_5   
1157                STRUC_5:   .SET   STRUC_4   
1157                STRUC_4:   .SET   STRUC_3   
1157                STRUC_3:   .SET   STRUC_2   
1157                STRUC_2:   .SET   STRUC_TOP   
1157                STRUC_TOP:   .SET   $   
1157                L_M_1860S90:      
1157   21 00 82               LD   HL,serBuf   
115A                          ;*Macro unroll:  _endif
115A                          ;*Macro unroll:  STRUC_FWD
115A                CUR_ADR:   .SET   $   
1155                          .ORG   STRUC_TOP - 2   
1155   5A 11                  DW   CUR_ADR   
115A                          .ORG   CUR_ADR   
115A                          ;*Macro unroll:  STRUC_POP
115A                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
115A                STRUC_TOP:   .SET   STRUC_2   
115A                STRUC_2:   .SET   STRUC_3   
115A                STRUC_3:   .SET   STRUC_4   
115A                STRUC_4:   .SET   STRUC_5   
115A                STRUC_5:   .SET   STRUC_6   
115A                STRUC_6:   .SET   STRUC_7   
115A                STRUC_7:   .SET   STRUC_8   
115A                STRUC_8:   .SET   STRUC_9   
115A                STRUC_9:   .SET   STRUC_10   
115A                STRUC_10:   .SET   STRUC_11   
115A                STRUC_11:   .SET   STRUC_12   
115A                STRUC_12:   .SET   0   
115A   22 3F 82               LD   (serInPtr),HL   
115D   F1                     POP   AF   
115E   77                     LD   (HL),A   
115F   3A 43 82               LD   A,(serBufUsed)   
1162   3C                     INC   A   
1163   32 43 82               LD   (serBufUsed),A   
1166                          IF   MC6850_ACIA   
                              CP   SER_FULLSIZE   
                              ;*Macro unroll:  _if nc
                              JP   nc,L_M_1871S101   
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    L_M_1871S101:      
                              LD   A,RTS_HIGH   
                              OUT   ($80),A   
                              ;*Macro unroll:  _endif
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
1166                          ELSE   if Z80_SIO   
1166   3E 38                  LD   A,00111000b   ; return from interrupt
1168   D3 82                  OUT   (IO_CTRL),A   
116A                          ENDIF      
116A                          ;*Macro unroll:  _endif
116A                          ;*Macro unroll:  STRUC_FWD
116A                CUR_ADR:   .SET   $   
1148                          .ORG   STRUC_TOP - 2   
1148   6A 11                  DW   CUR_ADR   
116A                          .ORG   CUR_ADR   
116A                          ;*Macro unroll:  STRUC_POP
116A                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
116A                STRUC_TOP:   .SET   STRUC_2   
116A                STRUC_2:   .SET   STRUC_3   
116A                STRUC_3:   .SET   STRUC_4   
116A                STRUC_4:   .SET   STRUC_5   
116A                STRUC_5:   .SET   STRUC_6   
116A                STRUC_6:   .SET   STRUC_7   
116A                STRUC_7:   .SET   STRUC_8   
116A                STRUC_8:   .SET   STRUC_9   
116A                STRUC_9:   .SET   STRUC_10   
116A                STRUC_10:   .SET   STRUC_11   
116A                STRUC_11:   .SET   STRUC_12   
116A                STRUC_12:   .SET   0   
116A                          ;*Macro unroll:  _endif
116A                          ;*Macro unroll:  STRUC_FWD
116A                CUR_ADR:   .SET   $   
1136                          .ORG   STRUC_TOP - 2   
1136   6A 11                  DW   CUR_ADR   
116A                          .ORG   CUR_ADR   
116A                          ;*Macro unroll:  STRUC_POP
116A                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
116A                STRUC_TOP:   .SET   STRUC_2   
116A                STRUC_2:   .SET   STRUC_3   
116A                STRUC_3:   .SET   STRUC_4   
116A                STRUC_4:   .SET   STRUC_5   
116A                STRUC_5:   .SET   STRUC_6   
116A                STRUC_6:   .SET   STRUC_7   
116A                STRUC_7:   .SET   STRUC_8   
116A                STRUC_8:   .SET   STRUC_9   
116A                STRUC_9:   .SET   STRUC_10   
116A                STRUC_10:   .SET   STRUC_11   
116A                STRUC_11:   .SET   STRUC_12   
116A                STRUC_12:   .SET   0   
116A   E1                     POP   HL   
116B   F1                     POP   AF   
116C   FB                     EI      
116D   C9                     RET      
116E                             ; 
116E                             ; getc - input
116E                             ; returns: A = input char
116E                             ; 
116E                GETC:        
116E                          IF   TESTMODE   
                              PUSH   HL   
                              LD   HL,(char_pointer)   
                              LD   A,(HL)   
                              INC   HL   
                              LD   (char_pointer),HL   
                              POP   HL   
                              RET      
116E                          ELSE      
116E                          ;*Macro unroll:  _do
116E   18 03                  JR   L_M_1899S133   
1170   C3 70 11               JP   $   
1173                          ;*Macro unroll:  DLOOP_PUSH $
1173                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
1173                DLOOP_12:   .SET   DLOOP_11   
1173                DLOOP_11:   .SET   DLOOP_10   
1173                DLOOP_10:   .SET   DLOOP_9   
1173                DLOOP_9:   .SET   DLOOP_8   
1173                DLOOP_8:   .SET   DLOOP_7   
1173                DLOOP_7:   .SET   DLOOP_6   
1173                DLOOP_6:   .SET   DLOOP_5   
1173                DLOOP_5:   .SET   DLOOP_4   
1173                DLOOP_4:   .SET   DLOOP_3   
1173                DLOOP_3:   .SET   DLOOP_2   
1173                DLOOP_2:   .SET   DLOOP_TOP   
1173                DLOOP_TOP:   .SET   $   
1173                L_M_1899S133:      
1173   3A 43 82               LD   A,(serBufUsed)   
1176   FE 00                  CP   $00   
1178                          ;*Macro unroll:  _until nz
1178   C2 70 11               JP   nz,DLOOP_TOP - 3   
117B                          ;*Macro unroll:  DLOOP_FWD               ; needed?
117B                CUR_ADR:   .SET   $   ; needed?
1171                          .ORG   DLOOP_TOP - 2   
1171   7B 11                  DW   CUR_ADR   
117B                          .ORG   CUR_ADR   
117B                          ;*Macro unroll:  _enddo
117B   C3 73 11               JP   DLOOP_TOP   
117E                          ;*Macro unroll:  DLOOP_FWD
117E                CUR_ADR:   .SET   $   
1171                          .ORG   DLOOP_TOP - 2   
1171   7E 11                  DW   CUR_ADR   
117E                          .ORG   CUR_ADR   
117E                          ;*Macro unroll:  DLOOP_POP
117E                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
117E                DLOOP_TOP:   .SET   DLOOP_2   
117E                DLOOP_2:   .SET   DLOOP_3   
117E                DLOOP_3:   .SET   DLOOP_4   
117E                DLOOP_4:   .SET   DLOOP_5   
117E                DLOOP_5:   .SET   DLOOP_6   
117E                DLOOP_6:   .SET   DLOOP_7   
117E                DLOOP_7:   .SET   DLOOP_8   
117E                DLOOP_8:   .SET   DLOOP_9   
117E                DLOOP_9:   .SET   DLOOP_10   
117E                DLOOP_10:   .SET   DLOOP_11   
117E                DLOOP_11:   .SET   DLOOP_12   
117E                DLOOP_12:   .SET   0   
117E   E5                     PUSH   HL   
117F   2A 41 82               LD   HL,(serRdPtr)   
1182   23                     INC   HL   
1183   7D                     LD   A,L   ; Only need to check low byte because lineBuf<256 bytes
1184   FE 3F                  CP   (serBuf + SER_BUFSIZE) & $FF   
1186                          ;*Macro unroll:  _if z
1186   CA 8C 11               JP   z,L_M_1909S143   
1189   C3 89 11               JP   $   
118C                          ;*Macro unroll:  STRUC_PUSH $
118C                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
118C                STRUC_12:   .SET   STRUC_11   
118C                STRUC_11:   .SET   STRUC_10   
118C                STRUC_10:   .SET   STRUC_9   
118C                STRUC_9:   .SET   STRUC_8   
118C                STRUC_8:   .SET   STRUC_7   
118C                STRUC_7:   .SET   STRUC_6   
118C                STRUC_6:   .SET   STRUC_5   
118C                STRUC_5:   .SET   STRUC_4   
118C                STRUC_4:   .SET   STRUC_3   
118C                STRUC_3:   .SET   STRUC_2   
118C                STRUC_2:   .SET   STRUC_TOP   
118C                STRUC_TOP:   .SET   $   
118C                L_M_1909S143:      
118C   21 00 82               LD   HL,serBuf   
118F                          ;*Macro unroll:  _endif
118F                          ;*Macro unroll:  STRUC_FWD
118F                CUR_ADR:   .SET   $   
118A                          .ORG   STRUC_TOP - 2   
118A   8F 11                  DW   CUR_ADR   
118F                          .ORG   CUR_ADR   
118F                          ;*Macro unroll:  STRUC_POP
118F                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
118F                STRUC_TOP:   .SET   STRUC_2   
118F                STRUC_2:   .SET   STRUC_3   
118F                STRUC_3:   .SET   STRUC_4   
118F                STRUC_4:   .SET   STRUC_5   
118F                STRUC_5:   .SET   STRUC_6   
118F                STRUC_6:   .SET   STRUC_7   
118F                STRUC_7:   .SET   STRUC_8   
118F                STRUC_8:   .SET   STRUC_9   
118F                STRUC_9:   .SET   STRUC_10   
118F                STRUC_10:   .SET   STRUC_11   
118F                STRUC_11:   .SET   STRUC_12   
118F                STRUC_12:   .SET   0   
118F   F3                     DI      
1190   22 41 82               LD   (serRdPtr),HL   
1193   3A 43 82               LD   A,(serBufUsed)   
1196   3D                     DEC   A   
1197   32 43 82               LD   (serBufUsed),A   
119A                             ; can't get this to nest correctly
119A                             ;.if MC6850_ACIA
119A                             ;cp SER_EMPTYSIZE
119A                             ;_if c
119A                             ;    ld A,RTS_LOW
119A                             ;    out ($80),A
119A                             ;_endif
119A                             ;.endif
119A   7E                     LD   A,(HL)   
119B   FB                     EI      
119C   E1                     POP   HL   
119D   C9                     RET      ; Char ready in A
119E                          ENDIF      
119E                             ; 
119E                             ; putc - output a character
119E                             ; params: A = char to output
119E                             ; 
119E                PUTC:        
119E   F5                     PUSH   AF   ; STORE character
119F                          ;*Macro unroll:  _do
119F   18 03                  JR   L_M_1936S174   
11A1   C3 A1 11               JP   $   
11A4                          ;*Macro unroll:  DLOOP_PUSH $
11A4                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
11A4                DLOOP_12:   .SET   DLOOP_11   
11A4                DLOOP_11:   .SET   DLOOP_10   
11A4                DLOOP_10:   .SET   DLOOP_9   
11A4                DLOOP_9:   .SET   DLOOP_8   
11A4                DLOOP_8:   .SET   DLOOP_7   
11A4                DLOOP_7:   .SET   DLOOP_6   
11A4                DLOOP_6:   .SET   DLOOP_5   
11A4                DLOOP_5:   .SET   DLOOP_4   
11A4                DLOOP_4:   .SET   DLOOP_3   
11A4                DLOOP_3:   .SET   DLOOP_2   
11A4                DLOOP_2:   .SET   DLOOP_TOP   
11A4                DLOOP_TOP:   .SET   $   
11A4                L_M_1936S174:      
11A4   DB 82                  IN   A,(IO_CTRL)   ; Status byte
11A6                          IF   MC6850_ACIA   
                              BIT   1,A   ; Set Zero flag if still transmitting character
11A6                          ELSE   if Z80_SIO   
11A6   CB 57                  BIT   2,A   ; Set Zero flag if still transmitting character
11A8                          ENDIF      
11A8                          ;*Macro unroll:  _until nz
11A8   C2 A1 11               JP   nz,DLOOP_TOP - 3   
11AB                          ;*Macro unroll:  DLOOP_FWD               ; needed?
11AB                CUR_ADR:   .SET   $   ; needed?
11A2                          .ORG   DLOOP_TOP - 2   
11A2   AB 11                  DW   CUR_ADR   
11AB                          .ORG   CUR_ADR   
11AB                          ;*Macro unroll:  _enddo
11AB   C3 A4 11               JP   DLOOP_TOP   
11AE                          ;*Macro unroll:  DLOOP_FWD
11AE                CUR_ADR:   .SET   $   
11A2                          .ORG   DLOOP_TOP - 2   
11A2   AE 11                  DW   CUR_ADR   
11AE                          .ORG   CUR_ADR   
11AE                          ;*Macro unroll:  DLOOP_POP
11AE                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
11AE                DLOOP_TOP:   .SET   DLOOP_2   
11AE                DLOOP_2:   .SET   DLOOP_3   
11AE                DLOOP_3:   .SET   DLOOP_4   
11AE                DLOOP_4:   .SET   DLOOP_5   
11AE                DLOOP_5:   .SET   DLOOP_6   
11AE                DLOOP_6:   .SET   DLOOP_7   
11AE                DLOOP_7:   .SET   DLOOP_8   
11AE                DLOOP_8:   .SET   DLOOP_9   
11AE                DLOOP_9:   .SET   DLOOP_10   
11AE                DLOOP_10:   .SET   DLOOP_11   
11AE                DLOOP_11:   .SET   DLOOP_12   
11AE                DLOOP_12:   .SET   0   
11AE   F1                     POP   AF   ; Retrieve character
11AF   D3 80                  OUT   (IO_DATA),A   ; Output the character
11B1   C9                     RET      
11B2                INPUTREADY:      
11B2   3A 43 82               LD   A,(serBufUsed)   
11B5   FE 00                  CP   $0   
11B7   C9                     RET      
11B8                             ; 
11B8                             ; getline - input line of text ***
11B8                             ; params: HL = addr, DE = max (currently up to 255)
11B8                             ; returns: BC = length - up to 255
11B8                             ; 
11B8                GETLINE:      
11B8   F5                     PUSH   AF   
11B9   E5                     PUSH   HL   
11BA                          ;*Macro unroll:  PRINT_STR TXT_PROMPT
11BA                          ;*Macro unroll:  PTUCK D,E
11BA   DD 73 00               LD   (IX+0),E   
11BD   DD 23                  INC   IX   
11BF   DD 72 00               LD   (IX+0),D   
11C2   DD 23                  INC   IX   
11C4   11 C8 10               LD   DE,TXT_PROMPT   
11C7   CD 7D 12               CALL   printPStr   
11CA                          ;*Macro unroll:  PNIP D,E
11CA   DD 2B                  DEC   IX   
11CC   DD 56 00               LD   D,(IX+0)   
11CF   DD 2B                  DEC   IX   
11D1   DD 5E 00               LD   E,(IX+0)   
11D4   E1                     POP   HL   
11D5   E5                     PUSH   HL   
11D6   01 00 00               LD   BC,0   
11D9                          ;*Macro unroll:  _do
11D9   18 03                  JR   L_M_1964S205   
11DB   C3 DB 11               JP   $   
11DE                          ;*Macro unroll:  DLOOP_PUSH $
11DE                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
11DE                DLOOP_12:   .SET   DLOOP_11   
11DE                DLOOP_11:   .SET   DLOOP_10   
11DE                DLOOP_10:   .SET   DLOOP_9   
11DE                DLOOP_9:   .SET   DLOOP_8   
11DE                DLOOP_8:   .SET   DLOOP_7   
11DE                DLOOP_7:   .SET   DLOOP_6   
11DE                DLOOP_6:   .SET   DLOOP_5   
11DE                DLOOP_5:   .SET   DLOOP_4   
11DE                DLOOP_4:   .SET   DLOOP_3   
11DE                DLOOP_3:   .SET   DLOOP_2   
11DE                DLOOP_2:   .SET   DLOOP_TOP   
11DE                DLOOP_TOP:   .SET   $   
11DE                L_M_1964S205:      
11DE                          ;*Macro unroll:  _do
11DE   18 03                  JR   L_M_1965S206   
11E0   C3 E0 11               JP   $   
11E3                          ;*Macro unroll:  DLOOP_PUSH $
11E3                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
11E3                DLOOP_12:   .SET   DLOOP_11   
11E3                DLOOP_11:   .SET   DLOOP_10   
11E3                DLOOP_10:   .SET   DLOOP_9   
11E3                DLOOP_9:   .SET   DLOOP_8   
11E3                DLOOP_8:   .SET   DLOOP_7   
11E3                DLOOP_7:   .SET   DLOOP_6   
11E3                DLOOP_6:   .SET   DLOOP_5   
11E3                DLOOP_5:   .SET   DLOOP_4   
11E3                DLOOP_4:   .SET   DLOOP_3   
11E3                DLOOP_3:   .SET   DLOOP_2   
11E3                DLOOP_2:   .SET   DLOOP_TOP   
11E3                DLOOP_TOP:   .SET   $   
11E3                L_M_1965S206:      
11E3   CD 6E 11               CALL   getc   
11E6   FE 08                  CP   $08   
11E8                          ;*Macro unroll:  _if z
11E8   CA EE 11               JP   z,L_M_1968S209   
11EB   C3 EB 11               JP   $   
11EE                          ;*Macro unroll:  STRUC_PUSH $
11EE                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
11EE                STRUC_12:   .SET   STRUC_11   
11EE                STRUC_11:   .SET   STRUC_10   
11EE                STRUC_10:   .SET   STRUC_9   
11EE                STRUC_9:   .SET   STRUC_8   
11EE                STRUC_8:   .SET   STRUC_7   
11EE                STRUC_7:   .SET   STRUC_6   
11EE                STRUC_6:   .SET   STRUC_5   
11EE                STRUC_5:   .SET   STRUC_4   
11EE                STRUC_4:   .SET   STRUC_3   
11EE                STRUC_3:   .SET   STRUC_2   
11EE                STRUC_2:   .SET   STRUC_TOP   
11EE                STRUC_TOP:   .SET   $   
11EE                L_M_1968S209:      
11EE                          ;*Macro unroll:  checkZeroWord B,C
11EE   79                     LD   A,C   
11EF   B0                     OR   B   
11F0                          ;*Macro unroll:  _if nz
11F0   C2 F6 11               JP   nz,L_M_1970S211   
11F3   C3 F3 11               JP   $   
11F6                          ;*Macro unroll:  STRUC_PUSH $
11F6                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
11F6                STRUC_12:   .SET   STRUC_11   
11F6                STRUC_11:   .SET   STRUC_10   
11F6                STRUC_10:   .SET   STRUC_9   
11F6                STRUC_9:   .SET   STRUC_8   
11F6                STRUC_8:   .SET   STRUC_7   
11F6                STRUC_7:   .SET   STRUC_6   
11F6                STRUC_6:   .SET   STRUC_5   
11F6                STRUC_5:   .SET   STRUC_4   
11F6                STRUC_4:   .SET   STRUC_3   
11F6                STRUC_3:   .SET   STRUC_2   
11F6                STRUC_2:   .SET   STRUC_TOP   
11F6                STRUC_TOP:   .SET   $   
11F6                L_M_1970S211:      
11F6   2B                     DEC   HL   
11F7   0B                     DEC   BC   
11F8   3E 08                  LD   a,$08   
11FA   CD 9E 11               CALL   putc   
11FD   CD 9F 12               CALL   printSpace   
1200   3E 08                  LD   A,$08   
1202   CD 9E 11               CALL   putc   
1205                          ;*Macro unroll:  _endif
1205                          ;*Macro unroll:  STRUC_FWD
1205                CUR_ADR:   .SET   $   
11F4                          .ORG   STRUC_TOP - 2   
11F4   05 12                  DW   CUR_ADR   
1205                          .ORG   CUR_ADR   
1205                          ;*Macro unroll:  STRUC_POP
1205                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
1205                STRUC_TOP:   .SET   STRUC_2   
1205                STRUC_2:   .SET   STRUC_3   
1205                STRUC_3:   .SET   STRUC_4   
1205                STRUC_4:   .SET   STRUC_5   
1205                STRUC_5:   .SET   STRUC_6   
1205                STRUC_6:   .SET   STRUC_7   
1205                STRUC_7:   .SET   STRUC_8   
1205                STRUC_8:   .SET   STRUC_9   
1205                STRUC_9:   .SET   STRUC_10   
1205                STRUC_10:   .SET   STRUC_11   
1205                STRUC_11:   .SET   STRUC_12   
1205                STRUC_12:   .SET   0   
1205                          ;*Macro unroll:  _else
1205   C3 05 12               JP   $   
1208                          ;*Macro unroll:  STRUC_FWD
1208                CUR_ADR:   .SET   $   
11EC                          .ORG   STRUC_TOP - 2   
11EC   08 12                  DW   CUR_ADR   
1208                          .ORG   CUR_ADR   
1208                STRUC_TOP:   .SET   $   
1208   77                     LD   (HL),A   
1209   23                     INC   HL   
120A   03                     INC   BC   
120B   CB 7F                  BIT   7,a   
120D                          ;*Macro unroll:  _if z
120D   CA 13 12               JP   z,L_M_1984S225   
1210   C3 10 12               JP   $   
1213                          ;*Macro unroll:  STRUC_PUSH $
1213                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
1213                STRUC_12:   .SET   STRUC_11   
1213                STRUC_11:   .SET   STRUC_10   
1213                STRUC_10:   .SET   STRUC_9   
1213                STRUC_9:   .SET   STRUC_8   
1213                STRUC_8:   .SET   STRUC_7   
1213                STRUC_7:   .SET   STRUC_6   
1213                STRUC_6:   .SET   STRUC_5   
1213                STRUC_5:   .SET   STRUC_4   
1213                STRUC_4:   .SET   STRUC_3   
1213                STRUC_3:   .SET   STRUC_2   
1213                STRUC_2:   .SET   STRUC_TOP   
1213                STRUC_TOP:   .SET   $   
1213                L_M_1984S225:      
1213   CD 9E 11               CALL   putc   
1216                          ;*Macro unroll:  _endif
1216                          ;*Macro unroll:  STRUC_FWD
1216                CUR_ADR:   .SET   $   
1211                          .ORG   STRUC_TOP - 2   
1211   16 12                  DW   CUR_ADR   
1216                          .ORG   CUR_ADR   
1216                          ;*Macro unroll:  STRUC_POP
1216                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
1216                STRUC_TOP:   .SET   STRUC_2   
1216                STRUC_2:   .SET   STRUC_3   
1216                STRUC_3:   .SET   STRUC_4   
1216                STRUC_4:   .SET   STRUC_5   
1216                STRUC_5:   .SET   STRUC_6   
1216                STRUC_6:   .SET   STRUC_7   
1216                STRUC_7:   .SET   STRUC_8   
1216                STRUC_8:   .SET   STRUC_9   
1216                STRUC_9:   .SET   STRUC_10   
1216                STRUC_10:   .SET   STRUC_11   
1216                STRUC_11:   .SET   STRUC_12   
1216                STRUC_12:   .SET   0   
1216   FE 0D                  CP   "\r"   
1218   28 0B                  JR   z,getLineCheck   
121A   FE 0A                  CP   "\n"   
121C   28 07                  JR   z,getLineCheck   
121E   7B                     LD   A,E   
121F   B9                     CP   C   
1220   38 03                  JR   c,getLineCheck   
1222                          ;*Macro unroll:  _endif
1222                          ;*Macro unroll:  STRUC_FWD
1222                CUR_ADR:   .SET   $   
1206                          .ORG   STRUC_TOP - 2   
1206   22 12                  DW   CUR_ADR   
1222                          .ORG   CUR_ADR   
1222                          ;*Macro unroll:  STRUC_POP
1222                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
1222                STRUC_TOP:   .SET   STRUC_2   
1222                STRUC_2:   .SET   STRUC_3   
1222                STRUC_3:   .SET   STRUC_4   
1222                STRUC_4:   .SET   STRUC_5   
1222                STRUC_5:   .SET   STRUC_6   
1222                STRUC_6:   .SET   STRUC_7   
1222                STRUC_7:   .SET   STRUC_8   
1222                STRUC_8:   .SET   STRUC_9   
1222                STRUC_9:   .SET   STRUC_10   
1222                STRUC_10:   .SET   STRUC_11   
1222                STRUC_11:   .SET   STRUC_12   
1222                STRUC_12:   .SET   0   
1222                          ;*Macro unroll:  _enddo
1222   C3 E3 11               JP   DLOOP_TOP   
1225                          ;*Macro unroll:  DLOOP_FWD
1225                CUR_ADR:   .SET   $   
11E1                          .ORG   DLOOP_TOP - 2   
11E1   25 12                  DW   CUR_ADR   
1225                          .ORG   CUR_ADR   
1225                          ;*Macro unroll:  DLOOP_POP
1225                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
1225                DLOOP_TOP:   .SET   DLOOP_2   
1225                DLOOP_2:   .SET   DLOOP_3   
1225                DLOOP_3:   .SET   DLOOP_4   
1225                DLOOP_4:   .SET   DLOOP_5   
1225                DLOOP_5:   .SET   DLOOP_6   
1225                DLOOP_6:   .SET   DLOOP_7   
1225                DLOOP_7:   .SET   DLOOP_8   
1225                DLOOP_8:   .SET   DLOOP_9   
1225                DLOOP_9:   .SET   DLOOP_10   
1225                DLOOP_10:   .SET   DLOOP_11   
1225                DLOOP_11:   .SET   DLOOP_12   
1225                DLOOP_12:   .SET   0   
1225                GETLINECHECK:      
1225   3E 00                  LD   a,0   
1227   B9                     CP   c   
1228                          ;*Macro unroll:  _until nz
1228   C2 DB 11               JP   nz,DLOOP_TOP - 3   
122B                          ;*Macro unroll:  DLOOP_FWD               ; needed?
122B                CUR_ADR:   .SET   $   ; needed?
11DC                          .ORG   DLOOP_TOP - 2   
11DC   2B 12                  DW   CUR_ADR   
122B                          .ORG   CUR_ADR   
122B                          ;*Macro unroll:  _enddo
122B   C3 DE 11               JP   DLOOP_TOP   
122E                          ;*Macro unroll:  DLOOP_FWD
122E                CUR_ADR:   .SET   $   
11DC                          .ORG   DLOOP_TOP - 2   
11DC   2E 12                  DW   CUR_ADR   
122E                          .ORG   CUR_ADR   
122E                          ;*Macro unroll:  DLOOP_POP
122E                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
122E                DLOOP_TOP:   .SET   DLOOP_2   
122E                DLOOP_2:   .SET   DLOOP_3   
122E                DLOOP_3:   .SET   DLOOP_4   
122E                DLOOP_4:   .SET   DLOOP_5   
122E                DLOOP_5:   .SET   DLOOP_6   
122E                DLOOP_6:   .SET   DLOOP_7   
122E                DLOOP_7:   .SET   DLOOP_8   
122E                DLOOP_8:   .SET   DLOOP_9   
122E                DLOOP_9:   .SET   DLOOP_10   
122E                DLOOP_10:   .SET   DLOOP_11   
122E                DLOOP_11:   .SET   DLOOP_12   
122E                DLOOP_12:   .SET   0   
122E   F1                     POP   AF   
122F   E1                     POP   HL   
1230   CD 96 12               CALL   printCR   
1233   C9                     RET      
1234                PRINTROUTINE:      
1234                          ;*Macro unroll:  _do
1234   18 03                  JR   L_M_2006S249   
1236   C3 36 12               JP   $   
1239                          ;*Macro unroll:  DLOOP_PUSH $
1239                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
1239                DLOOP_12:   .SET   DLOOP_11   
1239                DLOOP_11:   .SET   DLOOP_10   
1239                DLOOP_10:   .SET   DLOOP_9   
1239                DLOOP_9:   .SET   DLOOP_8   
1239                DLOOP_8:   .SET   DLOOP_7   
1239                DLOOP_7:   .SET   DLOOP_6   
1239                DLOOP_6:   .SET   DLOOP_5   
1239                DLOOP_5:   .SET   DLOOP_4   
1239                DLOOP_4:   .SET   DLOOP_3   
1239                DLOOP_3:   .SET   DLOOP_2   
1239                DLOOP_2:   .SET   DLOOP_TOP   
1239                DLOOP_TOP:   .SET   $   
1239                L_M_2006S249:      
1239   1A                     LD   A,(DE)   
123A   CD 9E 11               CALL   putc   
123D   13                     INC   DE   
123E   0B                     DEC   BC   
123F                          ;*Macro unroll:  checkZeroWord B,C
123F   79                     LD   A,C   
1240   B0                     OR   B   
1241                          ;*Macro unroll:  _until z
1241   CA 36 12               JP   z,DLOOP_TOP - 3   
1244                          ;*Macro unroll:  DLOOP_FWD               ; needed?
1244                CUR_ADR:   .SET   $   ; needed?
1237                          .ORG   DLOOP_TOP - 2   
1237   44 12                  DW   CUR_ADR   
1244                          .ORG   CUR_ADR   
1244                          ;*Macro unroll:  _enddo
1244   C3 39 12               JP   DLOOP_TOP   
1247                          ;*Macro unroll:  DLOOP_FWD
1247                CUR_ADR:   .SET   $   
1237                          .ORG   DLOOP_TOP - 2   
1237   47 12                  DW   CUR_ADR   
1247                          .ORG   CUR_ADR   
1247                          ;*Macro unroll:  DLOOP_POP
1247                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
1247                DLOOP_TOP:   .SET   DLOOP_2   
1247                DLOOP_2:   .SET   DLOOP_3   
1247                DLOOP_3:   .SET   DLOOP_4   
1247                DLOOP_4:   .SET   DLOOP_5   
1247                DLOOP_5:   .SET   DLOOP_6   
1247                DLOOP_6:   .SET   DLOOP_7   
1247                DLOOP_7:   .SET   DLOOP_8   
1247                DLOOP_8:   .SET   DLOOP_9   
1247                DLOOP_9:   .SET   DLOOP_10   
1247                DLOOP_10:   .SET   DLOOP_11   
1247                DLOOP_11:   .SET   DLOOP_12   
1247                DLOOP_12:   .SET   0   
1247   C9                     RET      
1248                             ; 
1248                             ; getKey -  inputs a line buffered character
1248                             ; params: none
1248                             ; returns: A = character,
1248                             ; 
1248                GETKEY:      
1248   E5                     PUSH   HL   
1249   D5                     PUSH   DE   
124A   C5                     PUSH   BC   
124B   2A 49 82               LD   HL,(currkey)   
124E   ED 5B 4B 82            LD   DE,(lineBufTop)   
1252   B7                     OR   A   
1253   ED 52                  SBC   HL,DE   ; exhausted the input lineBuf?
1255                          ;*Macro unroll:  _if nc
1255   D2 5B 12               JP   nc,L_M_2028S273   
1258   C3 58 12               JP   $   
125B                          ;*Macro unroll:  STRUC_PUSH $
125B                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
125B                STRUC_12:   .SET   STRUC_11   
125B                STRUC_11:   .SET   STRUC_10   
125B                STRUC_10:   .SET   STRUC_9   
125B                STRUC_9:   .SET   STRUC_8   
125B                STRUC_8:   .SET   STRUC_7   
125B                STRUC_7:   .SET   STRUC_6   
125B                STRUC_6:   .SET   STRUC_5   
125B                STRUC_5:   .SET   STRUC_4   
125B                STRUC_4:   .SET   STRUC_3   
125B                STRUC_3:   .SET   STRUC_2   
125B                STRUC_2:   .SET   STRUC_TOP   
125B                STRUC_TOP:   .SET   $   
125B                L_M_2028S273:      
125B   2A 45 82               LD   HL,(lineBufStart)   ; lineBuf
125E   ED 5B 47 82            LD   DE,(lineBufSize)   ; LINE_BUFSIZE
1262   CD B8 11               CALL   getline   
1265   21 4D 82               LD   HL,lineBuf   
1268   22 49 82               LD   (currkey),HL   
126B   B7                     OR   A   
126C   ED 4A                  ADC   HL,BC   ; lineBuf+DE = lineBufTop
126E   22 4B 82               LD   (lineBufTop),HL   
1271                          ;*Macro unroll:  _endif
1271                          ;*Macro unroll:  STRUC_FWD
1271                CUR_ADR:   .SET   $   
1259                          .ORG   STRUC_TOP - 2   
1259   71 12                  DW   CUR_ADR   
1271                          .ORG   CUR_ADR   
1271                          ;*Macro unroll:  STRUC_POP
1271                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
1271                STRUC_TOP:   .SET   STRUC_2   
1271                STRUC_2:   .SET   STRUC_3   
1271                STRUC_3:   .SET   STRUC_4   
1271                STRUC_4:   .SET   STRUC_5   
1271                STRUC_5:   .SET   STRUC_6   
1271                STRUC_6:   .SET   STRUC_7   
1271                STRUC_7:   .SET   STRUC_8   
1271                STRUC_8:   .SET   STRUC_9   
1271                STRUC_9:   .SET   STRUC_10   
1271                STRUC_10:   .SET   STRUC_11   
1271                STRUC_11:   .SET   STRUC_12   
1271                STRUC_12:   .SET   0   
1271   2A 49 82               LD   HL,(currkey)   
1274   7E                     LD   A,(HL)   ; get next key from input lineBuf
1275   23                     INC   HL   
1276   22 49 82               LD   (currkey),HL   ; increment currkey
1279   C1                     POP   BC   
127A   D1                     POP   DE   
127B   E1                     POP   HL   
127C   C9                     RET      
127D                             ; 
127D                             ; Output pascal string ***
127D                             ; params: DE = addr
127D                             ; 
127D                PRINTPSTR:      
127D   F5                     PUSH   AF   
127E   C5                     PUSH   BC   
127F   D5                     PUSH   DE   
1280   1A                     LD   A,(DE)   
1281   4F                     LD   C,A   
1282   06 00                  LD   B,0   
1284   13                     INC   DE   
1285   CD 34 12               CALL   printRoutine   
1288   D1                     POP   DE   
1289   C1                     POP   BC   
128A   F1                     POP   AF   
128B   C9                     RET      
128C                             ; 
128C                             ; Output string
128C                             ; params: DE = addr, BC = length
128C                             ; 
128C                PRINTSTR:      
128C   F5                     PUSH   AF   
128D   C5                     PUSH   BC   
128E   D5                     PUSH   DE   
128F   CD 34 12               CALL   printRoutine   
1292   D1                     POP   DE   
1293   C1                     POP   BC   
1294   F1                     POP   AF   
1295   C9                     RET      
1296                PRINTCR:      
1296   D5                     PUSH   DE   
1297   11 C5 10               LD   DE,TXT_NEWLINE   
129A   CD 7D 12               CALL   printPStr   
129D   D1                     POP   DE   
129E   C9                     RET      
129F                PRINTSPACE:      
129F   F5                     PUSH   AF   
12A0   3E 20                  LD   A," "   
12A2   CD 9E 11               CALL   putc   
12A5   F1                     POP   AF   
12A6   C9                     RET      
12A7                          ;*Macro unroll: CODE "LIT",3,0,LIT
12A7                HEADER_LIT:      
12A7   71 10                  DW   link   
12A9                LINK:     .SET   HEADER_LIT   
12A9   03                     DB   0 + 3   
12AA   4C 49 54               DB   "LIT"   
12AD                LIT:         
12AD                          ;*Macro unroll: 	PDUP                      ; pushTOS
12AD                          ;*Macro unroll:  PTUCK B,C
12AD   DD 71 00               LD   (IX+0),C   
12B0   DD 23                  INC   IX   
12B2   DD 70 00               LD   (IX+0),B   
12B5   DD 23                  INC   IX   
12B7   E1                     POP   HL   ; pop address of next Forth word in HL
12B8                          ;*Macro unroll: 	readWord HL, B,C                ; read next word and push on TOS, inc HL by 2
12B8   4E                     LD   C,(HL)   ; read next word and push on TOS, inc HL by 2
12B9   23                     INC   HL   
12BA   46                     LD   B,(HL)   
12BB   23                     INC   HL   
12BC                          ;*Macro unroll:  NEXT1
12BC   C3 4B 0F               JP   enter1   
12BF                          ;*Macro unroll: CODE "rot",3,0,ROT       ; x1 x2 x3 -- x2 x3 x1
12BF                HEADER_ROT:      ; x1 x2 x3 -- x2 x3 x1
12BF   A7 12                  DW   link   
12C1                LINK:     .SET   HEADER_ROT   
12C1   03                     DB   0 + 3   
12C2   72 6F 74               DB   "rot"   
12C5                ROT:         
12C5                             ; x3 in BC
12C5                          ;*Macro unroll:  PNIP D,E               ; x2 in DE
12C5   DD 2B                  DEC   IX   ; x2 in DE
12C7   DD 56 00               LD   D,(IX+0)   
12CA   DD 2B                  DEC   IX   
12CC   DD 5E 00               LD   E,(IX+0)   
12CF                          ;*Macro unroll:  PNIP H,L               ; x1 in HL
12CF   DD 2B                  DEC   IX   ; x1 in HL
12D1   DD 66 00               LD   H,(IX+0)   
12D4   DD 2B                  DEC   IX   
12D6   DD 6E 00               LD   L,(IX+0)   
12D9                          ;*Macro unroll:  PTUCK D,E              ; x2 on stack
12D9   DD 73 00               LD   (IX+0),E   ; x2 on stack
12DC   DD 23                  INC   IX   
12DE   DD 72 00               LD   (IX+0),D   
12E1   DD 23                  INC   IX   
12E3                          ;*Macro unroll:  PPUSH H,L               ; PUSH x1 - x2 x3 x1
12E3                          ;*Macro unroll:  PDUP             ; push TOS reg pair
12E3                          ;*Macro unroll:  PTUCK B,C
12E3   DD 71 00               LD   (IX+0),C   
12E6   DD 23                  INC   IX   
12E8   DD 70 00               LD   (IX+0),B   
12EB   DD 23                  INC   IX   
12ED                          ;*Macro unroll:  setTOS H,L
12ED   4D                     LD   C,L   
12EE   44                     LD   B,H   
12EF                             ; x1 in BC
12EF                          ;*Macro unroll:  NEXT
12EF   C3 4A 0F               JP   enter   
12F2                          ;*Macro unroll: CODE "-rot",4,0,NROT     ; x1 x2 x3 -- x3 x1 x2
12F2                HEADER_NROT:      ; x1 x2 x3 -- x3 x1 x2
12F2   BF 12                  DW   link   
12F4                LINK:     .SET   HEADER_NROT   
12F4   04                     DB   0 + 4   
12F5   2D 72 6F 74            DB   "-rot"   
12F9                NROT:        
12F9                             ; x3 in BC
12F9                          ;*Macro unroll:  PNIP D,E               ; x2 in DE
12F9   DD 2B                  DEC   IX   ; x2 in DE
12FB   DD 56 00               LD   D,(IX+0)   
12FE   DD 2B                  DEC   IX   
1300   DD 5E 00               LD   E,(IX+0)   
1303                          ;*Macro unroll:  PNIP H,L               ; x1 in HL
1303   DD 2B                  DEC   IX   ; x1 in HL
1305   DD 66 00               LD   H,(IX+0)   
1308   DD 2B                  DEC   IX   
130A   DD 6E 00               LD   L,(IX+0)   
130D                          ;*Macro unroll:  PPUSH H,L               ; PUSH x1 - x3 x1
130D                          ;*Macro unroll:  PDUP             ; push TOS reg pair
130D                          ;*Macro unroll:  PTUCK B,C
130D   DD 71 00               LD   (IX+0),C   
1310   DD 23                  INC   IX   
1312   DD 70 00               LD   (IX+0),B   
1315   DD 23                  INC   IX   
1317                          ;*Macro unroll:  setTOS H,L
1317   4D                     LD   C,L   
1318   44                     LD   B,H   
1319                          ;*Macro unroll:  PPUSH D,E               ; PUSH x2 - x3 x1 x2
1319                          ;*Macro unroll:  PDUP             ; push TOS reg pair
1319                          ;*Macro unroll:  PTUCK B,C
1319   DD 71 00               LD   (IX+0),C   
131C   DD 23                  INC   IX   
131E   DD 70 00               LD   (IX+0),B   
1321   DD 23                  INC   IX   
1323                          ;*Macro unroll:  setTOS D,E
1323   4B                     LD   C,E   
1324   42                     LD   B,D   
1325                             ; x2 in BC
1325                          ;*Macro unroll:  NEXT
1325   C3 4A 0F               JP   enter   
1328                          ;*Macro unroll: CODE "dup",3,0,DUPP        ; x -- x x
1328                HEADER_DUPP:      ; x -- x x
1328   F2 12                  DW   link   
132A                LINK:     .SET   HEADER_DUPP   
132A   03                     DB   0 + 3   
132B   64 75 70               DB   "dup"   
132E                DUPP:        
132E                          ;*Macro unroll:  PDUP
132E                          ;*Macro unroll:  PTUCK B,C
132E   DD 71 00               LD   (IX+0),C   
1331   DD 23                  INC   IX   
1333   DD 70 00               LD   (IX+0),B   
1336   DD 23                  INC   IX   
1338                          ;*Macro unroll:  NEXT
1338   C3 4A 0F               JP   enter   
133B                             ; SWAP     x1 x2 -- x2 x1    swap top two items
133B                          ;*Macro unroll: CODE "swap",4,0,SWAP      ; x1 x2 -- x2 x1
133B                HEADER_SWAP:      ; x1 x2 -- x2 x1
133B   28 13                  DW   link   
133D                LINK:     .SET   HEADER_SWAP   
133D   04                     DB   0 + 4   
133E   73 77 61 70            DB   "swap"   
1342                SWAP:        
1342                          ;*Macro unroll:  PNIP D,E
1342   DD 2B                  DEC   IX   
1344   DD 56 00               LD   D,(IX+0)   
1347   DD 2B                  DEC   IX   
1349   DD 5E 00               LD   E,(IX+0)   
134C                          ;*Macro unroll:  PPUSH D,E
134C                          ;*Macro unroll:  PDUP             ; push TOS reg pair
134C                          ;*Macro unroll:  PTUCK B,C
134C   DD 71 00               LD   (IX+0),C   
134F   DD 23                  INC   IX   
1351   DD 70 00               LD   (IX+0),B   
1354   DD 23                  INC   IX   
1356                          ;*Macro unroll:  setTOS D,E
1356   4B                     LD   C,E   
1357   42                     LD   B,D   
1358                          ;*Macro unroll:  NEXT
1358   C3 4A 0F               JP   enter   
135B                          ;*Macro unroll: CODE "drop",4,0,DROP      ; x --
135B                HEADER_DROP:      ; x --
135B   3B 13                  DW   link   
135D                LINK:     .SET   HEADER_DROP   
135D   04                     DB   0 + 4   
135E   64 72 6F 70            DB   "drop"   
1362                DROP:        
1362                          ;*Macro unroll:  PDROP		    ; drop top of stack
1362                          ;*Macro unroll:  PNIP B,C
1362   DD 2B                  DEC   IX   
1364   DD 46 00               LD   B,(IX+0)   
1367   DD 2B                  DEC   IX   
1369   DD 4E 00               LD   C,(IX+0)   
136C                          ;*Macro unroll:  NEXT
136C   C3 4A 0F               JP   enter   
136F                             ; OVER    x1 x2 -- x1 x2 x1
136F                          ;*Macro unroll: CODE "over",4,0,OVER
136F                HEADER_OVER:      
136F   5B 13                  DW   link   
1371                LINK:     .SET   HEADER_OVER   
1371   04                     DB   0 + 4   
1372   6F 76 65 72            DB   "over"   
1376                OVER:        
1376                          ;*Macro unroll:  PNIP H,L
1376   DD 2B                  DEC   IX   
1378   DD 66 00               LD   H,(IX+0)   
137B   DD 2B                  DEC   IX   
137D   DD 6E 00               LD   L,(IX+0)   
1380                          ;*Macro unroll:  PTUCK H,L
1380   DD 75 00               LD   (IX+0),L   
1383   DD 23                  INC   IX   
1385   DD 74 00               LD   (IX+0),H   
1388   DD 23                  INC   IX   
138A                          ;*Macro unroll:  PPUSH H,L
138A                          ;*Macro unroll:  PDUP             ; push TOS reg pair
138A                          ;*Macro unroll:  PTUCK B,C
138A   DD 71 00               LD   (IX+0),C   
138D   DD 23                  INC   IX   
138F   DD 70 00               LD   (IX+0),B   
1392   DD 23                  INC   IX   
1394                          ;*Macro unroll:  setTOS H,L
1394   4D                     LD   C,L   
1395   44                     LD   B,H   
1396                          ;*Macro unroll:  NEXT
1396   C3 4A 0F               JP   enter   
1399                             ; >R    ( x -- ) ( R: -- x )  Move  x from TOS to the return stack.
1399                          ;*Macro unroll: CODE ">r",2,0,TOR
1399                HEADER_TOR:      
1399   6F 13                  DW   link   
139B                LINK:     .SET   HEADER_TOR   
139B   02                     DB   0 + 2   
139C   3E 72                  DB   ">r"   
139E                TOR:         
139E   E1                     POP   HL   
139F   C5                     PUSH   BC   
13A0   E5                     PUSH   HL   
13A1                          ;*Macro unroll:  PDROP
13A1                          ;*Macro unroll:  PNIP B,C
13A1   DD 2B                  DEC   IX   
13A3   DD 46 00               LD   B,(IX+0)   
13A6   DD 2B                  DEC   IX   
13A8   DD 4E 00               LD   C,(IX+0)   
13AB                          ;*Macro unroll:  NEXT
13AB   C3 4A 0F               JP   enter   
13AE                             ; R>    ( -- x ) ( R: x -- )  Move x from the return stack to TOS
13AE                          ;*Macro unroll: CODE "r>",2,0,RFROM
13AE                HEADER_RFROM:      
13AE   99 13                  DW   link   
13B0                LINK:     .SET   HEADER_RFROM   
13B0   02                     DB   0 + 2   
13B1   72 3E                  DB   "r>"   
13B3                RFROM:       
13B3                          ;*Macro unroll:  PDUP
13B3                          ;*Macro unroll:  PTUCK B,C
13B3   DD 71 00               LD   (IX+0),C   
13B6   DD 23                  INC   IX   
13B8   DD 70 00               LD   (IX+0),B   
13BB   DD 23                  INC   IX   
13BD   E1                     POP   HL   
13BE   C1                     POP   BC   
13BF   E5                     PUSH   HL   
13C0                          ;*Macro unroll:  NEXT
13C0   C3 4A 0F               JP   enter   
13C3                             ;   2DROP       ( w w -- )
13C3                             ;               Discard two items on stack.
13C3                          ;*Macro unroll: CODE	'2DROP',5,0,DDROP
13C3                HEADER_DDROP:      
13C3   AE 13                  DW   link   
13C5                LINK:     .SET   HEADER_DDROP   
13C5   05                     DB   0 + 5   
13C6   32 44 52 4F 50         DB   "2DROP"   
13CB                DDROP:       
13CB                          ;*Macro unroll:  ENTER
13CB   CF                     RST   $08   
13CC   62 13 62 13 5B 0F      DW   DROP,DROP,EXIT   
13D2                             ;   2DUP        ( w1 w2 -- w1 w2 w1 w2 )
13D2                             ;               Duplicate top two items.
13D2                          ;*Macro unroll: CODE	'2DUP',4,0,DDUP
13D2                HEADER_DDUP:      
13D2   C3 13                  DW   link   
13D4                LINK:     .SET   HEADER_DDUP   
13D4   04                     DB   0 + 4   
13D5   32 44 55 50            DB   "2DUP"   
13D9                DDUP:        
13D9                          ;*Macro unroll:  ENTER
13D9   CF                     RST   $08   
13DA   76 13 76 13 5B 0F      DW   OVER,OVER,EXIT   
13E0                LITSTR:      ; pushes ptr to string and length on stack
13E0                          ;*Macro unroll:  ENTER                                 ; enter forth
13E0   CF                     RST   $08   ; enter forth
13E1   B3 13                  DW   rfrom   
13E3   FA 13 76 13 76 13 E8 00 DW   count,over,over,plus   
13EB   9E 13                  DW   tor   
13ED                          ;*Macro unroll:  EXIT
13ED   5B 0F                  DW   exit   
13EF   C3 4A 0F               JP   enter   
13F2                             ; count extract string length from pascal string  ( ptr -- ptr+1 len )
13F2                          ;*Macro unroll: CODE "count",5,0,count
13F2                HEADER_COUNT:      
13F2   D2 13                  DW   link   
13F4                LINK:     .SET   HEADER_count   
13F4   05                     DB   0 + 5   
13F5   63 6F 75 6E 74         DB   "count"   
13FA                COUNT:       
13FA                          ;*Macro unroll:  ENTER
13FA   CF                     RST   $08   
13FB   2E 13 AD 12 01 00 E8 00 DW   DUPP,LIT,1,plus   ; ( ptr -- ptr ptr+1)
1403   42 13 BB 0F            DW   swap,CAT   ; ( ptr ptr+1 -- ptr+1 len)
1407                          ;*Macro unroll:  EXIT
1407   5B 0F                  DW   exit   
1409   C3 4A 0F               JP   enter   
140C                             ; using 00bbMDBzc0luTWkhLCQyMg== because it's surprisingly difficult
140C                             ; to define the name s" using asm80
140C                          ;*Macro unroll: CODE {"s",$22},2,IMMED,squote
140C                HEADER_SQUOTE:      
140C   F2 13                  DW   link   
140E                LINK:     .SET   HEADER_squote   
140E   82                     DB   IMMED + 2   
140F   73 22                  DB   "s",$22   
1411                SQUOTE:      
1411   18 04                  JR   qt   
1413                          ;*Macro unroll: CODE $22,1,IMMED,QT
1413                HEADER_QT:      
1413   0C 14                  DW   link   
1415                LINK:     .SET   HEADER_QT   
1415   81                     DB   IMMED + 1   
1416   22                     DB   $22   
1417                QT:          
1417                          ;*Macro unroll:  ENTER
1417   CF                     RST   $08   
1418   56 09 8E 0F 72 03      DW   state,AT,zequal   
141E   12 08 54 14            DW   QBRAN,QT3   
1422   AD 12 22 00            DW   LIT,$22   ; delim
1426   AD 12 3F 00            DW   LIT,63   ; limit 63 + length
142A   B9 09 8E 0F            DW   latestStr,AT   
142E   AD 12 CD 82 56 01      DW   LIT,wordBuf,equal   
1434   12 08 40 14            DW   QBRAN,QT1   
1438   AD 12 0D 83            DW   LIT,wordBuf2   
143C   2F 08 44 14            DW   BRAN,QT2   
1440                QT1:         
1440   AD 12 CD 82            DW   LIT,wordBuf   
1444                QT2:         
1444   B9 09 6D 0F            DW   latestStr,STORE   ; STORE here in latestStr
1448   B9 09 8E 0F            DW   latestStr,AT   
144C   DA 0C FA 13            DW   xword,count   
1450   2F 08 66 14            DW   BRAN,QT4   
1454                QT3:         
1454   AD 12 E0 13 5A 10      DW   LIT,litstr,comma   
145A   AD 12 22 00 C2 0C      DW   LIT,$22,word   
1460   BB 0F 9A 03            DW   CAT,ONEP   
1464   38 10                  DW   allot   
1466                QT4:         
1466                          ;*Macro unroll:  EXIT
1466   5B 0F                  DW   exit   
1468   C3 4A 0F               JP   enter   
146B                             ; 
146B                             ; compareStr - string equal
146B                             ; params: de = string1, HL = string2, BC = length
146B                             ; returns: a = -1, 0, 1, HL = mismatch char if a != 0
146B                             ; destroys: de, HL, BC
146B                             ; 
146B                COMPARESTR:      
146B                          ;*Macro unroll:  checkZeroWord B,C    ; test for Count=0
146B   79                     LD   A,C   ; test for Count=0
146C   B0                     OR   B   
146D                          ;*Macro unroll:  _if nz          ; length zero = match
146D   C2 73 14               JP   nz,L_M_2199S58   ; length zero = match
1470   C3 70 14               JP   $   
1473                          ;*Macro unroll:  STRUC_PUSH $
1473                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
1473                STRUC_12:   .SET   STRUC_11   
1473                STRUC_11:   .SET   STRUC_10   
1473                STRUC_10:   .SET   STRUC_9   
1473                STRUC_9:   .SET   STRUC_8   
1473                STRUC_8:   .SET   STRUC_7   
1473                STRUC_7:   .SET   STRUC_6   
1473                STRUC_6:   .SET   STRUC_5   
1473                STRUC_5:   .SET   STRUC_4   
1473                STRUC_4:   .SET   STRUC_3   
1473                STRUC_3:   .SET   STRUC_2   
1473                STRUC_2:   .SET   STRUC_TOP   
1473                STRUC_TOP:   .SET   $   
1473                L_M_2199S58:      
1473                          ;*Macro unroll:  _do
1473   18 03                  JR   L_M_2200S59   
1475   C3 75 14               JP   $   
1478                          ;*Macro unroll:  DLOOP_PUSH $
1478                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
1478                DLOOP_12:   .SET   DLOOP_11   
1478                DLOOP_11:   .SET   DLOOP_10   
1478                DLOOP_10:   .SET   DLOOP_9   
1478                DLOOP_9:   .SET   DLOOP_8   
1478                DLOOP_8:   .SET   DLOOP_7   
1478                DLOOP_7:   .SET   DLOOP_6   
1478                DLOOP_6:   .SET   DLOOP_5   
1478                DLOOP_5:   .SET   DLOOP_4   
1478                DLOOP_4:   .SET   DLOOP_3   
1478                DLOOP_3:   .SET   DLOOP_2   
1478                DLOOP_2:   .SET   DLOOP_TOP   
1478                DLOOP_TOP:   .SET   $   
1478                L_M_2200S59:      
1478   1A                     LD   A,(DE)   
1479   13                     INC   DE   
147A   ED A1                  CPI      
147C                          ;*Macro unroll:  _if nz          ; char mismatch: exit
147C   C2 82 14               JP   nz,L_M_2204S63   ; char mismatch: exit
147F   C3 7F 14               JP   $   
1482                          ;*Macro unroll:  STRUC_PUSH $
1482                STRUC_COUNT:   .SET   STRUC_COUNT + 1   
1482                STRUC_12:   .SET   STRUC_11   
1482                STRUC_11:   .SET   STRUC_10   
1482                STRUC_10:   .SET   STRUC_9   
1482                STRUC_9:   .SET   STRUC_8   
1482                STRUC_8:   .SET   STRUC_7   
1482                STRUC_7:   .SET   STRUC_6   
1482                STRUC_6:   .SET   STRUC_5   
1482                STRUC_5:   .SET   STRUC_4   
1482                STRUC_4:   .SET   STRUC_3   
1482                STRUC_3:   .SET   STRUC_2   
1482                STRUC_2:   .SET   STRUC_TOP   
1482                STRUC_TOP:   .SET   $   
1482                L_M_2204S63:      
1482   2B                     DEC   HL   ; point at mismatch char
1483   BE                     CP   (HL)   ; set carry if char1 < char2
1484   9F                     SBC   A,A   
1485   F6 01                  OR   1   ; a = ff if carry, 1 if no carry
1487   C9                     RET      
1488                          ;*Macro unroll:  _endif
1488                          ;*Macro unroll:  STRUC_FWD
1488                CUR_ADR:   .SET   $   
1480                          .ORG   STRUC_TOP - 2   
1480   88 14                  DW   CUR_ADR   
1488                          .ORG   CUR_ADR   
1488                          ;*Macro unroll:  STRUC_POP
1488                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
1488                STRUC_TOP:   .SET   STRUC_2   
1488                STRUC_2:   .SET   STRUC_3   
1488                STRUC_3:   .SET   STRUC_4   
1488                STRUC_4:   .SET   STRUC_5   
1488                STRUC_5:   .SET   STRUC_6   
1488                STRUC_6:   .SET   STRUC_7   
1488                STRUC_7:   .SET   STRUC_8   
1488                STRUC_8:   .SET   STRUC_9   
1488                STRUC_9:   .SET   STRUC_10   
1488                STRUC_10:   .SET   STRUC_11   
1488                STRUC_11:   .SET   STRUC_12   
1488                STRUC_12:   .SET   0   
1488                          ;*Macro unroll:  _until po
1488   E2 75 14               JP   po,DLOOP_TOP - 3   
148B                          ;*Macro unroll:  DLOOP_FWD               ; needed?
148B                CUR_ADR:   .SET   $   ; needed?
1476                          .ORG   DLOOP_TOP - 2   
1476   8B 14                  DW   CUR_ADR   
148B                          .ORG   CUR_ADR   
148B                          ;*Macro unroll:  _enddo
148B   C3 78 14               JP   DLOOP_TOP   
148E                          ;*Macro unroll:  DLOOP_FWD
148E                CUR_ADR:   .SET   $   
1476                          .ORG   DLOOP_TOP - 2   
1476   8E 14                  DW   CUR_ADR   
148E                          .ORG   CUR_ADR   
148E                          ;*Macro unroll:  DLOOP_POP
148E                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
148E                DLOOP_TOP:   .SET   DLOOP_2   
148E                DLOOP_2:   .SET   DLOOP_3   
148E                DLOOP_3:   .SET   DLOOP_4   
148E                DLOOP_4:   .SET   DLOOP_5   
148E                DLOOP_5:   .SET   DLOOP_6   
148E                DLOOP_6:   .SET   DLOOP_7   
148E                DLOOP_7:   .SET   DLOOP_8   
148E                DLOOP_8:   .SET   DLOOP_9   
148E                DLOOP_9:   .SET   DLOOP_10   
148E                DLOOP_10:   .SET   DLOOP_11   
148E                DLOOP_11:   .SET   DLOOP_12   
148E                DLOOP_12:   .SET   0   
148E                          ;*Macro unroll:  _endif
148E                          ;*Macro unroll:  STRUC_FWD
148E                CUR_ADR:   .SET   $   
1471                          .ORG   STRUC_TOP - 2   
1471   8E 14                  DW   CUR_ADR   
148E                          .ORG   CUR_ADR   
148E                          ;*Macro unroll:  STRUC_POP
148E                STRUC_COUNT:   .SET   STRUC_COUNT - 1   
148E                STRUC_TOP:   .SET   STRUC_2   
148E                STRUC_2:   .SET   STRUC_3   
148E                STRUC_3:   .SET   STRUC_4   
148E                STRUC_4:   .SET   STRUC_5   
148E                STRUC_5:   .SET   STRUC_6   
148E                STRUC_6:   .SET   STRUC_7   
148E                STRUC_7:   .SET   STRUC_8   
148E                STRUC_8:   .SET   STRUC_9   
148E                STRUC_9:   .SET   STRUC_10   
148E                STRUC_10:   .SET   STRUC_11   
148E                STRUC_11:   .SET   STRUC_12   
148E                STRUC_12:   .SET   0   
148E                             ; count exhausted & no mismatch found
148E   3E 00                  LD   A,0   ; a=0 (s1=s2)
1490   C9                     RET      
1491                          ;*Macro unroll: CODE "pack",4,0,pack             ; ( adr1 len adr2 -- adr2 )
1491                HEADER_PACK:      ; ( adr1 len adr2 -- adr2 )
1491   13 14                  DW   link   
1493                LINK:     .SET   HEADER_pack   
1493   04                     DB   0 + 4   
1494   70 61 63 6B            DB   "pack"   
1498                PACK:        
1498                          ;*Macro unroll:  PPOP D,E                        ; DE = adr2, BC = len
1498                          ;*Macro unroll:  getTOS D,E
1498   59                     LD   E,C   
1499   50                     LD   D,B   
149A                          ;*Macro unroll:  PDROP
149A                          ;*Macro unroll:  PNIP B,C
149A   DD 2B                  DEC   IX   
149C   DD 46 00               LD   B,(IX+0)   
149F   DD 2B                  DEC   IX   
14A1   DD 4E 00               LD   C,(IX+0)   
14A4   D5                     PUSH   DE   
14A5                          ;*Macro unroll:  PNIP H,L                       ; HL = adr1
14A5   DD 2B                  DEC   IX   ; HL = adr1
14A7   DD 66 00               LD   H,(IX+0)   
14AA   DD 2B                  DEC   IX   
14AC   DD 6E 00               LD   L,(IX+0)   
14AF   79                     LD   A,C   
14B0   12                     LD   (DE),A   ; write length byte to adr2
14B1   13                     INC   DE   ; adr2 += 1
14B2   ED B0                  LDIR      
14B4   C1                     POP   BC   ; TOS = adr2
14B5                          ;*Macro unroll:  NEXT
14B5   C3 4A 0F               JP   enter   
14B8                             ; .s print stack (non-destructively)
14B8                          ;*Macro unroll: CODE ".s",2,0,dots                   ; ( -- )
14B8                HEADER_DOTS:      ; ( -- )
14B8   91 14                  DW   link   
14BA                LINK:     .SET   HEADER_dots   
14BA   02                     DB   0 + 2   
14BB   2E 73                  DB   ".s"   
14BD                DOTS:        
14BD                          ;*Macro unroll:  ENTER
14BD   CF                     RST   $08   
14BE   06 10                  DW   spAT   ; psp
14C0   86 09 8E 0F            DW   sp0,AT   ; psp0
14C4   38 01                  DW   SUBB   
14C6   AD 12 00 00 A6 01      DW   LIT,0,GREATR   
14CC   12 08 00 15            DW   QBRAN,DOTS3   
14D0   86 09 8E 0F AD 12 02 00 E8 00 DW   sp0,AT,LIT,2,plus   
14DA                DOTS1:       
14DA   2E 13                  DW   DUPP   
14DC   06 10 AD 12 02 00 38 01 DW   spAT,LIT,2,SUBB   
14E4   42 13 38 01 87 03      DW   swap,SUBB,ZNEQU   
14EA   12 08 FE 14            DW   QBRAN,DOTS2   
14EE   2E 13 8E 0F 43 0A      DW   DUPP,AT,dot   
14F4   AD 12 02 00 E8 00      DW   LIT,2,plus   
14FA   2F 08 DA 14            DW   BRAN,DOTS1   
14FE                DOTS2:       
14FE   62 13                  DW   drop   
1500                DOTS3:       
1500                          ;*Macro unroll:  EXIT
1500   5B 0F                  DW   exit   
1502   C3 4A 0F               JP   enter   
1505                          ;*Macro unroll: CODE "words", 5, 0, WORDS
1505                HEADER_WORDS:      
1505   B8 14                  DW   link   
1507                LINK:     .SET   HEADER_WORDS   
1507   05                     DB   0 + 5   
1508   77 6F 72 64 73         DB   "words"   
150D                WORDS:       
150D   C5                     PUSH   BC   
150E   CD 15 15               CALL   listWords   
1511   C1                     POP   BC   
1512                          ;*Macro unroll:  NEXT
1512   C3 4A 0F               JP   enter   
1515                LISTWORDS:      
1515   ED 5B 5F 84            LD   DE,(VAR_LATEST)   ; search dictionary backwards from LATEST
1519                          ;*Macro unroll:  _do
1519   18 03                  JR   L_M_2255S31   
151B   C3 1B 15               JP   $   
151E                          ;*Macro unroll:  DLOOP_PUSH $
151E                DLOOP_COUNT:   .SET   DLOOP_COUNT + 1   
151E                DLOOP_12:   .SET   DLOOP_11   
151E                DLOOP_11:   .SET   DLOOP_10   
151E                DLOOP_10:   .SET   DLOOP_9   
151E                DLOOP_9:   .SET   DLOOP_8   
151E                DLOOP_8:   .SET   DLOOP_7   
151E                DLOOP_7:   .SET   DLOOP_6   
151E                DLOOP_6:   .SET   DLOOP_5   
151E                DLOOP_5:   .SET   DLOOP_4   
151E                DLOOP_4:   .SET   DLOOP_3   
151E                DLOOP_3:   .SET   DLOOP_2   
151E                DLOOP_2:   .SET   DLOOP_TOP   
151E                DLOOP_TOP:   .SET   $   
151E                L_M_2255S31:      
151E                          ;*Macro unroll:  checkZeroWord D,E                ; NULL pointer?  (end of the linked list)
151E   7B                     LD   A,E   ; NULL pointer?  (end of the linked list)
151F   B2                     OR   D   
1520                          ;*Macro unroll:  _until z
1520   CA 1B 15               JP   z,DLOOP_TOP - 3   
1523                          ;*Macro unroll:  DLOOP_FWD               ; needed?
1523                CUR_ADR:   .SET   $   ; needed?
151C                          .ORG   DLOOP_TOP - 2   
151C   23 15                  DW   CUR_ADR   
1523                          .ORG   CUR_ADR   
1523   D5                     PUSH   DE   ; save ptr to header
1524   13                     INC   DE   ; skip over first field
1525   13                     INC   DE   
1526   1A                     LD   A,(DE)   ; a = flags+length field
1527   E6 7F                  AND   HIDE | LENMASK   ; %al = name length
1529   06 00                  LD   B,0   
152B   4F                     LD   C,A   
152C   13                     INC   DE   
152D   CD 8C 12               CALL   printStr   
1530   CD 9F 12               CALL   printSpace   
1533   CD 9E 11               CALL   putc   
1536   E1                     POP   HL   ; HL = link to previous header
1537   5E                     LD   E,(HL)   
1538   23                     INC   HL   
1539   56                     LD   D,(HL)   ; DE = previous word
153A                          ;*Macro unroll:  _enddo
153A   C3 1E 15               JP   DLOOP_TOP   
153D                          ;*Macro unroll:  DLOOP_FWD
153D                CUR_ADR:   .SET   $   
151C                          .ORG   DLOOP_TOP - 2   
151C   3D 15                  DW   CUR_ADR   
153D                          .ORG   CUR_ADR   
153D                          ;*Macro unroll:  DLOOP_POP
153D                DLOOP_COUNT:   .SET   DLOOP_COUNT - 1   
153D                DLOOP_TOP:   .SET   DLOOP_2   
153D                DLOOP_2:   .SET   DLOOP_3   
153D                DLOOP_3:   .SET   DLOOP_4   
153D                DLOOP_4:   .SET   DLOOP_5   
153D                DLOOP_5:   .SET   DLOOP_6   
153D                DLOOP_6:   .SET   DLOOP_7   
153D                DLOOP_7:   .SET   DLOOP_8   
153D                DLOOP_8:   .SET   DLOOP_9   
153D                DLOOP_9:   .SET   DLOOP_10   
153D                DLOOP_10:   .SET   DLOOP_11   
153D                DLOOP_11:   .SET   DLOOP_12   
153D                DLOOP_12:   .SET   0   
153D   CD 96 12               CALL   printCR   
1540   C9                     RET      
1541                             ; "latest" must be the last word defined
1541                          ;*Macro unroll:  mVAR "latest",6,0,latest, var_latest
1541                          ;*Macro unroll: CODE "latest",6,0,latest
1541                HEADER_LATEST:      
1541   05 15                  DW   link   
1543                LINK:     .SET   HEADER_latest   
1543   06                     DB   0 + 6   
1544   6C 61 74 65 73 74      DB   "latest"   
154A                LATEST:      
154A                          ;*Macro unroll:  PDUP
154A                          ;*Macro unroll:  PTUCK B,C
154A   DD 71 00               LD   (IX+0),C   
154D   DD 23                  INC   IX   
154F   DD 70 00               LD   (IX+0),B   
1552   DD 23                  INC   IX   
1554   01 5F 84               LD   BC,var_latest   
1557                          ;*Macro unroll:  NEXT
1557   C3 4A 0F               JP   enter   
8000                          .ORG   START_RAM   
8000                          IF   TESTMODE   
                    TESTS_START:      
                                 ; 
                                 ; test-macros
                                 ; 
                                 ; macros to facilitate tests
                                 ; 
                    .macro TEST_SET_TEXT,s1
                                 ; 
                     ld HL, (lineBufStart)
                     ld (lineBufTop),HL
                     ld (currkey),HL
                     ld HL, tst_text%%M
                     ld (char_pointer), HL
                     _skip
                    tst_text%%M:
                     db s1,"\r\n",-1,"\r\n"
                     _endskip
                    .endm
                     
                                 ; prevents using _if macro here
                    .macro EXPECT,expect,failtxt
                                 ; 
                     call printNum
                     getTOS H,L
                     ld L, C
                     PDROP
                     CMP16 expect
                     jp z, tf_done%%M            ; asm80 macro nesting issue
                     ld DE, FAILED
                     call printPStr
                     ld DE, te_fail%%M
                     call printPStr
                     halt
                     _skip
                    te_fail%%M:
                     .pstr failtxt
                     _endskip
                    tf_done%%M:
                    .endm
                     
                                 ; 
                                 ; tests
                                 ; 
                                 ; these tests will evaluate when TESTMODE = 1
                                 ; 
                              ;*Macro unroll: TEST_SET_TEXT ": const create , does> @ ;"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2325S7   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2325S7:      
                              DB   ": const create , does> @ ;","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT "100 const y"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2327S9   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2327S9:      
                              DB   "100 const y","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT "y"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2329S11   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2329S11:      
                              DB   "y","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 100, "expect 100"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 100
                              LD   DE,100   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2331S13   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2331S13   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2331S13:      
                              .PSTR   "100 100"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2331S13:      
                              ;*Macro unroll: TEST_SET_TEXT "100 constant y"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2332S15   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2332S15:      
                              DB   "100 constant y","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT "y"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2334S17   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2334S17:      
                              DB   "y","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 100, "expect 100"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 100
                              LD   DE,100   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2336S19   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2336S19   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2336S19:      
                              .PSTR   "100 100"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2336S19:      
                              ;*Macro unroll: TEST_SET_TEXT ": x create does> 1 . ;"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2337S21   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2337S21:      
                              DB   ": x create does> 1 . ;","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT "x y"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2339S23   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2339S23:      
                              DB   "x y","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT "y"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2341S25   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2341S25:      
                              DB   "y","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT ": const create does> , ;"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2343S28   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2343S28:      
                              DB   ": const create does> , ;","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT "23 const x"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2345S30   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2345S30:      
                              DB   "23 const x","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT "x ."
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2347S32   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2347S32:      
                              DB   "x .","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT "23 constant y"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2349S35   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2349S35:      
                              DB   "23 constant y","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT "y"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2351S37   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2351S37:      
                              DB   "y","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 23, "expect 23"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 23
                              LD   DE,23   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2353S39   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2353S39   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2353S39:      
                              .PSTR   "23 23"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2353S39:      
                              ;*Macro unroll: ppushValue 1
                              ;*Macro unroll:  PDUP
                              ;*Macro unroll:  PTUCK B,C
                              LD   (IX+0),C   
                              INC   IX   
                              LD   (IX+0),B   
                              INC   IX   
                              LD   BC,1   
                              ;*Macro unroll: TEST_SET_TEXT "dup"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2355S42   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2355S42:      
                              DB   "dup","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 1, "1 interpret dup"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 1
                              LD   DE,1   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2357S44   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2357S44   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2357S44:      
                              .PSTR   "1 interpret dup"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2357S44:      
                              ;*Macro unroll: EXPECT 1, "1 interpret dup 2"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 1
                              LD   DE,1   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2358S45   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2358S45   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2358S45:      
                              .PSTR   "1 interpret dup 2"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2358S45:      
                              ;*Macro unroll: TEST_SET_TEXT "123"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2359S47   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2359S47:      
                              DB   "123","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 123, "interpret 123"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 123
                              LD   DE,123   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2361S49   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2361S49   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2361S49:      
                              .PSTR   "interpret 123"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2361S49:      
                              ;*Macro unroll: TEST_SET_TEXT "123 constant x123"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2362S51   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2362S51:      
                              DB   "123 constant x123","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT "x123"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2364S53   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2364S53:      
                              DB   "x123","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 123, "constant x123 = 123"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 123
                              LD   DE,123   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2366S55   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2366S55   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2366S55:      
                              .PSTR   "constant x123 = 123"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2366S55:      
                              ;*Macro unroll: TEST_SET_TEXT "variable v1"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2367S57   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2367S57:      
                              DB   "variable v1","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: ppushValue 123
                              ;*Macro unroll:  PDUP
                              ;*Macro unroll:  PTUCK B,C
                              LD   (IX+0),C   
                              INC   IX   
                              LD   (IX+0),B   
                              INC   IX   
                              LD   BC,123   
                              ;*Macro unroll: TEST_SET_TEXT "123 v1 !"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2370S60   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2370S60:      
                              DB   "123 v1 !","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT "v1 @"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2372S62   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2372S62:      
                              DB   "v1 @","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 123, "variable v1 = 123"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 123
                              LD   DE,123   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2374S64   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2374S64   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2374S64:      
                              .PSTR   "variable v1 = 123"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2374S64:      
                              ;*Macro unroll: TEST_SET_TEXT ": dbl dup + ;"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2375S66   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2375S66:      
                              DB   ": dbl dup + ;","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: ppushValue 2
                              ;*Macro unroll:  PDUP
                              ;*Macro unroll:  PTUCK B,C
                              LD   (IX+0),C   
                              INC   IX   
                              LD   (IX+0),B   
                              INC   IX   
                              LD   BC,2   
                              ;*Macro unroll: TEST_SET_TEXT "dbl"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2378S69   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2378S69:      
                              DB   "dbl","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 4, "colon dbl 2 = 4"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 4
                              LD   DE,4   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2380S71   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2380S71   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2380S71:      
                              .PSTR   "colon dbl 2 = 4"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2380S71:      
                              ;*Macro unroll: ppushValue 200
                              ;*Macro unroll:  PDUP
                              ;*Macro unroll:  PTUCK B,C
                              LD   (IX+0),C   
                              INC   IX   
                              LD   (IX+0),B   
                              INC   IX   
                              LD   BC,200   
                              ;*Macro unroll: ppushValue 1
                              ;*Macro unroll:  PDUP
                              ;*Macro unroll:  PTUCK B,C
                              LD   (IX+0),C   
                              INC   IX   
                              LD   (IX+0),B   
                              INC   IX   
                              LD   BC,1   
                              ;*Macro unroll: TEST_SET_TEXT ": testif2 if 100 endif ;"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2383S75   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2383S75:      
                              DB   ": testif2 if 100 endif ;","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT "testif2"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2385S78   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2385S78:      
                              DB   "testif2","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 100, "1 if 100 endif --> 100"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 100
                              LD   DE,100   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2387S80   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2387S80   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2387S80:      
                              .PSTR   "1 if 100 endif --> 100"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2387S80:      
                              ;*Macro unroll: ppushValue 0
                              ;*Macro unroll:  PDUP
                              ;*Macro unroll:  PTUCK B,C
                              LD   (IX+0),C   
                              INC   IX   
                              LD   (IX+0),B   
                              INC   IX   
                              LD   BC,0   
                              ;*Macro unroll: TEST_SET_TEXT "testif2"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2389S83   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2389S83:      
                              DB   "testif2","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 200, "0 if 100 endif --> 200"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 200
                              LD   DE,200   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2391S85   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2391S85   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2391S85:      
                              .PSTR   "0 if 100 endif --> 200"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2391S85:      
                              ;*Macro unroll: TEST_SET_TEXT ": testif3 if 100 else 200 endif ;"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2392S87   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2392S87:      
                              DB   ": testif3 if 100 else 200 endif ;","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: ppushValue 0
                              ;*Macro unroll:  PDUP
                              ;*Macro unroll:  PTUCK B,C
                              LD   (IX+0),C   
                              INC   IX   
                              LD   (IX+0),B   
                              INC   IX   
                              LD   BC,0   
                              ;*Macro unroll: TEST_SET_TEXT "testif3"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2395S92   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2395S92:      
                              DB   "testif3","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 200, "0 --> 200"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 200
                              LD   DE,200   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2397S94   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2397S94   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2397S94:      
                              .PSTR   "0 --> 200"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2397S94:      
                              ;*Macro unroll: ppushValue 1
                              ;*Macro unroll:  PDUP
                              ;*Macro unroll:  PTUCK B,C
                              LD   (IX+0),C   
                              INC   IX   
                              LD   (IX+0),B   
                              INC   IX   
                              LD   BC,1   
                              ;*Macro unroll: TEST_SET_TEXT "testif3"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2399S98   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2399S98:      
                              DB   "testif3","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 100, "1 --> 100"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 100
                              LD   DE,100   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2401S100   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2401S100   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2401S100:      
                              .PSTR   "1 --> 100"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2401S100:      
                              ;*Macro unroll: TEST_SET_TEXT ": testloop begin dup 5 < while dup . 1+ repeat ;"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2402S102   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2402S102:      
                              DB   ": testloop begin dup 5 < while dup . 1+ repeat ;","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: ppushValue 0
                              ;*Macro unroll:  PDUP
                              ;*Macro unroll:  PTUCK B,C
                              LD   (IX+0),C   
                              INC   IX   
                              LD   (IX+0),B   
                              INC   IX   
                              LD   BC,0   
                              ;*Macro unroll: TEST_SET_TEXT "testloop"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2405S105   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2405S105:      
                              DB   "testloop","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 5, "Loop until limit < 5"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 5
                              LD   DE,5   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2407S107   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2407S107   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2407S107:      
                              .PSTR   "Loop until limit < 5"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2407S107:      
                              ;*Macro unroll: TEST_SET_TEXT "100"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2408S110   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2408S110:      
                              DB   "100","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 100, "interpret parse 100"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 100
                              LD   DE,100   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2410S112   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2410S112   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2410S112:      
                              .PSTR   "interpret parse 100"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2410S112:      
                              ;*Macro unroll: TEST_SET_TEXT "3 2 +"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2411S114   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2411S114:      
                              DB   "3 2 +","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 5, "3 + 2 = 5"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 5
                              LD   DE,5   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2413S116   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2413S116   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2413S116:      
                              .PSTR   "3 + 2 = 5"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2413S116:      
                              ;*Macro unroll: TEST_SET_TEXT ": add + ;"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2414S118   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2414S118:      
                              DB   ": add + ;","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: ppushValue 2
                              ;*Macro unroll:  PDUP
                              ;*Macro unroll:  PTUCK B,C
                              LD   (IX+0),C   
                              INC   IX   
                              LD   (IX+0),B   
                              INC   IX   
                              LD   BC,2   
                              ;*Macro unroll: ppushValue 2
                              ;*Macro unroll:  PDUP
                              ;*Macro unroll:  PTUCK B,C
                              LD   (IX+0),C   
                              INC   IX   
                              LD   (IX+0),B   
                              INC   IX   
                              LD   BC,2   
                              ;*Macro unroll: TEST_SET_TEXT "add"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2418S123   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2418S123:      
                              DB   "add","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 4, "2 2 add = 4"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 4
                              LD   DE,4   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2420S125   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2420S125   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2420S125:      
                              .PSTR   "2 2 add = 4"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2420S125:      
                              ;*Macro unroll: TEST_SET_TEXT ": dump 16 base ! over + swap begin over over swap < while dup 7 and 0= if cr dup . endif dup c@ . 1+ repeat cr 10 base ! ;"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2421S127   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2421S127:      
                              DB   ": dump 16 base ! over + swap begin over over swap < while dup 7 and 0= if cr dup . endif dup c@ . 1+ repeat cr 10 base ! ;","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT "dump"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2423S130   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2423S130:      
                              DB   "dump","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT {": str s",$22," xyz",$22," ;"}
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2425S133   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2425S133:      
                              DB   ": str s",$22," xyz",$22," ;","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT "str type"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2427S135   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2427S135:      
                              DB   "str type","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT "str"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2429S137   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2429S137:      
                              DB   "str","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 3, "str len = 3"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 3
                              LD   DE,3   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2431S139   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2431S139   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2431S139:      
                              .PSTR   "str len = 3"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2431S139:      
                              ;*Macro unroll: TEST_SET_TEXT {$22," xyz",$22}
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2432S141   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2432S141:      
                              DB   $22," xyz",$22,"\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT "dup"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2434S143   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2434S143:      
                              DB   "dup","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 3, "str len = 3"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 3
                              LD   DE,3   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2436S145   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2436S145   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2436S145:      
                              .PSTR   "str len = 3"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2436S145:      
                              ;*Macro unroll: TEST_SET_TEXT "type"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2437S146   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2437S146:      
                              DB   "type","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                                 ; 
                                 ; ld HL, 12
                                 ; ld C, 10
                                 ; call divideWordByByte
                                 ; ld B, 0
                                 ; ld C, A
                                 ; EXPECT 2, "div 11 / 10 = 1 1"
                                 ; TEST_SET_TEXT "hello\r\n"
                                 ; call KEY
                                 ; EXPECT $68, "key 'h'"
                                 ; call KEY
                                 ; EXPECT $65, "key 'e'"
                                 ; TEST_SET_TEXT "x"
                                 ; ppushValue $20
                                 ; call WORD
                                 ; call COUNT
                                 ; EXPECT 1, "word 'x'"
                                 ; PPOP H,L   ; drop
                                 ; TEST_SET_TEXT "xyz"
                                 ; ppushValue $20
                                 ; call WORD
                                 ; call COUNT
                                 ; EXPECT 3, "word 'xyz'"
                                 ; PPOP H,L   ; drop
                                 ; TEST_SET_TEXT "a xyz "
                                 ; ppushValue $20
                                 ; call WORD
                                 ; call COUNT
                                 ; EXPECT 1, "word 'a xyz'"
                                 ; ppushValue $20
                                 ; call WORD
                                 ; call COUNT
                                 ; EXPECT 3, "word 'a xyz'"
                                 ; PPOP H,L   ; drop
                                 ; call HERE
                                 ; call AT
                                 ; EXPECT START_USER, "here"
                                 ; TEST_SET_TEXT "xyz"
                                 ; call CREATE
                                 ; call LATEST
                                 ; call AT
                                 ; EXPECT START_USER, "create xyz latest"
                                 ; call HERE
                                 ; call AT
                                 ; EXPECT START_USER + 6, "create xyz here"
                                 ; ppushValue 1
                                 ; ppushValue 2
                                 ; call DUP
                                 ; EXPECT 2, "dup 2"
                                 ; EXPECT 2, "dup 2"
                                 ; ppushValue -10
                                 ; ppushValue 10
                                 ; call STAR
                                 ; EXPECT -100, "expect -10 * 10 to be -100"
                                 ; ppushValue -10
                                 ; ppushValue -20
                                 ; call STAR
                                 ; EXPECT 200, "expect -10 * -20 to be 200"
                                 ; ppushValue 10
                                 ; ppushValue -20
                                 ; call STAR
                                 ; EXPECT -200, "expect -10 * -20 to be 200"
                                 ; ppushValue -101
                                 ; ppushValue 20
                                 ; call SLASHMOD
                                 ; EXPECT -5, "expect -101 / 20 to be -5"
                                 ; EXPECT -1, "expect -101 % 20 to be -1"
                                 ; ppushValue -101
                                 ; ppushValue -20
                                 ; call SLASHMOD
                                 ; EXPECT 5,  "expect -101 / -20 to be 5"
                                 ; EXPECT -1, "expect -101 % -20 to be -1"
                                 ; ppushValue 101
                                 ; ppushValue -20
                                 ; call SLASHMOD
                                 ; EXPECT -5,  "expect 101 / -20 to be -5"
                                 ; EXPECT 1, "expect 101 % -20 to be 1"
                                 ; TEST_SET_TEXT ": testif2 if 100 endif ;"
                                 ; ppushValue 0
                                 ; TEST_SET_TEXT "testloop"
                                 ; call INTERPRET
                                 ; EXPECT 5, "Loop until limit < 5"
                                 ; ppushPText "xyz"
                                 ; call COUNT
                                 ; EXPECT 3, "xyz length 3"
                                 ; call CAT
                                 ; EXPECT "x" + 0, "xyz --> x"
                                 ; ppushValue HEADER_LATEST
                                 ; call TCFA
                                 ; EXPECT HEADER_LATEST + 3 + 6, "cfa 3 bytes plus length of name"
                                 ; ppushValue 1
                                 ; ppushValue 2
                                 ; ppushValue HEADER_PLUS
                                 ; call TCFA
                                 ; call EXECUTE
                                 ; EXPECT 3, "1 2 plus = 3"
                                 ; ppushText "100",3
                                 ; call NUMBER
                                 ; EXPECT 0, "0 = no parse err"
                                 ; EXPECT 100, "parse 100"
                                 ; ppushText "latest",6
                                 ; call FIND
                                 ; EXPECT HEADER_LATEST, "find header of LATEST"
                                 ; TEST_SET_TEXT "base"
                                 ; ENTER
                                 ; dw interpret
                                 ; dw exit_forth
                                 ; call AT
                                 ; EXPECT 10, "expect base to be 10"
                                 ; ppushText "add",3
                                 ; call FIND
                                 ; ppushValue 64
                                 ; TEST_SET_TEXT "decimal"
                                 ; INTERPRET
                                 ; TEST_SET_TEXT "#h 100"
                                 ; INTERPRET
                                 ; EXPECT $100, "expect hex $100"
                                 ; TEST_SET_TEXT "hex"
                                 ; INTERPRET
                                 ; TEST_SET_TEXT "#d 100"
                                 ; INTERPRET
                                 ; EXPECT 100, "expect decimal 100"
                                 ; TEST_SET_TEXT "decimal"
                                 ; INTERPRET
                              ;*Macro unroll: TEST_SET_TEXT "16 base ! 20"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2563S18   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2563S18:      
                              DB   "16 base ! 20","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 32, "expect $20 to be 32"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 32
                              LD   DE,32   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2565S20   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2565S20   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2565S20:      
                              .PSTR   "32 $20 to be 32"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2565S20:      
                              ;*Macro unroll: TEST_SET_TEXT "0A base ! 20"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2566S22   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2566S22:      
                              DB   "0A base ! 20","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 20, "expect decimal 20 to be 32"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 20
                              LD   DE,20   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2568S24   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2568S24   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2568S24:      
                              .PSTR   "20 decimal 20 to be 32"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2568S24:      
                              ;*Macro unroll: TEST_SET_TEXT "100 100 +"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2569S1   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2569S1:      
                              DB   "100 100 +","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 200, "100 100 + = 200"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 200
                              LD   DE,200   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2571S3   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2571S3   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2571S3:      
                              .PSTR   "100 100 + = 200"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2571S3:      
                              ;*Macro unroll: TEST_SET_TEXT "100 10 + ."
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2572S5   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2572S5:      
                              DB   "100 10 + .","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: TEST_SET_TEXT "-10 abs"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2574S8   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2574S8:      
                              DB   "-10 abs","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 10, "expect abs -10 to be 10"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 10
                              LD   DE,10   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2576S10   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2576S10   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2576S10:      
                              .PSTR   "10 abs -10 to be 10"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2576S10:      
                              ;*Macro unroll: TEST_SET_TEXT "10 abs"
                              LD   HL,(lineBufStart)   
                              LD   (lineBufTop),HL   
                              LD   (currkey),HL   
                              LD   HL,tst_textM_2577S12   
                              LD   (char_pointer),HL   
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TST_TEXTM_2577S12:      
                              DB   "10 abs","\r\n",-1,"\r\n"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                              ;*Macro unroll: INTERPRET
                              ;*Macro unroll:  ENTER
                              RST   $08   
                              DW   interpret   
                              DW   exit_forth   
                              ;*Macro unroll: EXPECT 10, "expect abs 10 to be 10"
                              CALL   printNum   
                              ;*Macro unroll:  getTOS H,L
                              LD   L,C   
                              LD   H,B   
                              LD   L,C   
                              ;*Macro unroll:  PDROP
                              ;*Macro unroll:  PNIP B,C
                              DEC   IX   
                              LD   B,(IX+0)   
                              DEC   IX   
                              LD   C,(IX+0)   
                              ;*Macro unroll:  CMP16 10
                              LD   DE,10   
                              OR   A   
                              SBC   HL,DE   
                              ;*Macro unroll:  checkZeroWord H,L
                              LD   A,L   
                              OR   H   
                              JP   z,tf_doneM_2579S14   
                              LD   DE,FAILED   
                              CALL   printPStr   
                              LD   DE,te_failM_2579S14   
                              CALL   printPStr   
                              HALT      
                              ;*Macro unroll:  _skip
                              JP   $   
                              ;*Macro unroll:  STRUC_PUSH $
                    STRUC_COUNT:   .SET   STRUC_COUNT + 1   
                    STRUC_12:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_TOP   
                    STRUC_TOP:   .SET   $   
                    TE_FAILM_2579S14:      
                              .PSTR   "10 abs 10 to be 10"   
                              ;*Macro unroll:  _endskip
                              ;*Macro unroll:  STRUC_FWD
                    CUR_ADR:   .SET   $   
                              .ORG   STRUC_TOP - 2   
                              DW   CUR_ADR   
                              .ORG   CUR_ADR   
                              ;*Macro unroll:  STRUC_POP
                    STRUC_COUNT:   .SET   STRUC_COUNT - 1   
                    STRUC_TOP:   .SET   STRUC_2   
                    STRUC_2:   .SET   STRUC_3   
                    STRUC_3:   .SET   STRUC_4   
                    STRUC_4:   .SET   STRUC_5   
                    STRUC_5:   .SET   STRUC_6   
                    STRUC_6:   .SET   STRUC_7   
                    STRUC_7:   .SET   STRUC_8   
                    STRUC_8:   .SET   STRUC_9   
                    STRUC_9:   .SET   STRUC_10   
                    STRUC_10:   .SET   STRUC_11   
                    STRUC_11:   .SET   STRUC_12   
                    STRUC_12:   .SET   0   
                    TF_DONEM_2579S14:      
                                 ; TEST_SET_TEXT "100 buffer: xvar"
                                 ; INTERPRET
                                 ; TEST_SET_TEXT 00bbJDIyLDAwc3NJaUI0ZVhvaSEsJDIy
                                 ; INTERPRET
                                 ; TEST_SET_TEXT "xvar pack"
                                 ; INTERPRET
                                 ; TEST_SET_TEXT "xvar count dup"
                                 ; INTERPRET
                                 ; EXPECT 3, "str len = 3"
                                 ; TEST_SET_TEXT "type"
                                 ; INTERPRET
                                 ; TEST_SET_TEXT 00bbMDBzc0lpNGkhLCQyMiwwMHNzSWlCcGJXMWxaR2xoZEdVZ2VIbDZJZz09ISwkMjI=
                                 ; INTERPRET
                                 ; TEST_SET_TEXT 00bbMDBzc0lqb2dlREVnTGlJPSEsJDIyLDAwc3NJaUJqYjIxd2FXeGxaQ0I0ZVhvaSEsJDIyLDAwc3NJaUE3SWc9PSE=
                                 ; INTERPRET
                                 ; TEST_SET_TEXT "x1"
                                 ; INTERPRET
                                 ; TEST_SET_TEXT "1 0 if 1 else 2 endif +"
                                 ; INTERPRET
                                 ; EXPECT 3, "1 false -> 1 2 -> 1 2 + -> 3"
                                 ; TEST_SET_TEXT "0 1 if if 100 else 200 endif else 300 endif"
                                 ; INTERPRET
                                 ; EXPECT 200, "select"
                                 ; TEST_SET_TEXT "0 begin dup 5 < while dup . 1+ repeat"
                                 ; INTERPRET
                                 ; EXPECT 5, "Loop until limit < 5"
                                 ; TEST_SET_TEXT "{ if 100 else 200 endif } define: q"
                                 ; INTERPRET
                                 ; TEST_SET_TEXT "0 q"
                                 ; INTERPRET
                                 ; EXPECT 200, "define: q 0 = 200"
                                 ; TEST_SET_TEXT "1 q"
                                 ; INTERPRET
                                 ; EXPECT 100, "define: q 1 = 100"
                                 ; ENTER
                                 ; dw litstr
                                 ; .pstr "Expected parse error"
                                 ; dw type
                                 ; dw exit_forth
                                 ; ppushValue 999
                                 ; TEST_SET_TEXT "$$123"
                                 ; INTERPRET
                                 ; EXPECT 999, "interpret $$123"
                              ;*Macro unroll:  PRINT_STR DONE
                              ;*Macro unroll:  PTUCK D,E
                              LD   (IX+0),E   
                              INC   IX   
                              LD   (IX+0),D   
                              INC   IX   
                              LD   DE,DONE   
                              CALL   printPStr   
                              ;*Macro unroll:  PNIP D,E
                              DEC   IX   
                              LD   D,(IX+0)   
                              DEC   IX   
                              LD   E,(IX+0)   
                              HALT      
8000                          ENDIF      
8000                          DS   RET_STACK_SIZE   ; return stack size
8100                RET_STACK:      ; return stack, grows down
8100                RPP:         ; RP0 grows down (into TIBB)
8100                DATA_STACK:      
8100                          DS   DATA_STACK_SIZE   ; TODO: change remove double data stack size
8200                SPP:         ; SP0 (should) grow down
8200                          ALIGN   $100   
8200                SERBUF:   DS   SER_BUFSIZE   
823F   00 00        SERINPTR:   DW   0   
8241   00 00        SERRDPTR:   DW   0   
8243   00 00        SERBUFUSED:   DW   0   
8245   00 00        LINEBUFSTART:   DW   0   
8247   00 00        LINEBUFSIZE:   DW   0   
8249   00 00        CURRKEY:   DW   0   
824B   00 00        LINEBUFTOP:   DW   0   
824D                LINEBUF:   DS   LINE_BUFSIZE   
82CD                WORDBUF:   DS   64   
830D                WORDBUF2:   DS   64   
834D                VAR_PAD:   DS   PAD_SIZE   
844D   00 00        EXITADDR:   DW   0   
844F   00 00        IS_LITERAL:   DW   0   ; Flag used to record if reading a literal
8451   00 00        VAR_HERE:   DW   0   
8453   00 00        VAR_INTP_STOP:   DW   0   
8455   00 00        VAR_STATE:   DW   0   
8457   00 00        VAR_NESTING:   DW   0   
8459   00 00        VAR_SP0:   DW   0   ;PAR_STACK
845B   00 00        VAR_BASE:   DW   0   
845D   00 00        VAR_LATEST_STR:   DW   0   
845F   00 00        VAR_LATEST:   DW   0   
8461                          IF   TESTMODE   
                                 ; used for mocking getc
                    CHAR_POINTER:   DW   0   
8461                          ENDIF      
8461                START_USER:      ; user allocated data starts here


TESTMODE:           0000 DEFINED AT LINE 3
MC6850_ACIA:        0000 DEFINED AT LINE 4
Z80_PIO:            0001 DEFINED AT LINE 5
MEM_SIZE:           10000 DEFINED AT LINE 1 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
ROM_SIZE:           8000 DEFINED AT LINE 2 IN constants.z80
                    > USED AT LINE 3 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
                    > USED AT LINE 11 IN constants.z80
RAM_SIZE:           8000 DEFINED AT LINE 3 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
BM:                 0000 DEFINED AT LINE 5 IN constants.z80
                    > USED AT LINE 6 IN constants.z80
                    > USED AT LINE 8 IN constants.z80
                    > USED AT LINE 9 IN constants.z80
                    > USED AT LINE 11 IN constants.z80
EM:                 10000 DEFINED AT LINE 6 IN constants.z80
START_ROM:          0000 DEFINED AT LINE 8 IN constants.z80
                    > USED AT LINE 15
END_ROM:            8000 DEFINED AT LINE 9 IN constants.z80
START_RAM:          8000 DEFINED AT LINE 11 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
                    > USED AT LINE 64
END_RAM:            10000 DEFINED AT LINE 12 IN constants.z80
RET_STACK_SIZE:     0100 DEFINED AT LINE 14 IN constants.z80
                    > USED AT LINE 2 IN variables.z80
DATA_STACK_SIZE:    0100 DEFINED AT LINE 15 IN constants.z80
                    > USED AT LINE 7 IN variables.z80
PAD_SIZE:           0100 DEFINED AT LINE 16 IN constants.z80
                    > USED AT LINE 23 IN variables.z80
SER_BUFSIZE:        003F DEFINED AT LINE 18 IN constants.z80
                    > USED AT LINE 82 IN core-serial.z80
                    > USED AT LINE 89 IN core-serial.z80
                    > USED AT LINE 142 IN core-serial.z80
                    > USED AT LINE 11 IN variables.z80
SER_FULLSIZE:       0030 DEFINED AT LINE 19 IN constants.z80
SER_EMPTYSIZE:      0005 DEFINED AT LINE 20 IN constants.z80
LINE_BUFSIZE:       0080 DEFINED AT LINE 21 IN constants.z80
                    > USED AT LINE 16 IN core-serial.z80
                    > USED AT LINE 19 IN variables.z80
IO_DATA:            0080 DEFINED AT LINE 30 IN constants.z80
                    > USED AT LINE 79 IN core-serial.z80
                    > USED AT LINE 184 IN core-serial.z80
IO_CTRL:            0082 DEFINED AT LINE 31 IN constants.z80
                    > USED AT LINE 28 IN core-serial.z80
                    > USED AT LINE 38 IN core-serial.z80
                    > USED AT LINE 40 IN core-serial.z80
                    > USED AT LINE 46 IN core-serial.z80
                    > USED AT LINE 48 IN core-serial.z80
                    > USED AT LINE 54 IN core-serial.z80
                    > USED AT LINE 56 IN core-serial.z80
                    > USED AT LINE 62 IN core-serial.z80
                    > USED AT LINE 64 IN core-serial.z80
                    > USED AT LINE 76 IN core-serial.z80
                    > USED AT LINE 107 IN core-serial.z80
                    > USED AT LINE 175 IN core-serial.z80
IMMED:              0080 DEFINED AT LINE 35 IN constants.z80
                    > USED AT LINE 11
                    > USED AT LINE 11
                    > USED AT LINE 11
                    > USED AT LINE 90 IN core-compiler.z80
                    > USED AT LINE 11
                    > USED AT LINE 11
                    > USED AT LINE 159 IN core-compiler.z80
                    > USED AT LINE 11
                    > USED AT LINE 11
                    > USED AT LINE 11
                    > USED AT LINE 11
                    > USED AT LINE 11
                    > USED AT LINE 11
                    > USED AT LINE 11
                    > USED AT LINE 11
                    > USED AT LINE 11
                    > USED AT LINE 11
                    > USED AT LINE 26
                    > USED AT LINE 11
                    > USED AT LINE 11
                    > USED AT LINE 11
                    > USED AT LINE 34 IN core-interpreter.z80
                    > USED AT LINE 11
                    > USED AT LINE 11
                    > USED AT LINE 11
HIDE:               0040 DEFINED AT LINE 36 IN constants.z80
                    > USED AT LINE 101 IN core-compiler.z80
                    > USED AT LINE 26
                    > USED AT LINE 206 IN core-interpreter.z80
                    > USED AT LINE 38 IN core-utilities.z80
LENMASK:            003F DEFINED AT LINE 37 IN constants.z80
                    > USED AT LINE 26
                    > USED AT LINE 206 IN core-interpreter.z80
                    > USED AT LINE 240 IN core-interpreter.z80
                    > USED AT LINE 38 IN core-utilities.z80
CALL_OPCODE:        00CD DEFINED AT LINE 39 IN constants.z80
                    > USED AT LINE 72 IN core-compiler.z80
                    > USED AT LINE 126 IN core-compiler.z80
JP_OPCODE:          00C3 DEFINED AT LINE 40 IN constants.z80
                    > USED AT LINE 59 IN core-compiler.z80
LD_HL_OPCODE:       0021 DEFINED AT LINE 41 IN constants.z80
POP_HL_OPCODE:      00E1 DEFINED AT LINE 42 IN constants.z80
RET_OPCODE:         00C9 DEFINED AT LINE 43 IN constants.z80
RST08_OPCODE:       00CF DEFINED AT LINE 44 IN constants.z80
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 33 IN core-compiler.z80
                    > USED AT LINE 8 IN core-extra.z80
LINK:               1541 DEFINED AT LINE 9
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STRUC_COUNT:        148D DEFINED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 29
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 46
STRUC_12:           0000 DEFINED AT LINE 59
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
STRUC_11:           0000 DEFINED AT LINE 58
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 57
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 57
STRUC_10:           0000 DEFINED AT LINE 57
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 56
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 56
STRUC_9:            0000 DEFINED AT LINE 56
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 55
STRUC_8:            0000 DEFINED AT LINE 55
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 54
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 54
STRUC_7:            0000 DEFINED AT LINE 54
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 35
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 53
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 53
STRUC_6:            0000 DEFINED AT LINE 53
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 36
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 52
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 52
STRUC_5:            0000 DEFINED AT LINE 52
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 51
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 51
STRUC_4:            0000 DEFINED AT LINE 51
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 50
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 50
STRUC_3:            0000 DEFINED AT LINE 50
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 49
STRUC_2:            0000 DEFINED AT LINE 49
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 106
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 106
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 106
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 48
STRUC_TOP:          0000 DEFINED AT LINE 48
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 64
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 64
                    > USED AT LINE 64
DLOOP_COUNT:        153C DEFINED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
                    > USED AT LINE 29
                    > USED AT LINE 46
DLOOP_12:           0000 DEFINED AT LINE 59
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
                    > USED AT LINE 58
DLOOP_11:           0000 DEFINED AT LINE 58
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
                    > USED AT LINE 31
                    > USED AT LINE 57
DLOOP_10:           0000 DEFINED AT LINE 57
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
                    > USED AT LINE 32
                    > USED AT LINE 56
DLOOP_9:            0000 DEFINED AT LINE 56
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
                    > USED AT LINE 33
                    > USED AT LINE 55
DLOOP_8:            0000 DEFINED AT LINE 55
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
                    > USED AT LINE 34
                    > USED AT LINE 54
DLOOP_7:            0000 DEFINED AT LINE 54
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
                    > USED AT LINE 35
                    > USED AT LINE 53
DLOOP_6:            0000 DEFINED AT LINE 53
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
                    > USED AT LINE 36
                    > USED AT LINE 52
DLOOP_5:            0000 DEFINED AT LINE 52
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
                    > USED AT LINE 37
                    > USED AT LINE 51
DLOOP_4:            0000 DEFINED AT LINE 51
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
                    > USED AT LINE 38
                    > USED AT LINE 50
DLOOP_3:            0000 DEFINED AT LINE 50
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
                    > USED AT LINE 39
                    > USED AT LINE 49
DLOOP_2:            0000 DEFINED AT LINE 49
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
                    > USED AT LINE 40
                    > USED AT LINE 48
DLOOP_TOP:          0000 DEFINED AT LINE 48
                    > USED AT LINE 41
                    > USED AT LINE 103
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 103
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 103
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 84
                    > USED AT LINE 64
                    > USED AT LINE 97
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 84
                    > USED AT LINE 64
                    > USED AT LINE 97
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 103
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 84
                    > USED AT LINE 64
                    > USED AT LINE 84
                    > USED AT LINE 64
                    > USED AT LINE 84
                    > USED AT LINE 64
                    > USED AT LINE 97
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 89
                    > USED AT LINE 41
                    > USED AT LINE 84
                    > USED AT LINE 64
                    > USED AT LINE 97
                    > USED AT LINE 64
                    > USED AT LINE 89
                    > USED AT LINE 97
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 84
                    > USED AT LINE 64
                    > USED AT LINE 84
                    > USED AT LINE 64
                    > USED AT LINE 103
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 97
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 84
                    > USED AT LINE 64
                    > USED AT LINE 97
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 84
                    > USED AT LINE 64
                    > USED AT LINE 97
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 97
                    > USED AT LINE 64
                    > USED AT LINE 84
                    > USED AT LINE 64
                    > USED AT LINE 97
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 84
                    > USED AT LINE 64
                    > USED AT LINE 97
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 84
                    > USED AT LINE 64
                    > USED AT LINE 97
                    > USED AT LINE 64
                    > USED AT LINE 41
                    > USED AT LINE 84
                    > USED AT LINE 64
                    > USED AT LINE 97
                    > USED AT LINE 64
RST00:              0000 DEFINED AT LINE 16
RST08:              0008 DEFINED AT LINE 21
RST38:              0038 DEFINED AT LINE 25
RST66:              0066 DEFINED AT LINE 29
START:              0067 DEFINED AT LINE 32
                    > USED AT LINE 18
HEADER_ZLESS:       008D DEFINED AT LINE 6
                    > USED AT LINE 9
ZLESS:              0092 DEFINED AT LINE 13
                    > USED AT LINE 74 IN core-alu.z80
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 105 IN core-alu.z80
                    > USED AT LINE 190 IN core-alu.z80
                    > USED AT LINE 194 IN core-alu.z80
                    > USED AT LINE 236 IN core-alu.z80
HEADER_ANDD:        009A DEFINED AT LINE 6
                    > USED AT LINE 9
ANDD:               00A0 DEFINED AT LINE 13
                    > USED AT LINE 5 IN core-extra.z80
                    > USED AT LINE 18 IN core-extra.z80
                    > USED AT LINE 29 IN core-extra.z80
HEADER_ORR:         00B3 DEFINED AT LINE 6
                    > USED AT LINE 9
ORR:                00B8 DEFINED AT LINE 13
                    > USED AT LINE 40 IN core-interpreter.z80
                    > USED AT LINE 59 IN core-interpreter.z80
HEADER_XORR:        00CB DEFINED AT LINE 6
                    > USED AT LINE 9
XORR:               00D1 DEFINED AT LINE 13
                    > USED AT LINE 82 IN core-alu.z80
                    > USED AT LINE 92 IN core-alu.z80
                    > USED AT LINE 102 IN core-alu.z80
                    > USED AT LINE 189 IN core-alu.z80
                    > USED AT LINE 235 IN core-alu.z80
HEADER_PLUS:        00E4 DEFINED AT LINE 6
                    > USED AT LINE 9
PLUS:               00E8 DEFINED AT LINE 13
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 69 IN core-alu.z80
                    > USED AT LINE 160 IN core-alu.z80
                    > USED AT LINE 241 IN core-interpreter.z80
HEADER_INVER:       00F8 DEFINED AT LINE 6
                    > USED AT LINE 9
INVER:              00FE DEFINED AT LINE 13
                    > USED AT LINE 58 IN core-alu.z80
                    > USED AT LINE 63 IN core-alu.z80
HEADER_NEGAT:       0107 DEFINED AT LINE 6
                    > USED AT LINE 9
NEGAT:              0110 DEFINED AT LINE 13
                    > USED AT LINE 69 IN core-alu.z80
                    > USED AT LINE 75 IN core-alu.z80
                    > USED AT LINE 156 IN core-alu.z80
                    > USED AT LINE 202 IN core-alu.z80
                    > USED AT LINE 207 IN core-alu.z80
                    > USED AT LINE 238 IN core-alu.z80
HEADER_DNEGA:       0117 DEFINED AT LINE 6
                    > USED AT LINE 9
DNEGA:              0121 DEFINED AT LINE 13
HEADER_SUBB:        0134 DEFINED AT LINE 6
                    > USED AT LINE 9
SUBB:               0138 DEFINED AT LINE 13
                    > USED AT LINE 96 IN core-alu.z80
                    > USED AT LINE 105 IN core-alu.z80
                    > USED AT LINE 134 IN core-alu.z80
                    > USED AT LINE 135 IN core-alu.z80
                    > USED AT LINE 6 IN core-utilities.z80
                    > USED AT LINE 13 IN core-utilities.z80
HEADER_ABS:         013F DEFINED AT LINE 6
                    > USED AT LINE 9
ABS:                0145 DEFINED AT LINE 13
                    > USED AT LINE 197 IN core-alu.z80
                    > USED AT LINE 232 IN core-alu.z80
ABS1:               0150 DEFINED AT LINE 76 IN core-alu.z80
HEADER_EQUAL:       0152 DEFINED AT LINE 6
                    > USED AT LINE 9
EQUAL:              0156 DEFINED AT LINE 13
EQU1:               0163 DEFINED AT LINE 85 IN core-alu.z80
                    > USED AT LINE 83 IN core-alu.z80
HEADER_ULESS:       0169 DEFINED AT LINE 6
                    > USED AT LINE 9
ULESS:              016E DEFINED AT LINE 13
                    > USED AT LINE 154 IN core-alu.z80
ULES1:              0181 DEFINED AT LINE 95 IN core-alu.z80
                    > USED AT LINE 93 IN core-alu.z80
HEADER_LESS:        0187 DEFINED AT LINE 6
                    > USED AT LINE 9
LESS:               018B DEFINED AT LINE 13
                    > USED AT LINE 111 IN core-alu.z80
                    > USED AT LINE 116 IN core-alu.z80
LESS1:              019C DEFINED AT LINE 104 IN core-alu.z80
HEADER_GREATR:      01A2 DEFINED AT LINE 6
                    > USED AT LINE 9
GREATR:             01A6 DEFINED AT LINE 13
HEADER_MAX:         01BE DEFINED AT LINE 6
                    > USED AT LINE 9
MAX:                01C4 DEFINED AT LINE 13
MAX1:               01CF DEFINED AT LINE 118 IN core-alu.z80
HEADER_MIN:         01D3 DEFINED AT LINE 6
                    > USED AT LINE 9
MIN:                01D9 DEFINED AT LINE 13
MIN1:               01E6 DEFINED AT LINE 127 IN core-alu.z80
                    > USED AT LINE 125 IN core-alu.z80
HEADER_WITHI:       01EA DEFINED AT LINE 6
                    > USED AT LINE 9
WITHI:              01F3 DEFINED AT LINE 13
HEADER_UPLUS:       0202 DEFINED AT LINE 6
                    > USED AT LINE 9
UPLUS:              0208 DEFINED AT LINE 13
                    > USED AT LINE 162 IN core-alu.z80
UMP2:               0222 DEFINED AT LINE 145 IN core-alu.z80
UMP1:               0223 DEFINED AT LINE 147 IN core-alu.z80
                    > USED AT LINE 144 IN core-alu.z80
HEADER_UMMOD:       0226 DEFINED AT LINE 6
                    > USED AT LINE 9
UMMOD:              022F DEFINED AT LINE 13
UMM1:               0240 DEFINED AT LINE 157 IN core-alu.z80
                    > USED AT LINE 170 IN core-alu.z80
UMM2:               0276 DEFINED AT LINE 166 IN core-alu.z80
                    > USED AT LINE 163 IN core-alu.z80
UMM3:               0278 DEFINED AT LINE 168 IN core-alu.z80
                    > USED AT LINE 165 IN core-alu.z80
UMM4:               0284 DEFINED AT LINE 172 IN core-alu.z80
                    > USED AT LINE 155 IN core-alu.z80
HEADER_USLASHMOD:   0290 DEFINED AT LINE 6
                    > USED AT LINE 9
USLASHMOD:          0298 DEFINED AT LINE 13
                    > USED AT LINE 198 IN core-alu.z80
HEADER_SLASHMOD:    02B4 DEFINED AT LINE 6
                    > USED AT LINE 9
SLASHMOD:           02BB DEFINED AT LINE 13
                    > USED AT LINE 213 IN core-alu.z80
                    > USED AT LINE 217 IN core-alu.z80
SLASHMOD1:          02E0 DEFINED AT LINE 203 IN core-alu.z80
                    > USED AT LINE 201 IN core-alu.z80
SLASHMOD2:          02EA DEFINED AT LINE 208 IN core-alu.z80
                    > USED AT LINE 206 IN core-alu.z80
HEADER_MOD:         02EF DEFINED AT LINE 6
                    > USED AT LINE 9
MOD:                02F5 DEFINED AT LINE 13
HEADER_SLASH:       02FC DEFINED AT LINE 6
                    > USED AT LINE 9
SLASH:              0300 DEFINED AT LINE 13
HEADER_USTAR:       0309 DEFINED AT LINE 6
                    > USED AT LINE 9
USTAR:              030E DEFINED AT LINE 13
                    > USED AT LINE 233 IN core-alu.z80
HEADER_STAR:        0328 DEFINED AT LINE 6
                    > USED AT LINE 9
STAR:               032C DEFINED AT LINE 13
STAR1:              0347 DEFINED AT LINE 239 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
HEADER_CELLP:       034C DEFINED AT LINE 6
                    > USED AT LINE 9
CELLP:              0354 DEFINED AT LINE 13
                    > USED AT LINE 10 IN core-compiler.z80
HEADER_CELLM:       0357 DEFINED AT LINE 6
                    > USED AT LINE 9
CELLM:              035F DEFINED AT LINE 13
HEADER_CELLS:       0362 DEFINED AT LINE 6
                    > USED AT LINE 9
CELLS:              036A DEFINED AT LINE 13
HEADER_ZEQUAL:      036D DEFINED AT LINE 6
                    > USED AT LINE 9
ZEQUAL:             0372 DEFINED AT LINE 13
                    > USED AT LINE 134 IN core-compiler.z80
                    > USED AT LINE 160 IN core-compiler.z80
                    > USED AT LINE 174 IN core-compiler.z80
                    > USED AT LINE 9 IN core-interpreter.z80
                    > USED AT LINE 35 IN core-interpreter.z80
                    > USED AT LINE 55 IN core-interpreter.z80
L_M_739S256:        037A DEFINED AT LINE 75
                    > USED AT LINE 72
CUR_ADR:            153D DEFINED AT LINE 63
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
                    > USED AT LINE 65
                    > USED AT LINE 66
HEADER_ZNEQU:       0381 DEFINED AT LINE 6
                    > USED AT LINE 9
ZNEQU:              0387 DEFINED AT LINE 13
                    > USED AT LINE 146 IN core-compiler.z80
                    > USED AT LINE 21 IN core-interpreter.z80
L_M_746S264:        038F DEFINED AT LINE 75
                    > USED AT LINE 72
HEADER_ONEP:        0395 DEFINED AT LINE 6
                    > USED AT LINE 9
ONEP:               039A DEFINED AT LINE 13
                    > USED AT LINE 58 IN core-alu.z80
                    > USED AT LINE 58 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 128 IN core-compiler.z80
                    > USED AT LINE 41 IN core-strings.z80
HEADER_ONEM:        039E DEFINED AT LINE 6
                    > USED AT LINE 9
ONEM:               03A3 DEFINED AT LINE 13
HEADER_TWOP:        03A7 DEFINED AT LINE 6
                    > USED AT LINE 9
TWOP:               03AC DEFINED AT LINE 13
                    > USED AT LINE 244 IN core-alu.z80
HEADER_TWOM:        03B1 DEFINED AT LINE 6
                    > USED AT LINE 9
TWOM:               03B6 DEFINED AT LINE 13
                    > USED AT LINE 247 IN core-alu.z80
HEADER_TWOST:       03BB DEFINED AT LINE 6
                    > USED AT LINE 9
TWOST:              03C0 DEFINED AT LINE 13
                    > USED AT LINE 251 IN core-alu.z80
HEADER_TWOSLASH:    03C7 DEFINED AT LINE 6
                    > USED AT LINE 9
TWOSLASH:           03CC DEFINED AT LINE 13
NEGATENUM:          03D3 DEFINED AT LINE 307 IN core-alu.z80
                    > USED AT LINE 47 IN core-format.z80
                    > USED AT LINE 165 IN core-format.z80
DIVIDEWORDBYBYTE:   03DB DEFINED AT LINE 324 IN core-alu.z80
                    > USED AT LINE 53 IN core-format.z80
L_M_799S327:        03E3 DEFINED AT LINE 73
                    > USED AT LINE 70
L_M_802S330:        03EB DEFINED AT LINE 75
                    > USED AT LINE 72
L_M_807S335:        03F7 DEFINED AT LINE 75
                    > USED AT LINE 72
DIVIDEWORDBYWORD:   03FC DEFINED AT LINE 350 IN core-alu.z80
                    > USED AT LINE 181 IN core-alu.z80
L_M_825S355:        0408 DEFINED AT LINE 73
                    > USED AT LINE 70
L_M_829S359:        0413 DEFINED AT LINE 75
                    > USED AT LINE 72
L_M_839S369:        0422 DEFINED AT LINE 73
                    > USED AT LINE 70
L_M_843S373:        042D DEFINED AT LINE 75
                    > USED AT LINE 72
UNSIGNEDMULTIPLY:   0436 DEFINED AT LINE 392 IN core-alu.z80
                    > USED AT LINE 224 IN core-alu.z80
                    > USED AT LINE 123 IN core-format.z80
                    > USED AT LINE 153 IN core-format.z80
L_M_864S396:        0441 DEFINED AT LINE 73
                    > USED AT LINE 70
L_M_869S401:        044F DEFINED AT LINE 75
                    > USED AT LINE 72
HEADER_PRN:         0458 DEFINED AT LINE 6
                    > USED AT LINE 9
PRN:                045E DEFINED AT LINE 13
HEADER_COMPI:       0465 DEFINED AT LINE 6
                    > USED AT LINE 9
COMPI:              046F DEFINED AT LINE 13
                    > USED AT LINE 3 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 10 IN core-control.z80
HEADER_COLON:       047E DEFINED AT LINE 6
                    > USED AT LINE 9
COLON:              0482 DEFINED AT LINE 13
HEADER_SEMICOLON:   04A6 DEFINED AT LINE 6
                    > USED AT LINE 9
SEMICOLON:          04AA DEFINED AT LINE 13
HEADER_COLONNONAME: 04BE DEFINED AT LINE 6
                    > USED AT LINE 9
COLONNONAME:        04C8 DEFINED AT LINE 13
HEADER_VARIABLE:    04DA DEFINED AT LINE 6
                    > USED AT LINE 9
VARIABLE:           04E5 DEFINED AT LINE 13
HEADER_BUFFERCOLON: 04FB DEFINED AT LINE 6
                    > USED AT LINE 9
BUFFERCOLON:        0505 DEFINED AT LINE 13
HEADER_CREATE:      0515 DEFINED AT LINE 6
                    > USED AT LINE 9
CREATE:             051E DEFINED AT LINE 13
                    > USED AT LINE 14 IN core-compiler.z80
                    > USED AT LINE 80 IN core-compiler.z80
XCREATE:            0548 DEFINED AT LINE 62 IN core-compiler.z80
                    > USED AT LINE 60 IN core-compiler.z80
HEADER_DOES:        0550 DEFINED AT LINE 6
                    > USED AT LINE 9
DOES:               0558 DEFINED AT LINE 13
HEADER_CONSTANT:    057E DEFINED AT LINE 6
                    > USED AT LINE 9
CONSTANT:           0589 DEFINED AT LINE 13
                    > USED AT LINE 42 IN core-compiler.z80
                    > USED AT LINE 49 IN core-compiler.z80
HEADER_IMMEDIATE:   059A DEFINED AT LINE 6
                    > USED AT LINE 9
IMMEDIATE:          05A6 DEFINED AT LINE 13
HEADER_HIDDEN:      05B2 DEFINED AT LINE 6
                    > USED AT LINE 9
HIDDEN:             05BB DEFINED AT LINE 13
HEADER_LBRAC:       05D0 DEFINED AT LINE 6
                    > USED AT LINE 9
LBRAC:              05D4 DEFINED AT LINE 13
                    > USED AT LINE 27 IN core-compiler.z80
HEADER_RBRAC:       05DD DEFINED AT LINE 6
                    > USED AT LINE 9
RBRAC:              05E1 DEFINED AT LINE 13
                    > USED AT LINE 20 IN core-compiler.z80
                    > USED AT LINE 34 IN core-compiler.z80
DODOES:             05EA DEFINED AT LINE 115 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
XDOES:              05FA DEFINED AT LINE 122 IN core-compiler.z80
                    > USED AT LINE 69 IN core-compiler.z80
HEADER_POSTPONE:    0614 DEFINED AT LINE 6
                    > USED AT LINE 9
POSTPONE:           061F DEFINED AT LINE 13
POSTPONE1:          0636 DEFINED AT LINE 138 IN core-compiler.z80
                    > USED AT LINE 135 IN core-compiler.z80
POSTPONE2:          0638 DEFINED AT LINE 140 IN core-compiler.z80
                    > USED AT LINE 137 IN core-compiler.z80
POSTPONETOKEN:      063D DEFINED AT LINE 143 IN core-compiler.z80
                    > USED AT LINE 139 IN core-compiler.z80
POSTPONETOKEN1:     0652 DEFINED AT LINE 150 IN core-compiler.z80
                    > USED AT LINE 147 IN core-compiler.z80
POSTPONETOKEN2:     0654 DEFINED AT LINE 152 IN core-compiler.z80
                    > USED AT LINE 149 IN core-compiler.z80
POSTPONEWORD:       0659 DEFINED AT LINE 155 IN core-compiler.z80
                    > USED AT LINE 148 IN core-compiler.z80
POSTPONEWORD1:      068C DEFINED AT LINE 166 IN core-compiler.z80
                    > USED AT LINE 161 IN core-compiler.z80
POSTPONEWORD2:      0690 DEFINED AT LINE 168 IN core-compiler.z80
                    > USED AT LINE 165 IN core-compiler.z80
POSTPONELITERAL:    0695 DEFINED AT LINE 171 IN core-compiler.z80
                    > USED AT LINE 151 IN core-compiler.z80
POSTPONELITERAL1:   06AC DEFINED AT LINE 179 IN core-compiler.z80
                    > USED AT LINE 175 IN core-compiler.z80
POSTPONELITERAL2:   06C1 DEFINED AT LINE 184 IN core-compiler.z80
                    > USED AT LINE 178 IN core-compiler.z80
HEADER_AHEAD:       06C6 DEFINED AT LINE 6
                    > USED AT LINE 9
AHEAD:              06CE DEFINED AT LINE 13
                    > USED AT LINE 23 IN core-control.z80
HEADER_IFF:         06DC DEFINED AT LINE 6
                    > USED AT LINE 9
IFF:                06E2 DEFINED AT LINE 13
HEADER_THENN:       06F1 DEFINED AT LINE 6
                    > USED AT LINE 9
THENN:              06F9 DEFINED AT LINE 13
HEADER_ELSEE:       0702 DEFINED AT LINE 6
                    > USED AT LINE 9
ELSEE:              070A DEFINED AT LINE 13
HEADER_XQBRAN:      0713 DEFINED AT LINE 6
                    > USED AT LINE 9
XQBRAN:             071E DEFINED AT LINE 13
                    > USED AT LINE 49 IN core-control.z80
                    > USED AT LINE 85 IN core-control.z80
HEADER_XBRAN:       0732 DEFINED AT LINE 6
                    > USED AT LINE 9
XBRAN:              073C DEFINED AT LINE 13
                    > USED AT LINE 31 IN core-control.z80
                    > USED AT LINE 55 IN core-control.z80
                    > USED AT LINE 92 IN core-control.z80
HEADER_IF:          0745 DEFINED AT LINE 6
                    > USED AT LINE 9
IF:                 074A DEFINED AT LINE 13
HEADER_ELSE:        0760 DEFINED AT LINE 6
                    > USED AT LINE 9
ELSE:               0767 DEFINED AT LINE 13
HEADER_ENDIF:       0781 DEFINED AT LINE 6
                    > USED AT LINE 9
ENDIF:              0789 DEFINED AT LINE 13
XENDIF:             0793 DEFINED AT LINE 68 IN core-control.z80
                    > USED AT LINE 59 IN core-control.z80
                    > USED AT LINE 64 IN core-control.z80
HEADER_BEGIN:       07A7 DEFINED AT LINE 6
                    > USED AT LINE 9
BEGIN:              07AF DEFINED AT LINE 13
HEADER_WHILE:       07BB DEFINED AT LINE 6
                    > USED AT LINE 9
WHILE:              07C3 DEFINED AT LINE 13
HEADER_REPEAT:      07D9 DEFINED AT LINE 6
                    > USED AT LINE 9
REPEAT:             07E2 DEFINED AT LINE 13
HEADER_QBRAN:       0808 DEFINED AT LINE 6
                    > USED AT LINE 9
QBRAN:              0812 DEFINED AT LINE 13
                    > USED AT LINE 83 IN core-alu.z80
                    > USED AT LINE 93 IN core-alu.z80
                    > USED AT LINE 125 IN core-alu.z80
                    > USED AT LINE 155 IN core-alu.z80
                    > USED AT LINE 163 IN core-alu.z80
                    > USED AT LINE 201 IN core-alu.z80
                    > USED AT LINE 206 IN core-alu.z80
                    > USED AT LINE 237 IN core-alu.z80
                    > USED AT LINE 135 IN core-compiler.z80
                    > USED AT LINE 147 IN core-compiler.z80
                    > USED AT LINE 161 IN core-compiler.z80
                    > USED AT LINE 175 IN core-compiler.z80
                    > USED AT LINE 10 IN core-control.z80
                    > USED AT LINE 6 IN core-extra.z80
                    > USED AT LINE 19 IN core-extra.z80
                    > USED AT LINE 30 IN core-extra.z80
                    > USED AT LINE 10 IN core-interpreter.z80
                    > USED AT LINE 22 IN core-interpreter.z80
                    > USED AT LINE 36 IN core-interpreter.z80
                    > USED AT LINE 41 IN core-interpreter.z80
                    > USED AT LINE 56 IN core-interpreter.z80
                    > USED AT LINE 60 IN core-interpreter.z80
                    > USED AT LINE 53 IN core-io.z80
                    > USED AT LINE 23 IN core-strings.z80
                    > USED AT LINE 28 IN core-strings.z80
                    > USED AT LINE 8 IN core-utilities.z80
                    > USED AT LINE 14 IN core-utilities.z80
HEADER_BRAN:        0826 DEFINED AT LINE 6
                    > USED AT LINE 9
BRAN:               082F DEFINED AT LINE 13
                    > USED AT LINE 165 IN core-alu.z80
                    > USED AT LINE 137 IN core-compiler.z80
                    > USED AT LINE 149 IN core-compiler.z80
                    > USED AT LINE 165 IN core-compiler.z80
                    > USED AT LINE 178 IN core-compiler.z80
                    > USED AT LINE 4 IN core-control.z80
                    > USED AT LINE 105 IN core-control.z80
                    > USED AT LINE 15 IN core-interpreter.z80
                    > USED AT LINE 24 IN core-interpreter.z80
                    > USED AT LINE 43 IN core-interpreter.z80
                    > USED AT LINE 46 IN core-interpreter.z80
                    > USED AT LINE 63 IN core-interpreter.z80
                    > USED AT LINE 55 IN core-io.z80
                    > USED AT LINE 30 IN core-strings.z80
                    > USED AT LINE 37 IN core-strings.z80
                    > USED AT LINE 17 IN core-utilities.z80
HEADER_DONXT:       0837 DEFINED AT LINE 6
                    > USED AT LINE 9
DONXT:              083E DEFINED AT LINE 13
                    > USED AT LINE 170 IN core-alu.z80
DECHILO:            0853 DEFINED AT LINE 139 IN core-control.z80
                    > USED AT LINE 132 IN core-control.z80
DECLOW:             0855 DEFINED AT LINE 142 IN core-control.z80
                    > USED AT LINE 128 IN core-control.z80
HEADER_VERSION:     085E DEFINED AT LINE 6
                    > USED AT LINE 9
VERSION:            0868 DEFINED AT LINE 13
HEADER_RZ:          0878 DEFINED AT LINE 6
                    > USED AT LINE 9
RZ:                 087D DEFINED AT LINE 13
HEADER___MSK_IMMED: 088D DEFINED AT LINE 6
                    > USED AT LINE 9
HEADER___MSK_HIDDEN: 08A5 DEFINED AT LINE 6
                    > USED AT LINE 9
HEADER___MSK_LENGTH: 08BC DEFINED AT LINE 6
                    > USED AT LINE 9
HEADER_TRUE:        08D6 DEFINED AT LINE 6
                    > USED AT LINE 9
TRUE:               08DD DEFINED AT LINE 13
HEADER_FALSE:       08ED DEFINED AT LINE 6
                    > USED AT LINE 9
FALSE:              08F5 DEFINED AT LINE 13
HEADER_PAD:         0905 DEFINED AT LINE 6
                    > USED AT LINE 9
PAD:                090B DEFINED AT LINE 13
HEADER_HERE:        091B DEFINED AT LINE 6
                    > USED AT LINE 9
HERE:               0922 DEFINED AT LINE 13
                    > USED AT LINE 15 IN core-compiler.z80
                    > USED AT LINE 17 IN core-compiler.z80
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 40 IN core-compiler.z80
                    > USED AT LINE 47 IN core-compiler.z80
                    > USED AT LINE 54 IN core-compiler.z80
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 17 IN core-control.z80
                    > USED AT LINE 50 IN core-control.z80
                    > USED AT LINE 56 IN core-control.z80
                    > USED AT LINE 71 IN core-control.z80
                    > USED AT LINE 80 IN core-control.z80
                    > USED AT LINE 86 IN core-control.z80
                    > USED AT LINE 94 IN core-control.z80
                    > USED AT LINE 96 IN core-control.z80
                    > USED AT LINE 7 IN core-extra.z80
                    > USED AT LINE 32 IN core-extra.z80
                    > USED AT LINE 93 IN core-interpreter.z80
                    > USED AT LINE 67 IN core-memory.z80
HEADER_INTP_STOP:   0932 DEFINED AT LINE 6
                    > USED AT LINE 9
INTP_STOP:          093E DEFINED AT LINE 13
HEADER_STATE:       094E DEFINED AT LINE 6
                    > USED AT LINE 9
STATE:              0956 DEFINED AT LINE 13
                    > USED AT LINE 3 IN core-extra.z80
                    > USED AT LINE 16 IN core-extra.z80
                    > USED AT LINE 27 IN core-extra.z80
                    > USED AT LINE 38 IN core-interpreter.z80
                    > USED AT LINE 57 IN core-interpreter.z80
                    > USED AT LINE 52 IN core-io.z80
                    > USED AT LINE 22 IN core-strings.z80
HEADER_NESTING:     0966 DEFINED AT LINE 6
                    > USED AT LINE 9
NESTING:            0970 DEFINED AT LINE 13
                    > USED AT LINE 4 IN core-extra.z80
                    > USED AT LINE 17 IN core-extra.z80
                    > USED AT LINE 28 IN core-extra.z80
                    > USED AT LINE 39 IN core-interpreter.z80
                    > USED AT LINE 58 IN core-interpreter.z80
HEADER_SP0:         0980 DEFINED AT LINE 6
                    > USED AT LINE 9
SP0:                0986 DEFINED AT LINE 13
                    > USED AT LINE 86 IN core-interpreter.z80
                    > USED AT LINE 5 IN core-utilities.z80
                    > USED AT LINE 9 IN core-utilities.z80
HEADER_BASE:        0996 DEFINED AT LINE 6
                    > USED AT LINE 9
BASE:               099D DEFINED AT LINE 13
HEADER_LATESTSTR:   09AD DEFINED AT LINE 6
                    > USED AT LINE 9
LATESTSTR:          09B9 DEFINED AT LINE 13
                    > USED AT LINE 26 IN core-strings.z80
                    > USED AT LINE 34 IN core-strings.z80
                    > USED AT LINE 35 IN core-strings.z80
HEADER_LBRACE:      09C9 DEFINED AT LINE 6
                    > USED AT LINE 9
LBRACE:             09CD DEFINED AT LINE 13
                    > USED AT LINE 48 IN core-control.z80
                    > USED AT LINE 79 IN core-control.z80
LBRACE1:            09EA DEFINED AT LINE 9 IN core-extra.z80
                    > USED AT LINE 6 IN core-extra.z80
HEADER_RBRACE:      09F1 DEFINED AT LINE 6
                    > USED AT LINE 9
RBRACE:             09F5 DEFINED AT LINE 13
                    > USED AT LINE 26 IN core-extra.z80
RBRACE1:            0A10 DEFINED AT LINE 21 IN core-extra.z80
                    > USED AT LINE 19 IN core-extra.z80
HEADER_RBRACEEXEC:  0A15 DEFINED AT LINE 6
                    > USED AT LINE 9
RBRACEEXEC:         0A1D DEFINED AT LINE 13
                    > USED AT LINE 65 IN core-control.z80
                    > USED AT LINE 98 IN core-control.z80
RBRACEEXEC1:        0A3A DEFINED AT LINE 34 IN core-extra.z80
                    > USED AT LINE 30 IN core-extra.z80
HEADER_DOT:         0A3F DEFINED AT LINE 6
                    > USED AT LINE 9
DOT:                0A43 DEFINED AT LINE 13
                    > USED AT LINE 3 IN core-compiler.z80
PRINTNUM:           0A68 DEFINED AT LINE 18 IN core-format.z80
FORMATNUM:          0A81 DEFINED AT LINE 39 IN core-format.z80
                    > USED AT LINE 9 IN core-format.z80
                    > USED AT LINE 26 IN core-format.z80
L_M_1258S42:        0A89 DEFINED AT LINE 75
                    > USED AT LINE 72
L_M_1266S51:        0A97 DEFINED AT LINE 73
                    > USED AT LINE 70
L_M_1275S60:        0AAB DEFINED AT LINE 73
                    > USED AT LINE 70
L_M_1279S64:        0AB6 DEFINED AT LINE 75
                    > USED AT LINE 72
TONUMBER:           0AC6 DEFINED AT LINE 87 IN core-format.z80
                    > USED AT LINE 174 IN core-format.z80
L_M_1307S97:        0ADA DEFINED AT LINE 75
                    > USED AT LINE 72
L_M_1317S107:       0AEC DEFINED AT LINE 75
                    > USED AT LINE 72
L_M_1323S113:       0AFA DEFINED AT LINE 75
                    > USED AT LINE 72
L_M_1339S130:       0B15 DEFINED AT LINE 73
                    > USED AT LINE 70
L_M_1343S134:       0B21 DEFINED AT LINE 75
                    > USED AT LINE 72
TONUMBEREXIT:       0B4C DEFINED AT LINE 160 IN core-format.z80
                    > USED AT LINE 132 IN core-format.z80
L_M_1369S163:       0B55 DEFINED AT LINE 75
                    > USED AT LINE 72
HEADER_NUMBER:      0B5E DEFINED AT LINE 6
                    > USED AT LINE 9
NUMBER:             0B67 DEFINED AT LINE 13
                    > USED AT LINE 174 IN core-compiler.z80
                    > USED AT LINE 55 IN core-interpreter.z80
HEADER_DECIMAL:     0B81 DEFINED AT LINE 6
                    > USED AT LINE 9
DECIMAL:            0B8B DEFINED AT LINE 13
HEADER_HEX:         0B99 DEFINED AT LINE 6
                    > USED AT LINE 9
HEX:                0B9F DEFINED AT LINE 13
HEADER_EXECUTE:     0BAD DEFINED AT LINE 6
                    > USED AT LINE 9
EXECUTE:            0BB7 DEFINED AT LINE 13
                    > USED AT LINE 33 IN core-extra.z80
                    > USED AT LINE 45 IN core-interpreter.z80
                    > USED AT LINE 48 IN core-interpreter.z80
HEADER_INTERPRET:   0BC4 DEFINED AT LINE 6
                    > USED AT LINE 9
INTERPRET:          0BD0 DEFINED AT LINE 13
                    > USED AT LINE 87 IN core-interpreter.z80
INTERPRET1:         0BD1 DEFINED AT LINE 7 IN core-interpreter.z80
                    > USED AT LINE 15 IN core-interpreter.z80
INTERPRET2:         0BE8 DEFINED AT LINE 13 IN core-interpreter.z80
                    > USED AT LINE 10 IN core-interpreter.z80
INTERPTOKEN:        0BF3 DEFINED AT LINE 18 IN core-interpreter.z80
                    > USED AT LINE 14 IN core-interpreter.z80
INTERPTOKEN1:       0C08 DEFINED AT LINE 25 IN core-interpreter.z80
                    > USED AT LINE 22 IN core-interpreter.z80
INTERPTOKEN2:       0C0A DEFINED AT LINE 27 IN core-interpreter.z80
                    > USED AT LINE 24 IN core-interpreter.z80
INTERPWORD:         0C0F DEFINED AT LINE 30 IN core-interpreter.z80
                    > USED AT LINE 23 IN core-interpreter.z80
INTERPWORD1:        0C44 DEFINED AT LINE 44 IN core-interpreter.z80
                    > USED AT LINE 41 IN core-interpreter.z80
INTERPWORD2:        0C4A DEFINED AT LINE 47 IN core-interpreter.z80
                    > USED AT LINE 36 IN core-interpreter.z80
INTERPWORD3:        0C4E DEFINED AT LINE 49 IN core-interpreter.z80
                    > USED AT LINE 43 IN core-interpreter.z80
                    > USED AT LINE 46 IN core-interpreter.z80
INTERPLITERAL:      0C53 DEFINED AT LINE 52 IN core-interpreter.z80
                    > USED AT LINE 26 IN core-interpreter.z80
INTERPLITERAL1:     0C78 DEFINED AT LINE 64 IN core-interpreter.z80
                    > USED AT LINE 56 IN core-interpreter.z80
INTERPLITERAL2:     0C8D DEFINED AT LINE 69 IN core-interpreter.z80
                    > USED AT LINE 60 IN core-interpreter.z80
                    > USED AT LINE 63 IN core-interpreter.z80
NESTPLUS:           0C92 DEFINED AT LINE 72 IN core-interpreter.z80
                    > USED AT LINE 10 IN core-extra.z80
NESTMINUS:          0C9C DEFINED AT LINE 78 IN core-interpreter.z80
                    > USED AT LINE 15 IN core-extra.z80
HEADER_QUIT:        0CA6 DEFINED AT LINE 6
                    > USED AT LINE 9
QUIT:               0CAD DEFINED AT LINE 13
                    > USED AT LINE 42
HEADER_WORD:        0CBB DEFINED AT LINE 6
                    > USED AT LINE 9
WORD:               0CC2 DEFINED AT LINE 13
                    > USED AT LINE 57 IN core-compiler.z80
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 8 IN core-interpreter.z80
HEADER_XWORD:       0CD2 DEFINED AT LINE 6
                    > USED AT LINE 9
XWORD:              0CDA DEFINED AT LINE 13
                    > USED AT LINE 94 IN core-interpreter.z80
                    > USED AT LINE 36 IN core-strings.z80
XWORDSKIP:          0CE3 DEFINED AT LINE 102 IN core-interpreter.z80
                    > USED AT LINE 98 IN core-interpreter.z80
L_M_1489S108:       0D1E DEFINED AT LINE 73
                    > USED AT LINE 70
L_M_1491S111:       0D26 DEFINED AT LINE 95
                    > USED AT LINE 92
L_M_1493S114:       0D2E DEFINED AT LINE 75
                    > USED AT LINE 72
L_M_1499S121:       0D3D DEFINED AT LINE 102
                    > USED AT LINE 99
L_M_1500S122:       0D42 DEFINED AT LINE 73
                    > USED AT LINE 70
L_M_1503S125:       0D4D DEFINED AT LINE 75
                    > USED AT LINE 72
L_M_1510S133:       0D5F DEFINED AT LINE 102
                    > USED AT LINE 99
L_M_1513S137:       0D6A DEFINED AT LINE 102
                    > USED AT LINE 99
XWORDREAD:          0D77 DEFINED AT LINE 148 IN core-interpreter.z80
                    > USED AT LINE 99 IN core-interpreter.z80
L_M_1528S155:       0DA3 DEFINED AT LINE 75
                    > USED AT LINE 72
L_M_1532S159:       0DAB DEFINED AT LINE 73
                    > USED AT LINE 70
HEADER_FIND:        0DC1 DEFINED AT LINE 6
                    > USED AT LINE 9
FIND:               0DC8 DEFINED AT LINE 13
LOOKUP:             0DDA DEFINED AT LINE 191 IN core-interpreter.z80
                    > USED AT LINE 178 IN core-interpreter.z80
L_M_1562S193:       0DE3 DEFINED AT LINE 73
                    > USED AT LINE 70
L_M_1574S209:       0DF3 DEFINED AT LINE 75
                    > USED AT LINE 72
L_M_1583S220:       0E02 DEFINED AT LINE 75
                    > USED AT LINE 72
HEADER_TCFA:        0E0F DEFINED AT LINE 6
                    > USED AT LINE 9
TCFA:               0E16 DEFINED AT LINE 13
                    > USED AT LINE 163 IN core-compiler.z80
                    > USED AT LINE 167 IN core-compiler.z80
                    > USED AT LINE 37 IN core-interpreter.z80
                    > USED AT LINE 48 IN core-interpreter.z80
HEADER_TYPE:        0E2C DEFINED AT LINE 6
                    > USED AT LINE 9
TYPE:               0E33 DEFINED AT LINE 13
                    > USED AT LINE 183 IN core-compiler.z80
                    > USED AT LINE 68 IN core-interpreter.z80
                    > USED AT LINE 54 IN core-io.z80
                    > USED AT LINE 57 IN core-io.z80
HEADER_CR:          0E4D DEFINED AT LINE 6
                    > USED AT LINE 9
CR:                 0E52 DEFINED AT LINE 13
HEADER_ACCEPT:      0E58 DEFINED AT LINE 6
                    > USED AT LINE 9
ACCEPT:             0E61 DEFINED AT LINE 13
HEADER_KEY:         0E7D DEFINED AT LINE 6
                    > USED AT LINE 9
KEY:                0E83 DEFINED AT LINE 13
HEADER_EMIT:        0E8C DEFINED AT LINE 6
                    > USED AT LINE 9
EMIT:               0E93 DEFINED AT LINE 13
HEADER_QKEY:        0EA4 DEFINED AT LINE 6
                    > USED AT LINE 9
QKEY:               0EAB DEFINED AT LINE 13
L_M_1631S33:        0EC1 DEFINED AT LINE 75
                    > USED AT LINE 72
HEADER_BL:          0EC7 DEFINED AT LINE 6
                    > USED AT LINE 9
BL:                 0ECC DEFINED AT LINE 13
                    > USED AT LINE 57 IN core-compiler.z80
                    > USED AT LINE 133 IN core-compiler.z80
                    > USED AT LINE 8 IN core-interpreter.z80
HEADER_PRINT:       0ED6 DEFINED AT LINE 6
                    > USED AT LINE 9
PRINT:              0EDE DEFINED AT LINE 13
HEADER_DOTQUOTE:    0EF0 DEFINED AT LINE 6
                    > USED AT LINE 9
DOTQUOTE:           0EF5 DEFINED AT LINE 13
DOTQUOTE1:          0F08 DEFINED AT LINE 56 IN core-io.z80
                    > USED AT LINE 53 IN core-io.z80
DOTQUOTE2:          0F0E DEFINED AT LINE 58 IN core-io.z80
                    > USED AT LINE 55 IN core-io.z80
INITFORTH:          0F13 DEFINED AT LINE 1 IN core-kernel.z80
                    > USED AT LINE 35
ENTER:              0F4A DEFINED AT LINE 32 IN core-kernel.z80
                    > USED AT LINE 22
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 15
                    > USED AT LINE 2
                    > USED AT LINE 15
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 15
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 15
                    > USED AT LINE 2
                    > USED AT LINE 15
                    > USED AT LINE 3 IN core-kernel.z80
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 15
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 2
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 15
                    > USED AT LINE 2
                    > USED AT LINE 15
                    > USED AT LINE 2
                    > USED AT LINE 2
ENTER1:             0F4B DEFINED AT LINE 34 IN core-kernel.z80
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
FORTH:              0F52 DEFINED AT LINE 43 IN core-kernel.z80
EXIT:               0F5B DEFINED AT LINE 50 IN core-kernel.z80
                    > USED AT LINE 77 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 20 IN core-extra.z80
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
                    > USED AT LINE 14
EXIT_FORTH:         0F5E DEFINED AT LINE 54 IN core-kernel.z80
HEADER_NOOP:        0F5F DEFINED AT LINE 6
                    > USED AT LINE 9
NOOP:               0F66 DEFINED AT LINE 13
HEADER_STORE:       0F69 DEFINED AT LINE 6
                    > USED AT LINE 9
STORE:              0F6D DEFINED AT LINE 13
                    > USED AT LINE 17 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 74 IN core-compiler.z80
                    > USED AT LINE 128 IN core-compiler.z80
                    > USED AT LINE 72 IN core-control.z80
                    > USED AT LINE 97 IN core-control.z80
                    > USED AT LINE 32 IN core-extra.z80
                    > USED AT LINE 75 IN core-memory.z80
                    > USED AT LINE 34 IN core-strings.z80
HEADER_AT:          0F8A DEFINED AT LINE 6
                    > USED AT LINE 9
AT:                 0F8E DEFINED AT LINE 13
                    > USED AT LINE 15 IN core-compiler.z80
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 26 IN core-compiler.z80
                    > USED AT LINE 32 IN core-compiler.z80
                    > USED AT LINE 40 IN core-compiler.z80
                    > USED AT LINE 47 IN core-compiler.z80
                    > USED AT LINE 54 IN core-compiler.z80
                    > USED AT LINE 55 IN core-compiler.z80
                    > USED AT LINE 71 IN core-compiler.z80
                    > USED AT LINE 83 IN core-compiler.z80
                    > USED AT LINE 125 IN core-compiler.z80
                    > USED AT LINE 50 IN core-control.z80
                    > USED AT LINE 56 IN core-control.z80
                    > USED AT LINE 71 IN core-control.z80
                    > USED AT LINE 80 IN core-control.z80
                    > USED AT LINE 86 IN core-control.z80
                    > USED AT LINE 94 IN core-control.z80
                    > USED AT LINE 96 IN core-control.z80
                    > USED AT LINE 3 IN core-extra.z80
                    > USED AT LINE 4 IN core-extra.z80
                    > USED AT LINE 7 IN core-extra.z80
                    > USED AT LINE 16 IN core-extra.z80
                    > USED AT LINE 17 IN core-extra.z80
                    > USED AT LINE 27 IN core-extra.z80
                    > USED AT LINE 28 IN core-extra.z80
                    > USED AT LINE 38 IN core-interpreter.z80
                    > USED AT LINE 39 IN core-interpreter.z80
                    > USED AT LINE 57 IN core-interpreter.z80
                    > USED AT LINE 58 IN core-interpreter.z80
                    > USED AT LINE 86 IN core-interpreter.z80
                    > USED AT LINE 93 IN core-interpreter.z80
                    > USED AT LINE 52 IN core-io.z80
                    > USED AT LINE 22 IN core-strings.z80
                    > USED AT LINE 26 IN core-strings.z80
                    > USED AT LINE 35 IN core-strings.z80
                    > USED AT LINE 5 IN core-utilities.z80
                    > USED AT LINE 9 IN core-utilities.z80
                    > USED AT LINE 15 IN core-utilities.z80
HEADER_CSTORE:      0F97 DEFINED AT LINE 6
                    > USED AT LINE 9
CSTORE:             0F9C DEFINED AT LINE 13
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 127 IN core-compiler.z80
HEADER_CAT:         0FB6 DEFINED AT LINE 6
                    > USED AT LINE 9
CAT:                0FBB DEFINED AT LINE 13
                    > USED AT LINE 58 IN core-compiler.z80
                    > USED AT LINE 12 IN core-strings.z80
                    > USED AT LINE 41 IN core-strings.z80
HEADER_RAT:         0FC2 DEFINED AT LINE 6
                    > USED AT LINE 9
RAT:                0FC7 DEFINED AT LINE 13
                    > USED AT LINE 161 IN core-alu.z80
HEADER_RPSTO:       0FD1 DEFINED AT LINE 6
                    > USED AT LINE 9
RPSTO:              0FD7 DEFINED AT LINE 13
HEADER_RPAT:        0FE7 DEFINED AT LINE 6
                    > USED AT LINE 9
RPAT:               0FED DEFINED AT LINE 13
HEADER_SPAT:        1000 DEFINED AT LINE 6
                    > USED AT LINE 9
SPAT:               1006 DEFINED AT LINE 13
                    > USED AT LINE 4 IN core-utilities.z80
                    > USED AT LINE 12 IN core-utilities.z80
HEADER_SPSTORE:     1018 DEFINED AT LINE 6
                    > USED AT LINE 9
SPSTORE:            101E DEFINED AT LINE 13
HEADER_ALLOT:       1030 DEFINED AT LINE 6
                    > USED AT LINE 9
ALLOT:              1038 DEFINED AT LINE 13
                    > USED AT LINE 41 IN core-compiler.z80
                    > USED AT LINE 48 IN core-compiler.z80
                    > USED AT LINE 42 IN core-strings.z80
HEADER_PSTOR:       1042 DEFINED AT LINE 6
                    > USED AT LINE 9
PSTOR:              1047 DEFINED AT LINE 13
                    > USED AT LINE 67 IN core-memory.z80
HEADER_COMMA:       1056 DEFINED AT LINE 6
                    > USED AT LINE 9
COMMA:              105A DEFINED AT LINE 13
                    > USED AT LINE 80 IN core-compiler.z80
                    > USED AT LINE 163 IN core-compiler.z80
                    > USED AT LINE 164 IN core-compiler.z80
                    > USED AT LINE 167 IN core-compiler.z80
                    > USED AT LINE 177 IN core-compiler.z80
                    > USED AT LINE 177 IN core-compiler.z80
                    > USED AT LINE 42 IN core-interpreter.z80
                    > USED AT LINE 62 IN core-interpreter.z80
                    > USED AT LINE 62 IN core-interpreter.z80
HEADER_CCOMMA:      1071 DEFINED AT LINE 6
                    > USED AT LINE 9
CCOMMA:             1076 DEFINED AT LINE 13
TXT_INTRO:          109F DEFINED AT LINE 1 IN core-messages.z80
                    > USED AT LINE 52
TXT_NEWLINE:        10C5 DEFINED AT LINE 3 IN core-messages.z80
                    > USED AT LINE 328 IN core-serial.z80
TXT_PROMPT:         10C8 DEFINED AT LINE 4 IN core-messages.z80
                    > USED AT LINE 52
DONE:               10CD DEFINED AT LINE 7 IN core-messages.z80
FAILED:             10D8 DEFINED AT LINE 8 IN core-messages.z80
INITSERIAL:         10E3 DEFINED AT LINE 3 IN core-serial.z80
                    > USED AT LINE 34
SERIALIN:           112C DEFINED AT LINE 72 IN core-serial.z80
                    > USED AT LINE 26
L_M_1848S78:        1138 DEFINED AT LINE 75
                    > USED AT LINE 72
L_M_1853S83:        1146 DEFINED AT LINE 75
                    > USED AT LINE 72
L_M_1860S90:        1157 DEFINED AT LINE 75
                    > USED AT LINE 72
GETC:               116E DEFINED AT LINE 121 IN core-serial.z80
                    > USED AT LINE 207 IN core-serial.z80
L_M_1899S133:       1173 DEFINED AT LINE 73
                    > USED AT LINE 70
L_M_1909S143:       118C DEFINED AT LINE 75
                    > USED AT LINE 72
PUTC:               119E DEFINED AT LINE 172 IN core-serial.z80
                    > USED AT LINE 25 IN core-io.z80
                    > USED AT LINE 215 IN core-serial.z80
                    > USED AT LINE 218 IN core-serial.z80
                    > USED AT LINE 226 IN core-serial.z80
                    > USED AT LINE 251 IN core-serial.z80
                    > USED AT LINE 336 IN core-serial.z80
                    > USED AT LINE 44 IN core-utilities.z80
L_M_1936S174:       11A4 DEFINED AT LINE 73
                    > USED AT LINE 70
INPUTREADY:         11B2 DEFINED AT LINE 187 IN core-serial.z80
                    > USED AT LINE 31 IN core-io.z80
GETLINE:            11B8 DEFINED AT LINE 198 IN core-serial.z80
                    > USED AT LINE 14 IN core-io.z80
                    > USED AT LINE 276 IN core-serial.z80
L_M_1964S205:       11DE DEFINED AT LINE 73
                    > USED AT LINE 70
L_M_1965S206:       11E3 DEFINED AT LINE 73
                    > USED AT LINE 70
L_M_1968S209:       11EE DEFINED AT LINE 75
                    > USED AT LINE 72
L_M_1970S211:       11F6 DEFINED AT LINE 75
                    > USED AT LINE 72
L_M_1984S225:       1213 DEFINED AT LINE 75
                    > USED AT LINE 72
GETLINECHECK:       1225 DEFINED AT LINE 238 IN core-serial.z80
                    > USED AT LINE 230 IN core-serial.z80
                    > USED AT LINE 232 IN core-serial.z80
                    > USED AT LINE 235 IN core-serial.z80
PRINTROUTINE:       1234 DEFINED AT LINE 248 IN core-serial.z80
                    > USED AT LINE 305 IN core-serial.z80
                    > USED AT LINE 320 IN core-serial.z80
L_M_2006S249:       1239 DEFINED AT LINE 73
                    > USED AT LINE 70
GETKEY:             1248 DEFINED AT LINE 265 IN core-serial.z80
                    > USED AT LINE 109 IN core-interpreter.z80
                    > USED AT LINE 123 IN core-interpreter.z80
                    > USED AT LINE 163 IN core-interpreter.z80
                    > USED AT LINE 18 IN core-io.z80
L_M_2028S273:       125B DEFINED AT LINE 75
                    > USED AT LINE 72
PRINTPSTR:          127D DEFINED AT LINE 297 IN core-serial.z80
                    > USED AT LINE 53
                    > USED AT LINE 45 IN core-io.z80
                    > USED AT LINE 53
                    > USED AT LINE 329 IN core-serial.z80
PRINTSTR:           128C DEFINED AT LINE 316 IN core-serial.z80
                    > USED AT LINE 10 IN core-format.z80
                    > USED AT LINE 27 IN core-format.z80
                    > USED AT LINE 3 IN core-io.z80
                    > USED AT LINE 42 IN core-utilities.z80
PRINTCR:            1296 DEFINED AT LINE 326 IN core-serial.z80
                    > USED AT LINE 8 IN core-io.z80
                    > USED AT LINE 245 IN core-serial.z80
                    > USED AT LINE 50 IN core-utilities.z80
PRINTSPACE:         129F DEFINED AT LINE 333 IN core-serial.z80
                    > USED AT LINE 11 IN core-format.z80
                    > USED AT LINE 28 IN core-format.z80
                    > USED AT LINE 216 IN core-serial.z80
                    > USED AT LINE 43 IN core-utilities.z80
HEADER_LIT:         12A7 DEFINED AT LINE 6
                    > USED AT LINE 9
LIT:                12AD DEFINED AT LINE 13
                    > USED AT LINE 53 IN core-alu.z80
                    > USED AT LINE 64 IN core-alu.z80
                    > USED AT LINE 84 IN core-alu.z80
                    > USED AT LINE 86 IN core-alu.z80
                    > USED AT LINE 156 IN core-alu.z80
                    > USED AT LINE 174 IN core-alu.z80
                    > USED AT LINE 16 IN core-compiler.z80
                    > USED AT LINE 18 IN core-compiler.z80
                    > USED AT LINE 25 IN core-compiler.z80
                    > USED AT LINE 33 IN core-compiler.z80
                    > USED AT LINE 39 IN core-compiler.z80
                    > USED AT LINE 59 IN core-compiler.z80
                    > USED AT LINE 60 IN core-compiler.z80
                    > USED AT LINE 69 IN core-compiler.z80
                    > USED AT LINE 70 IN core-compiler.z80
                    > USED AT LINE 72 IN core-compiler.z80
                    > USED AT LINE 75 IN core-compiler.z80
                    > USED AT LINE 126 IN core-compiler.z80
                    > USED AT LINE 158 IN core-compiler.z80
                    > USED AT LINE 159 IN core-compiler.z80
                    > USED AT LINE 162 IN core-compiler.z80
                    > USED AT LINE 162 IN core-compiler.z80
                    > USED AT LINE 164 IN core-compiler.z80
                    > USED AT LINE 176 IN core-compiler.z80
                    > USED AT LINE 176 IN core-compiler.z80
                    > USED AT LINE 11 IN core-control.z80
                    > USED AT LINE 49 IN core-control.z80
                    > USED AT LINE 55 IN core-control.z80
                    > USED AT LINE 57 IN core-control.z80
                    > USED AT LINE 85 IN core-control.z80
                    > USED AT LINE 87 IN core-control.z80
                    > USED AT LINE 92 IN core-control.z80
                    > USED AT LINE 8 IN core-extra.z80
                    > USED AT LINE 20 IN core-extra.z80
                    > USED AT LINE 182 IN core-format.z80
                    > USED AT LINE 187 IN core-format.z80
                    > USED AT LINE 33 IN core-interpreter.z80
                    > USED AT LINE 34 IN core-interpreter.z80
                    > USED AT LINE 61 IN core-interpreter.z80
                    > USED AT LINE 61 IN core-interpreter.z80
                    > USED AT LINE 92 IN core-interpreter.z80
                    > USED AT LINE 238 IN core-interpreter.z80
                    > USED AT LINE 240 IN core-interpreter.z80
                    > USED AT LINE 40 IN core-io.z80
                    > USED AT LINE 57 IN core-io.z80
                    > USED AT LINE 11 IN core-strings.z80
                    > USED AT LINE 24 IN core-strings.z80
                    > USED AT LINE 25 IN core-strings.z80
                    > USED AT LINE 27 IN core-strings.z80
                    > USED AT LINE 29 IN core-strings.z80
                    > USED AT LINE 32 IN core-strings.z80
                    > USED AT LINE 39 IN core-strings.z80
                    > USED AT LINE 40 IN core-strings.z80
                    > USED AT LINE 7 IN core-utilities.z80
                    > USED AT LINE 12 IN core-utilities.z80
                    > USED AT LINE 16 IN core-utilities.z80
HEADER_ROT:         12BF DEFINED AT LINE 6
                    > USED AT LINE 9
ROT:                12C5 DEFINED AT LINE 13
                    > USED AT LINE 200 IN core-alu.z80
HEADER_NROT:        12F2 DEFINED AT LINE 6
                    > USED AT LINE 9
NROT:               12F9 DEFINED AT LINE 13
                    > USED AT LINE 191 IN core-alu.z80
                    > USED AT LINE 195 IN core-alu.z80
                    > USED AT LINE 204 IN core-alu.z80
                    > USED AT LINE 234 IN core-alu.z80
HEADER_DUPP:        1328 DEFINED AT LINE 6
                    > USED AT LINE 9
DUPP:               132E DEFINED AT LINE 13
                    > USED AT LINE 74 IN core-alu.z80
                    > USED AT LINE 158 IN core-alu.z80
                    > USED AT LINE 9 IN core-compiler.z80
                    > USED AT LINE 134 IN core-compiler.z80
                    > USED AT LINE 146 IN core-compiler.z80
                    > USED AT LINE 158 IN core-compiler.z80
                    > USED AT LINE 70 IN core-control.z80
                    > USED AT LINE 95 IN core-control.z80
                    > USED AT LINE 31 IN core-extra.z80
                    > USED AT LINE 9 IN core-interpreter.z80
                    > USED AT LINE 21 IN core-interpreter.z80
                    > USED AT LINE 33 IN core-interpreter.z80
                    > USED AT LINE 11 IN core-strings.z80
                    > USED AT LINE 11 IN core-utilities.z80
                    > USED AT LINE 15 IN core-utilities.z80
HEADER_SWAP:        133B DEFINED AT LINE 6
                    > USED AT LINE 9
SWAP:               1342 DEFINED AT LINE 13
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 117 IN core-alu.z80
                    > USED AT LINE 124 IN core-alu.z80
                    > USED AT LINE 126 IN core-alu.z80
                    > USED AT LINE 171 IN core-alu.z80
                    > USED AT LINE 197 IN core-alu.z80
                    > USED AT LINE 199 IN core-alu.z80
                    > USED AT LINE 205 IN core-alu.z80
                    > USED AT LINE 217 IN core-alu.z80
                    > USED AT LINE 232 IN core-alu.z80
                    > USED AT LINE 157 IN core-compiler.z80
                    > USED AT LINE 17 IN core-control.z80
                    > USED AT LINE 23 IN core-control.z80
                    > USED AT LINE 58 IN core-control.z80
                    > USED AT LINE 72 IN core-control.z80
                    > USED AT LINE 93 IN core-control.z80
                    > USED AT LINE 97 IN core-control.z80
                    > USED AT LINE 32 IN core-interpreter.z80
                    > USED AT LINE 74 IN core-memory.z80
                    > USED AT LINE 75 IN core-memory.z80
                    > USED AT LINE 12 IN core-strings.z80
                    > USED AT LINE 13 IN core-utilities.z80
HEADER_DROP:        135B DEFINED AT LINE 6
                    > USED AT LINE 9
DROP:               1362 DEFINED AT LINE 13
                    > USED AT LINE 94 IN core-alu.z80
                    > USED AT LINE 103 IN core-alu.z80
                    > USED AT LINE 119 IN core-alu.z80
                    > USED AT LINE 128 IN core-alu.z80
                    > USED AT LINE 164 IN core-alu.z80
                    > USED AT LINE 167 IN core-alu.z80
                    > USED AT LINE 171 IN core-alu.z80
                    > USED AT LINE 173 IN core-alu.z80
                    > USED AT LINE 213 IN core-alu.z80
                    > USED AT LINE 233 IN core-alu.z80
                    > USED AT LINE 136 IN core-compiler.z80
                    > USED AT LINE 136 IN core-compiler.z80
                    > USED AT LINE 157 IN core-compiler.z80
                    > USED AT LINE 173 IN core-compiler.z80
                    > USED AT LINE 180 IN core-compiler.z80
                    > USED AT LINE 11 IN core-interpreter.z80
                    > USED AT LINE 11 IN core-interpreter.z80
                    > USED AT LINE 32 IN core-interpreter.z80
                    > USED AT LINE 54 IN core-interpreter.z80
                    > USED AT LINE 65 IN core-interpreter.z80
                    > USED AT LINE 66 IN core-stacks.z80
                    > USED AT LINE 66 IN core-stacks.z80
                    > USED AT LINE 19 IN core-utilities.z80
HEADER_OVER:        136F DEFINED AT LINE 6
                    > USED AT LINE 9
OVER:               1376 DEFINED AT LINE 13
                    > USED AT LINE 134 IN core-alu.z80
                    > USED AT LINE 188 IN core-alu.z80
                    > USED AT LINE 188 IN core-alu.z80
                    > USED AT LINE 193 IN core-alu.z80
                    > USED AT LINE 231 IN core-alu.z80
                    > USED AT LINE 231 IN core-alu.z80
                    > USED AT LINE 73 IN core-compiler.z80
                    > USED AT LINE 127 IN core-compiler.z80
                    > USED AT LINE 145 IN core-compiler.z80
                    > USED AT LINE 145 IN core-compiler.z80
                    > USED AT LINE 20 IN core-interpreter.z80
                    > USED AT LINE 20 IN core-interpreter.z80
                    > USED AT LINE 74 IN core-memory.z80
                    > USED AT LINE 72 IN core-stacks.z80
                    > USED AT LINE 72 IN core-stacks.z80
                    > USED AT LINE 4 IN core-strings.z80
HEADER_TOR:         1399 DEFINED AT LINE 6
                    > USED AT LINE 9
TOR:                139E DEFINED AT LINE 13
                    > USED AT LINE 63 IN core-alu.z80
                    > USED AT LINE 158 IN core-alu.z80
                    > USED AT LINE 159 IN core-alu.z80
                    > USED AT LINE 159 IN core-alu.z80
                    > USED AT LINE 164 IN core-alu.z80
                    > USED AT LINE 10 IN core-compiler.z80
                    > USED AT LINE 5 IN core-strings.z80
HEADER_RFROM:       13AE DEFINED AT LINE 6
                    > USED AT LINE 9
RFROM:              13B3 DEFINED AT LINE 13
                    > USED AT LINE 65 IN core-alu.z80
                    > USED AT LINE 135 IN core-alu.z80
                    > USED AT LINE 160 IN core-alu.z80
                    > USED AT LINE 161 IN core-alu.z80
                    > USED AT LINE 162 IN core-alu.z80
                    > USED AT LINE 169 IN core-alu.z80
                    > USED AT LINE 9 IN core-compiler.z80
                    > USED AT LINE 64 IN core-compiler.z80
                    > USED AT LINE 82 IN core-compiler.z80
                    > USED AT LINE 124 IN core-compiler.z80
                    > USED AT LINE 3 IN core-strings.z80
HEADER_DDROP:       13C3 DEFINED AT LINE 6
                    > USED AT LINE 9
DDROP:              13CB DEFINED AT LINE 13
                    > USED AT LINE 173 IN core-alu.z80
HEADER_DDUP:        13D2 DEFINED AT LINE 6
                    > USED AT LINE 9
DDUP:               13D9 DEFINED AT LINE 13
                    > USED AT LINE 92 IN core-alu.z80
                    > USED AT LINE 102 IN core-alu.z80
                    > USED AT LINE 116 IN core-alu.z80
                    > USED AT LINE 124 IN core-alu.z80
                    > USED AT LINE 154 IN core-alu.z80
LITSTR:             13E0 DEFINED AT LINE 1 IN core-strings.z80
                    > USED AT LINE 181 IN core-compiler.z80
                    > USED AT LINE 66 IN core-interpreter.z80
                    > USED AT LINE 39 IN core-strings.z80
HEADER_COUNT:       13F2 DEFINED AT LINE 6
                    > USED AT LINE 9
COUNT:              13FA DEFINED AT LINE 13
                    > USED AT LINE 239 IN core-interpreter.z80
                    > USED AT LINE 4 IN core-strings.z80
                    > USED AT LINE 36 IN core-strings.z80
HEADER_SQUOTE:      140C DEFINED AT LINE 6
                    > USED AT LINE 9
SQUOTE:             1411 DEFINED AT LINE 13
HEADER_QT:          1413 DEFINED AT LINE 6
                    > USED AT LINE 9
QT:                 1417 DEFINED AT LINE 13
                    > USED AT LINE 51 IN core-io.z80
                    > USED AT LINE 18 IN core-strings.z80
QT1:                1440 DEFINED AT LINE 31 IN core-strings.z80
                    > USED AT LINE 28 IN core-strings.z80
QT2:                1444 DEFINED AT LINE 33 IN core-strings.z80
                    > USED AT LINE 30 IN core-strings.z80
QT3:                1454 DEFINED AT LINE 38 IN core-strings.z80
                    > USED AT LINE 23 IN core-strings.z80
QT4:                1466 DEFINED AT LINE 43 IN core-strings.z80
                    > USED AT LINE 37 IN core-strings.z80
COMPARESTR:         146B DEFINED AT LINE 55 IN core-strings.z80
                    > USED AT LINE 215 IN core-interpreter.z80
L_M_2199S58:        1473 DEFINED AT LINE 75
                    > USED AT LINE 72
L_M_2200S59:        1478 DEFINED AT LINE 73
                    > USED AT LINE 70
L_M_2204S63:        1482 DEFINED AT LINE 75
                    > USED AT LINE 72
HEADER_PACK:        1491 DEFINED AT LINE 6
                    > USED AT LINE 9
PACK:               1498 DEFINED AT LINE 13
HEADER_DOTS:        14B8 DEFINED AT LINE 6
                    > USED AT LINE 9
DOTS:               14BD DEFINED AT LINE 13
DOTS1:              14DA DEFINED AT LINE 10 IN core-utilities.z80
                    > USED AT LINE 17 IN core-utilities.z80
DOTS2:              14FE DEFINED AT LINE 18 IN core-utilities.z80
                    > USED AT LINE 14 IN core-utilities.z80
DOTS3:              1500 DEFINED AT LINE 20 IN core-utilities.z80
                    > USED AT LINE 8 IN core-utilities.z80
HEADER_WORDS:       1505 DEFINED AT LINE 6
                    > USED AT LINE 9
WORDS:              150D DEFINED AT LINE 13
LISTWORDS:          1515 DEFINED AT LINE 29 IN core-utilities.z80
                    > USED AT LINE 25 IN core-utilities.z80
L_M_2255S31:        151E DEFINED AT LINE 73
                    > USED AT LINE 70
HEADER_LATEST:      1541 DEFINED AT LINE 6
                    > USED AT LINE 19 IN core-kernel.z80
                    > USED AT LINE 9
LATEST:             154A DEFINED AT LINE 13
                    > USED AT LINE 19 IN core-compiler.z80
                    > USED AT LINE 26 IN core-compiler.z80
                    > USED AT LINE 55 IN core-compiler.z80
                    > USED AT LINE 56 IN core-compiler.z80
                    > USED AT LINE 125 IN core-compiler.z80
RET_STACK:          8100 DEFINED AT LINE 3 IN variables.z80
                    > USED AT LINE 33
                    > USED AT LINE 26
RPP:                8100 DEFINED AT LINE 4 IN variables.z80
DATA_STACK:         8100 DEFINED AT LINE 6 IN variables.z80
                    > USED AT LINE 2 IN core-kernel.z80
SPP:                8200 DEFINED AT LINE 8 IN variables.z80
SERBUF:             8200 DEFINED AT LINE 11 IN variables.z80
                    > USED AT LINE 7 IN core-serial.z80
                    > USED AT LINE 89 IN core-serial.z80
                    > USED AT LINE 91 IN core-serial.z80
                    > USED AT LINE 142 IN core-serial.z80
                    > USED AT LINE 144 IN core-serial.z80
SERINPTR:           823F DEFINED AT LINE 12 IN variables.z80
                    > USED AT LINE 8 IN core-serial.z80
                    > USED AT LINE 86 IN core-serial.z80
                    > USED AT LINE 93 IN core-serial.z80
SERRDPTR:           8241 DEFINED AT LINE 13 IN variables.z80
                    > USED AT LINE 9 IN core-serial.z80
                    > USED AT LINE 139 IN core-serial.z80
                    > USED AT LINE 147 IN core-serial.z80
SERBUFUSED:         8243 DEFINED AT LINE 14 IN variables.z80
                    > USED AT LINE 5 IN core-serial.z80
                    > USED AT LINE 81 IN core-serial.z80
                    > USED AT LINE 96 IN core-serial.z80
                    > USED AT LINE 98 IN core-serial.z80
                    > USED AT LINE 134 IN core-serial.z80
                    > USED AT LINE 148 IN core-serial.z80
                    > USED AT LINE 150 IN core-serial.z80
                    > USED AT LINE 188 IN core-serial.z80
LINEBUFSTART:       8245 DEFINED AT LINE 15 IN variables.z80
                    > USED AT LINE 12 IN core-serial.z80
                    > USED AT LINE 274 IN core-serial.z80
LINEBUFSIZE:        8247 DEFINED AT LINE 16 IN variables.z80
                    > USED AT LINE 17 IN core-serial.z80
                    > USED AT LINE 275 IN core-serial.z80
CURRKEY:            8249 DEFINED AT LINE 17 IN variables.z80
                    > USED AT LINE 13 IN core-serial.z80
                    > USED AT LINE 269 IN core-serial.z80
                    > USED AT LINE 278 IN core-serial.z80
                    > USED AT LINE 283 IN core-serial.z80
                    > USED AT LINE 286 IN core-serial.z80
LINEBUFTOP:         824B DEFINED AT LINE 18 IN variables.z80
                    > USED AT LINE 14 IN core-serial.z80
                    > USED AT LINE 270 IN core-serial.z80
                    > USED AT LINE 281 IN core-serial.z80
LINEBUF:            824D DEFINED AT LINE 19 IN variables.z80
                    > USED AT LINE 11 IN core-serial.z80
                    > USED AT LINE 277 IN core-serial.z80
WORDBUF:            82CD DEFINED AT LINE 21 IN variables.z80
                    > USED AT LINE 8 IN core-format.z80
                    > USED AT LINE 25 IN core-format.z80
                    > USED AT LINE 71 IN core-format.z80
                    > USED AT LINE 27 IN core-strings.z80
                    > USED AT LINE 32 IN core-strings.z80
WORDBUF2:           830D DEFINED AT LINE 22 IN variables.z80
                    > USED AT LINE 29 IN core-strings.z80
VAR_PAD:            834D DEFINED AT LINE 23 IN variables.z80
                    > USED AT LINE 19
EXITADDR:           844D DEFINED AT LINE 25 IN variables.z80
                    > USED AT LINE 44 IN core-kernel.z80
                    > USED AT LINE 46 IN core-kernel.z80
IS_LITERAL:         844F DEFINED AT LINE 26 IN variables.z80
                    > USED AT LINE 9 IN core-kernel.z80
VAR_HERE:           8451 DEFINED AT LINE 27 IN variables.z80
                    > USED AT LINE 19
                    > USED AT LINE 17 IN core-kernel.z80
                    > USED AT LINE 78 IN core-memory.z80
                    > USED AT LINE 80 IN core-memory.z80
                    > USED AT LINE 86 IN core-memory.z80
                    > USED AT LINE 89 IN core-memory.z80
VAR_INTP_STOP:      8453 DEFINED AT LINE 28 IN variables.z80
                    > USED AT LINE 19
                    > USED AT LINE 8 IN core-kernel.z80
VAR_STATE:          8455 DEFINED AT LINE 29 IN variables.z80
                    > USED AT LINE 107 IN core-compiler.z80
                    > USED AT LINE 112 IN core-compiler.z80
                    > USED AT LINE 19
                    > USED AT LINE 11 IN core-kernel.z80
VAR_NESTING:        8457 DEFINED AT LINE 30 IN variables.z80
                    > USED AT LINE 19
                    > USED AT LINE 73 IN core-interpreter.z80
                    > USED AT LINE 75 IN core-interpreter.z80
                    > USED AT LINE 79 IN core-interpreter.z80
                    > USED AT LINE 81 IN core-interpreter.z80
                    > USED AT LINE 10 IN core-kernel.z80
VAR_SP0:            8459 DEFINED AT LINE 31 IN variables.z80
                    > USED AT LINE 19
                    > USED AT LINE 4 IN core-kernel.z80
VAR_BASE:           845B DEFINED AT LINE 32 IN variables.z80
                    > USED AT LINE 19
                    > USED AT LINE 6 IN core-format.z80
                    > USED AT LINE 23 IN core-format.z80
                    > USED AT LINE 122 IN core-format.z80
                    > USED AT LINE 140 IN core-format.z80
                    > USED AT LINE 152 IN core-format.z80
                    > USED AT LINE 14 IN core-kernel.z80
VAR_LATEST_STR:     845D DEFINED AT LINE 33 IN variables.z80
                    > USED AT LINE 19
                    > USED AT LINE 21 IN core-kernel.z80
VAR_LATEST:         845F DEFINED AT LINE 34 IN variables.z80
                    > USED AT LINE 87 IN core-compiler.z80
                    > USED AT LINE 192 IN core-interpreter.z80
                    > USED AT LINE 20 IN core-kernel.z80
                    > USED AT LINE 30 IN core-utilities.z80
                    > USED AT LINE 19
START_USER:         8461 DEFINED AT LINE 83
                    > USED AT LINE 16 IN core-kernel.z80
